"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/signify-ts";
exports.ids = ["vendor-chunks/signify-ts"];
exports.modules = {

/***/ "(ssr)/./node_modules/signify-ts/dist/signify-ts.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/signify-ts/dist/signify-ts.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Agent: () => (/* binding */ Agent),\n/* harmony export */   Algos: () => (/* binding */ Algos),\n/* harmony export */   Authenticater: () => (/* binding */ Authenticater),\n/* harmony export */   B64ChrByIdx: () => (/* binding */ B64ChrByIdx),\n/* harmony export */   B64IdxByChr: () => (/* binding */ B64IdxByChr),\n/* harmony export */   BexCodex: () => (/* binding */ BexCodex),\n/* harmony export */   BexDex: () => (/* binding */ BexDex),\n/* harmony export */   CesrNumber: () => (/* binding */ CesrNumber),\n/* harmony export */   Challenges: () => (/* binding */ Challenges),\n/* harmony export */   Cigar: () => (/* binding */ Cigar),\n/* harmony export */   Cipher: () => (/* binding */ Cipher),\n/* harmony export */   Codex: () => (/* binding */ Codex),\n/* harmony export */   Contacts: () => (/* binding */ Contacts),\n/* harmony export */   Controller: () => (/* binding */ Controller),\n/* harmony export */   Counter: () => (/* binding */ Counter),\n/* harmony export */   CounterCodex: () => (/* binding */ CounterCodex),\n/* harmony export */   Creatory: () => (/* binding */ Creatory),\n/* harmony export */   CredentialTypes: () => (/* binding */ CredentialTypes),\n/* harmony export */   Credentials: () => (/* binding */ Credentials),\n/* harmony export */   CtrDex: () => (/* binding */ CtrDex),\n/* harmony export */   Decrypter: () => (/* binding */ Decrypter),\n/* harmony export */   Diger: () => (/* binding */ Diger),\n/* harmony export */   DigiCodex: () => (/* binding */ DigiCodex),\n/* harmony export */   DigiDex: () => (/* binding */ DigiDex),\n/* harmony export */   DipLabels: () => (/* binding */ DipLabels),\n/* harmony export */   DrtLabels: () => (/* binding */ DrtLabels),\n/* harmony export */   EmptyMaterialError: () => (/* binding */ EmptyMaterialError),\n/* harmony export */   Encrypter: () => (/* binding */ Encrypter),\n/* harmony export */   Escrows: () => (/* binding */ Escrows),\n/* harmony export */   EventResult: () => (/* binding */ EventResult),\n/* harmony export */   Exchanges: () => (/* binding */ Exchanges),\n/* harmony export */   FALSY: () => (/* binding */ FALSY),\n/* harmony export */   GroupKeeper: () => (/* binding */ GroupKeeper),\n/* harmony export */   Groups: () => (/* binding */ Groups),\n/* harmony export */   HEADER_SIG_INPUT: () => (/* binding */ HEADER_SIG_INPUT),\n/* harmony export */   HEADER_SIG_TIME: () => (/* binding */ HEADER_SIG_TIME),\n/* harmony export */   Hab: () => (/* binding */ Hab),\n/* harmony export */   Habery: () => (/* binding */ Habery),\n/* harmony export */   IcpLabels: () => (/* binding */ IcpLabels),\n/* harmony export */   Ident: () => (/* binding */ Ident),\n/* harmony export */   Identifier: () => (/* binding */ Identifier),\n/* harmony export */   IdrDex: () => (/* binding */ IdrDex),\n/* harmony export */   Ids: () => (/* binding */ Ids),\n/* harmony export */   IdxBthSigDex: () => (/* binding */ IdxBthSigDex),\n/* harmony export */   IdxCrtSigDex: () => (/* binding */ IdxCrtSigDex),\n/* harmony export */   IdxSigDex: () => (/* binding */ IdxSigDex),\n/* harmony export */   Ilks: () => (/* binding */ Ilks),\n/* harmony export */   IndexedBothSigCodex: () => (/* binding */ IndexedBothSigCodex),\n/* harmony export */   IndexedCurrentSigCodex: () => (/* binding */ IndexedCurrentSigCodex),\n/* harmony export */   IndexedSigCodex: () => (/* binding */ IndexedSigCodex),\n/* harmony export */   Indexer: () => (/* binding */ Indexer),\n/* harmony export */   IndexerCodex: () => (/* binding */ IndexerCodex),\n/* harmony export */   Inputage: () => (/* binding */ Inputage),\n/* harmony export */   Ipex: () => (/* binding */ Ipex),\n/* harmony export */   IxnLabels: () => (/* binding */ IxnLabels),\n/* harmony export */   KeyEvents: () => (/* binding */ KeyEvents),\n/* harmony export */   KeyManager: () => (/* binding */ KeyManager),\n/* harmony export */   KeyStates: () => (/* binding */ KeyStates),\n/* harmony export */   KsnLabels: () => (/* binding */ KsnLabels),\n/* harmony export */   LargeVrzDex: () => (/* binding */ LargeVrzDex),\n/* harmony export */   MINSIGSIZE: () => (/* binding */ MINSIGSIZE),\n/* harmony export */   MINSNIFFSIZE: () => (/* binding */ MINSNIFFSIZE),\n/* harmony export */   Manager: () => (/* binding */ Manager),\n/* harmony export */   Matter: () => (/* binding */ Matter),\n/* harmony export */   MatterCodex: () => (/* binding */ MatterCodex),\n/* harmony export */   MtrDex: () => (/* binding */ MtrDex),\n/* harmony export */   NonTransCodex: () => (/* binding */ NonTransCodex),\n/* harmony export */   NonTransDex: () => (/* binding */ NonTransDex),\n/* harmony export */   Notifications: () => (/* binding */ Notifications),\n/* harmony export */   NumCodex: () => (/* binding */ NumCodex),\n/* harmony export */   NumDex: () => (/* binding */ NumDex),\n/* harmony export */   Oobis: () => (/* binding */ Oobis),\n/* harmony export */   Operations: () => (/* binding */ Operations),\n/* harmony export */   Prefixer: () => (/* binding */ Prefixer),\n/* harmony export */   RandyCreator: () => (/* binding */ RandyCreator),\n/* harmony export */   RandyKeeper: () => (/* binding */ RandyKeeper),\n/* harmony export */   Registries: () => (/* binding */ Registries),\n/* harmony export */   RegistryResult: () => (/* binding */ RegistryResult),\n/* harmony export */   RotLabels: () => (/* binding */ RotLabels),\n/* harmony export */   RpyLabels: () => (/* binding */ RpyLabels),\n/* harmony export */   Saider: () => (/* binding */ Saider),\n/* harmony export */   Salter: () => (/* binding */ Salter),\n/* harmony export */   SaltyCreator: () => (/* binding */ SaltyCreator),\n/* harmony export */   SaltyKeeper: () => (/* binding */ SaltyKeeper),\n/* harmony export */   Schemas: () => (/* binding */ Schemas),\n/* harmony export */   Seqner: () => (/* binding */ Seqner),\n/* harmony export */   Serder: () => (/* binding */ Serder),\n/* harmony export */   Serials: () => (/* binding */ Serials),\n/* harmony export */   Siger: () => (/* binding */ Siger),\n/* harmony export */   Signage: () => (/* binding */ Signage),\n/* harmony export */   Signer: () => (/* binding */ Signer),\n/* harmony export */   SignifyClient: () => (/* binding */ SignifyClient),\n/* harmony export */   Sizage: () => (/* binding */ Sizage),\n/* harmony export */   SmallVrzDex: () => (/* binding */ SmallVrzDex),\n/* harmony export */   TRUTHY: () => (/* binding */ TRUTHY),\n/* harmony export */   Tholder: () => (/* binding */ Tholder),\n/* harmony export */   Tier: () => (/* binding */ Tier),\n/* harmony export */   TraitCodex: () => (/* binding */ TraitCodex),\n/* harmony export */   TraitDex: () => (/* binding */ TraitDex),\n/* harmony export */   Unqualified: () => (/* binding */ Unqualified),\n/* harmony export */   VEREX: () => (/* binding */ VEREX),\n/* harmony export */   VERFULLSIZE: () => (/* binding */ VERFULLSIZE),\n/* harmony export */   Verfer: () => (/* binding */ Verfer),\n/* harmony export */   Version: () => (/* binding */ Version),\n/* harmony export */   Versionage: () => (/* binding */ Versionage),\n/* harmony export */   Xizage: () => (/* binding */ Xizage),\n/* harmony export */   ample: () => (/* binding */ ample),\n/* harmony export */   arrayEquals: () => (/* binding */ arrayEquals),\n/* harmony export */   b: () => (/* binding */ b),\n/* harmony export */   b64ToInt: () => (/* binding */ b64ToInt),\n/* harmony export */   bytesToInt: () => (/* binding */ bytesToInt),\n/* harmony export */   concat: () => (/* binding */ concat),\n/* harmony export */   d: () => (/* binding */ d),\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   desiginput: () => (/* binding */ desiginput),\n/* harmony export */   designature: () => (/* binding */ designature),\n/* harmony export */   deversify: () => (/* binding */ deversify),\n/* harmony export */   dumps: () => (/* binding */ dumps),\n/* harmony export */   exchange: () => (/* binding */ exchange),\n/* harmony export */   extractValues: () => (/* binding */ extractValues),\n/* harmony export */   incept: () => (/* binding */ incept),\n/* harmony export */   intToB64: () => (/* binding */ intToB64),\n/* harmony export */   intToB64b: () => (/* binding */ intToB64b),\n/* harmony export */   intToBytes: () => (/* binding */ intToBytes),\n/* harmony export */   interact: () => (/* binding */ interact),\n/* harmony export */   messagize: () => (/* binding */ messagize),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   nowUTC: () => (/* binding */ nowUTC),\n/* harmony export */   openManager: () => (/* binding */ openManager),\n/* harmony export */   pad: () => (/* binding */ pad),\n/* harmony export */   parseRangeHeaders: () => (/* binding */ parseRangeHeaders),\n/* harmony export */   randomNonce: () => (/* binding */ randomNonce),\n/* harmony export */   randomPasscode: () => (/* binding */ randomPasscode),\n/* harmony export */   range: () => (/* binding */ range),\n/* harmony export */   readInt: () => (/* binding */ readInt),\n/* harmony export */   ready: () => (/* binding */ ready),\n/* harmony export */   reply: () => (/* binding */ reply),\n/* harmony export */   riKey: () => (/* binding */ riKey),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   serializeACDCAttachment: () => (/* binding */ serializeACDCAttachment),\n/* harmony export */   serializeIssExnAttachment: () => (/* binding */ serializeIssExnAttachment),\n/* harmony export */   siginput: () => (/* binding */ siginput),\n/* harmony export */   signature: () => (/* binding */ signature),\n/* harmony export */   sizeify: () => (/* binding */ sizeify),\n/* harmony export */   versify: () => (/* binding */ versify)\n/* harmony export */ });\n/* harmony import */ var libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! libsodium-wrappers-sumo */ \"(ssr)/./node_modules/libsodium-wrappers-sumo/dist/modules-sumo/libsodium-wrappers.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var ecdsa_secp256r1__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ecdsa-secp256r1 */ \"(ssr)/./node_modules/ecdsa-secp256r1/index.js\");\n/* harmony import */ var _noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/blake3 */ \"(ssr)/./node_modules/@noble/hashes/esm/blake3.js\");\n/* harmony import */ var mathjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mathjs */ \"(ssr)/./node_modules/mathjs/lib/esm/entry/pureFunctionsAny.generated.js\");\n/* harmony import */ var structured_headers__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! structured-headers */ \"(ssr)/./node_modules/structured-headers/dist/index.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/exports.ts\nvar exports_exports = {};\n__export(exports_exports, {\n  Agent: () => Agent,\n  Algos: () => Algos,\n  Authenticater: () => Authenticater,\n  B64ChrByIdx: () => B64ChrByIdx,\n  B64IdxByChr: () => B64IdxByChr,\n  BexCodex: () => BexCodex,\n  BexDex: () => BexDex,\n  CesrNumber: () => CesrNumber,\n  Challenges: () => Challenges,\n  Cigar: () => Cigar,\n  Cipher: () => Cipher,\n  Codex: () => Codex,\n  Contacts: () => Contacts,\n  Controller: () => Controller,\n  Counter: () => Counter,\n  CounterCodex: () => CounterCodex,\n  Creatory: () => Creatory,\n  CredentialTypes: () => CredentialTypes,\n  Credentials: () => Credentials,\n  CtrDex: () => CtrDex,\n  Decrypter: () => Decrypter,\n  Diger: () => Diger,\n  DigiCodex: () => DigiCodex,\n  DigiDex: () => DigiDex,\n  DipLabels: () => DipLabels,\n  DrtLabels: () => DrtLabels,\n  EmptyMaterialError: () => EmptyMaterialError,\n  Encrypter: () => Encrypter,\n  Escrows: () => Escrows,\n  EventResult: () => EventResult,\n  Exchanges: () => Exchanges,\n  FALSY: () => FALSY,\n  GroupKeeper: () => GroupKeeper,\n  Groups: () => Groups,\n  HEADER_SIG_INPUT: () => HEADER_SIG_INPUT,\n  HEADER_SIG_TIME: () => HEADER_SIG_TIME,\n  Hab: () => Hab,\n  Habery: () => Habery,\n  IcpLabels: () => IcpLabels,\n  Ident: () => Ident,\n  Identifier: () => Identifier,\n  IdrDex: () => IdrDex,\n  Ids: () => Ids,\n  IdxBthSigDex: () => IdxBthSigDex,\n  IdxCrtSigDex: () => IdxCrtSigDex,\n  IdxSigDex: () => IdxSigDex,\n  Ilks: () => Ilks,\n  IndexedBothSigCodex: () => IndexedBothSigCodex,\n  IndexedCurrentSigCodex: () => IndexedCurrentSigCodex,\n  IndexedSigCodex: () => IndexedSigCodex,\n  Indexer: () => Indexer,\n  IndexerCodex: () => IndexerCodex,\n  Inputage: () => Inputage,\n  Ipex: () => Ipex,\n  IxnLabels: () => IxnLabels,\n  KeyEvents: () => KeyEvents,\n  KeyManager: () => KeyManager,\n  KeyStates: () => KeyStates,\n  KsnLabels: () => KsnLabels,\n  LargeVrzDex: () => LargeVrzDex,\n  MINSIGSIZE: () => MINSIGSIZE,\n  MINSNIFFSIZE: () => MINSNIFFSIZE,\n  Manager: () => Manager,\n  Matter: () => Matter,\n  MatterCodex: () => MatterCodex,\n  MtrDex: () => MtrDex,\n  NonTransCodex: () => NonTransCodex,\n  NonTransDex: () => NonTransDex,\n  Notifications: () => Notifications,\n  NumCodex: () => NumCodex,\n  NumDex: () => NumDex,\n  Oobis: () => Oobis,\n  Operations: () => Operations,\n  Prefixer: () => Prefixer,\n  RandyCreator: () => RandyCreator,\n  RandyKeeper: () => RandyKeeper,\n  Registries: () => Registries,\n  RegistryResult: () => RegistryResult,\n  RotLabels: () => RotLabels,\n  RpyLabels: () => RpyLabels,\n  Saider: () => Saider,\n  Salter: () => Salter,\n  SaltyCreator: () => SaltyCreator,\n  SaltyKeeper: () => SaltyKeeper,\n  Schemas: () => Schemas,\n  Seqner: () => Seqner,\n  Serder: () => Serder,\n  Serials: () => Serials,\n  Siger: () => Siger,\n  Signage: () => Signage,\n  Signer: () => Signer,\n  SignifyClient: () => SignifyClient,\n  Sizage: () => Sizage,\n  SmallVrzDex: () => SmallVrzDex,\n  TRUTHY: () => TRUTHY,\n  Tholder: () => Tholder,\n  Tier: () => Tier,\n  TraitCodex: () => TraitCodex,\n  TraitDex: () => TraitDex,\n  Unqualified: () => Unqualified,\n  VEREX: () => VEREX,\n  VERFULLSIZE: () => VERFULLSIZE,\n  Verfer: () => Verfer,\n  Version: () => Version,\n  Versionage: () => Versionage,\n  Xizage: () => Xizage,\n  ample: () => ample,\n  arrayEquals: () => arrayEquals,\n  b: () => b,\n  b64ToInt: () => b64ToInt,\n  bytesToInt: () => bytesToInt,\n  concat: () => concat,\n  d: () => d,\n  desiginput: () => desiginput,\n  designature: () => designature,\n  deversify: () => deversify,\n  dumps: () => dumps,\n  exchange: () => exchange,\n  extractValues: () => extractValues,\n  incept: () => incept,\n  intToB64: () => intToB64,\n  intToB64b: () => intToB64b,\n  intToBytes: () => intToBytes,\n  interact: () => interact,\n  messagize: () => messagize,\n  normalize: () => normalize,\n  nowUTC: () => nowUTC,\n  openManager: () => openManager,\n  pad: () => pad,\n  parseRangeHeaders: () => parseRangeHeaders,\n  randomNonce: () => randomNonce,\n  randomPasscode: () => randomPasscode,\n  range: () => range,\n  readInt: () => readInt,\n  ready: () => ready,\n  reply: () => reply,\n  riKey: () => riKey,\n  rotate: () => rotate,\n  serializeACDCAttachment: () => serializeACDCAttachment,\n  serializeIssExnAttachment: () => serializeIssExnAttachment,\n  siginput: () => siginput,\n  signature: () => signature,\n  sizeify: () => sizeify,\n  versify: () => versify\n});\n\n// src/ready.ts\n\nvar ready = async () => {\n  await libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.ready;\n};\n\n// src/keri/core/encrypter.ts\n\n\n// src/keri/core/kering.ts\nvar EmptyMaterialError = class {\n  _err;\n  constructor(err) {\n    this._err = new Error(err);\n  }\n  get err() {\n    return this._err;\n  }\n};\n\n// src/keri/core/core.ts\nvar Serials = /* @__PURE__ */ ((Serials2) => {\n  Serials2[\"JSON\"] = \"JSON\";\n  return Serials2;\n})(Serials || {});\nvar Ident = /* @__PURE__ */ ((Ident2) => {\n  Ident2[\"KERI\"] = \"KERI\";\n  Ident2[\"ACDC\"] = \"ACDC\";\n  return Ident2;\n})(Ident || {});\nvar Version = class {\n  major;\n  minor;\n  constructor(major = 1, minor = 0) {\n    this.major = major;\n    this.minor = minor;\n  }\n};\nvar Versionage = new Version();\nvar Ilks = {\n  icp: \"icp\",\n  rot: \"rot\",\n  ixn: \"ixn\",\n  dip: \"dip\",\n  drt: \"drt\",\n  rct: \"rct\",\n  vrc: \"vrc\",\n  rpy: \"rpy\",\n  exn: \"exn\",\n  vcp: \"vcp\",\n  iss: \"iss\",\n  rev: \"rev\"\n};\nvar IcpLabels = [\n  \"v\",\n  \"i\",\n  \"s\",\n  \"t\",\n  \"kt\",\n  \"k\",\n  \"n\",\n  \"bt\",\n  \"b\",\n  \"c\",\n  \"a\"\n];\nvar DipLabels = [\n  \"v\",\n  \"i\",\n  \"s\",\n  \"t\",\n  \"kt\",\n  \"k\",\n  \"n\",\n  \"bt\",\n  \"b\",\n  \"c\",\n  \"a\",\n  \"di\"\n];\nvar RotLabels = [\n  \"v\",\n  \"i\",\n  \"s\",\n  \"t\",\n  \"p\",\n  \"kt\",\n  \"k\",\n  \"n\",\n  \"bt\",\n  \"br\",\n  \"ba\",\n  \"a\"\n];\nvar DrtLabels = [\n  \"v\",\n  \"i\",\n  \"s\",\n  \"t\",\n  \"p\",\n  \"kt\",\n  \"k\",\n  \"n\",\n  \"bt\",\n  \"br\",\n  \"ba\",\n  \"a\"\n];\nvar IxnLabels = [\"v\", \"i\", \"s\", \"t\", \"p\", \"a\"];\nvar KsnLabels = [\n  \"v\",\n  \"i\",\n  \"s\",\n  \"t\",\n  \"p\",\n  \"d\",\n  \"f\",\n  \"dt\",\n  \"et\",\n  \"kt\",\n  \"k\",\n  \"n\",\n  \"bt\",\n  \"b\",\n  \"c\",\n  \"ee\",\n  \"di\",\n  \"r\"\n];\nvar RpyLabels = [\"v\", \"t\", \"d\", \"dt\", \"r\", \"a\"];\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar VERFULLSIZE = 17;\nvar MINSNIFFSIZE = 12 + VERFULLSIZE;\nvar MINSIGSIZE = 4;\nvar VEREX = \"(KERI|ACDC)([0-9a-f])([0-9a-f])([A-Z]{4})([0-9a-f]{6})_\";\nfunction deversify(versionString) {\n  let kind;\n  let size;\n  let proto;\n  const version = Versionage;\n  const re = new RegExp(VEREX);\n  const match = re.exec(versionString);\n  if (match) {\n    [proto, version.major, version.minor, kind, size] = [\n      match[1],\n      +match[2],\n      +match[3],\n      match[4],\n      match[5]\n    ];\n    if (!Object.values(Serials).includes(kind)) {\n      throw new Error(`Invalid serialization kind = ${kind}`);\n    }\n    if (!Object.values(Ident).includes(proto)) {\n      throw new Error(`Invalid serialization kind = ${kind}`);\n    }\n    const ta = kind;\n    kind = Serials[ta];\n    const pa = proto;\n    proto = Ident[pa];\n    return [proto, kind, version, size];\n  }\n  throw new Error(`Invalid version string = ${versionString}`);\n}\nfunction versify(ident = \"KERI\" /* KERI */, version, kind = \"JSON\" /* JSON */, size = 0) {\n  version = version == void 0 ? Versionage : version;\n  return `${ident}${version.major.toString(\n    16\n  )}${version.minor.toString()}${kind}${size.toString(16).padStart(6, \"0\")}_`;\n}\nvar B64ChrByIdx = /* @__PURE__ */ new Map([\n  [0, \"A\"],\n  [1, \"B\"],\n  [2, \"C\"],\n  [3, \"D\"],\n  [4, \"E\"],\n  [5, \"F\"],\n  [6, \"G\"],\n  [7, \"H\"],\n  [8, \"I\"],\n  [9, \"J\"],\n  [10, \"K\"],\n  [11, \"L\"],\n  [12, \"M\"],\n  [13, \"N\"],\n  [14, \"O\"],\n  [15, \"P\"],\n  [16, \"Q\"],\n  [17, \"R\"],\n  [18, \"S\"],\n  [19, \"T\"],\n  [20, \"U\"],\n  [21, \"V\"],\n  [22, \"W\"],\n  [23, \"X\"],\n  [24, \"Y\"],\n  [25, \"Z\"],\n  [26, \"a\"],\n  [27, \"b\"],\n  [28, \"c\"],\n  [29, \"d\"],\n  [30, \"e\"],\n  [31, \"f\"],\n  [32, \"g\"],\n  [33, \"h\"],\n  [34, \"i\"],\n  [35, \"j\"],\n  [36, \"k\"],\n  [37, \"l\"],\n  [38, \"m\"],\n  [39, \"n\"],\n  [40, \"o\"],\n  [41, \"p\"],\n  [42, \"q\"],\n  [43, \"r\"],\n  [44, \"s\"],\n  [45, \"t\"],\n  [46, \"u\"],\n  [47, \"v\"],\n  [48, \"w\"],\n  [49, \"x\"],\n  [50, \"y\"],\n  [51, \"z\"],\n  [52, \"0\"],\n  [53, \"1\"],\n  [54, \"2\"],\n  [55, \"3\"],\n  [56, \"4\"],\n  [57, \"5\"],\n  [58, \"6\"],\n  [59, \"7\"],\n  [60, \"8\"],\n  [61, \"9\"],\n  [62, \"-\"],\n  [63, \"_\"]\n]);\nvar B64IdxByChr = new Map(\n  Array.from(B64ChrByIdx, (entry) => [entry[1], entry[0]])\n);\nfunction intToB64(i, l = 1) {\n  let out = \"\";\n  while (l != 0) {\n    out = B64ChrByIdx.get(i % 64) + out;\n    i = Math.floor(i / 64);\n    if (i == 0) {\n      break;\n    }\n  }\n  const x = l - out.length;\n  for (let i2 = 0; i2 < x; i2++) {\n    out = \"A\" + out;\n  }\n  return out;\n}\nfunction intToB64b(n, l = 1) {\n  const s = intToB64(n, l);\n  return b(s);\n}\nfunction b64ToInt(s) {\n  if (s.length == 0) {\n    throw new Error(\"Empty string, conversion undefined.\");\n  }\n  let i = 0;\n  const rev = s.split(\"\").reverse();\n  rev.forEach((c, e) => {\n    i |= B64IdxByChr.get(c) << e * 6;\n  });\n  return i;\n}\nfunction b(s) {\n  return encoder.encode(s);\n}\nfunction d(u) {\n  return decoder.decode(u);\n}\nfunction concat(one, two) {\n  const out = new Uint8Array(one.length + two.length);\n  out.set(one);\n  out.set(two, one.length);\n  return out;\n}\nfunction readInt(array) {\n  let value = 0;\n  for (let i = 0; i < array.length; i++) {\n    value = value * 256 + array[i];\n  }\n  return value;\n}\n\n// src/keri/core/matter.ts\n\n\n// src/keri/core/base64.ts\n\nfunction encodeBase64Url(buffer) {\n  if (!buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.isBuffer(buffer)) {\n    throw new TypeError(\"`buffer` must be a buffer.\");\n  }\n  return buffer.toString(\"base64\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+/, \"\");\n}\nfunction decodeBase64Url(input) {\n  if (!(typeof input === \"string\")) {\n    throw new TypeError(\"`input` must be a string.\");\n  }\n  const n = input.length % 4;\n  const padded = input + \"=\".repeat(n > 0 ? 4 - n : n);\n  const base64String = padded.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(base64String, \"base64\");\n}\n\n// src/keri/core/matter.ts\nvar Codex = class {\n  has(prop) {\n    const m = new Map(\n      Array.from(Object.entries(this), (v) => [v[1], v[0]])\n    );\n    return m.has(prop);\n  }\n};\nvar MatterCodex = class extends Codex {\n  Ed25519_Seed = \"A\";\n  // Ed25519 256 bit random seed for private key\n  Ed25519N = \"B\";\n  // Ed25519 verification key non-transferable, basic derivation.\n  X25519 = \"C\";\n  // X25519 public encryption key, converted from Ed25519 or Ed25519N.\n  Ed25519 = \"D\";\n  // Ed25519 verification key basic derivation\n  Blake3_256 = \"E\";\n  // Blake3 256 bit digest self-addressing derivation.\n  SHA3_256 = \"H\";\n  // SHA3 256 bit digest self-addressing derivation.\n  SHA2_256 = \"I\";\n  // SHA2 256 bit digest self-addressing derivation.\n  ECDSA_256k1_Seed = \"J\";\n  // ECDSA secp256k1 256 bit random Seed for private key\n  X25519_Private = \"O\";\n  // X25519 private decryption key converted from Ed25519\n  X25519_Cipher_Seed = \"P\";\n  // X25519 124 char b64 Cipher of 44 char qb64 Seed\n  ECDSA_256r1_Seed = \"Q\";\n  // ECDSA secp256r1 256 bit random Seed for private key\n  Salt_128 = \"0A\";\n  // 128 bit random salt or 128 bit number (see Huge)\n  Ed25519_Sig = \"0B\";\n  // Ed25519 signature.\n  ECDSA_256k1_Sig = \"0C\";\n  // ECDSA secp256k1 signature.\n  ECDSA_256r1_Sig = \"0I\";\n  // ECDSA secp256r1 signature.\n  StrB64_L0 = \"4A\";\n  // String Base64 Only Lead Size 0\n  StrB64_L1 = \"5A\";\n  // String Base64 Only Lead Size 1\n  StrB64_L2 = \"6A\";\n  // String Base64 Only Lead Size 2\n  ECDSA_256k1N = \"1AAA\";\n  // ECDSA secp256k1 verification key non-transferable, basic derivation.\n  ECDSA_256k1 = \"1AAB\";\n  // ECDSA public verification or encryption key, basic derivation\n  X25519_Cipher_Salt = \"1AAH\";\n  // X25519 100 char b64 Cipher of 24 char qb64 Salt\n  ECDSA_256r1N = \"1AAI\";\n  // ECDSA secp256r1 verification key non-transferable, basic derivation.\n  ECDSA_256r1 = \"1AAJ\";\n  // ECDSA secp256r1 verification or encryption key, basic derivation\n  StrB64_Big_L0 = \"7AAA\";\n  // String Base64 Only Big Lead Size 0\n  StrB64_Big_L1 = \"8AAA\";\n  // String Base64 Only Big Lead Size 1\n  StrB64_Big_L2 = \"9AAA\";\n  // String Base64 Only Big Lead Size 2\n};\nvar MtrDex = new MatterCodex();\nvar NonTransCodex = class extends Codex {\n  Ed25519N = \"B\";\n  // Ed25519 verification key non-transferable, basic derivation.\n  ECDSA_256k1N = \"1AAA\";\n  // ECDSA secp256k1 verification key non-transferable, basic derivation.\n  Ed448N = \"1AAC\";\n  // Ed448 non-transferable prefix public signing verification key. Basic derivation.\n  ECDSA_256r1N = \"1AAI\";\n  // ECDSA secp256r1 verification key non-transferable, basic derivation.\n};\nvar NonTransDex = new NonTransCodex();\nvar DigiCodex = class extends Codex {\n  Blake3_256 = \"E\";\n  // Blake3 256 bit digest self-addressing derivation.\n  Blake2b_256 = \"F\";\n  // Blake2b 256 bit digest self-addressing derivation.\n  Blake2s_256 = \"G\";\n  // Blake2s 256 bit digest self-addressing derivation.\n  SHA3_256 = \"H\";\n  // SHA3 256 bit digest self-addressing derivation.\n  SHA2_256 = \"I\";\n  // SHA2 256 bit digest self-addressing derivation.\n  Blake3_512 = \"0D\";\n  // Blake3 512 bit digest self-addressing derivation.\n  Blake2b_512 = \"0E\";\n  // Blake2b 512 bit digest self-addressing derivation.\n  SHA3_512 = \"0F\";\n  // SHA3 512 bit digest self-addressing derivation.\n  SHA2_512 = \"0G\";\n  // SHA2 512 bit digest self-addressing derivation.\n};\nvar DigiDex = new DigiCodex();\nvar NumCodex = class extends Codex {\n  Short = \"M\";\n  // Short 2 byte b2 number\n  Long = \"0H\";\n  // Long 4 byte b2 number\n  Big = \"N\";\n  // Big 8 byte b2 number\n  Huge = \"0A\";\n  // Huge 16 byte b2 number (same as Salt_128)\n};\nvar NumDex = new NumCodex();\nvar BexCodex = class extends Codex {\n  StrB64_L0 = \"4A\";\n  // String Base64 Only Leader Size 0\n  StrB64_L1 = \"5A\";\n  // String Base64 Only Leader Size 1\n  StrB64_L2 = \"6A\";\n  // String Base64 Only Leader Size 2\n  StrB64_Big_L0 = \"7AAA\";\n  // String Base64 Only Big Leader Size 0\n  StrB64_Big_L1 = \"8AAA\";\n  // String Base64 Only Big Leader Size 1\n  StrB64_Big_L2 = \"9AAA\";\n  // String Base64 Only Big Leader Size 2\n};\nvar BexDex = new BexCodex();\nvar SmallVarRawSizeCodex = class extends Codex {\n  Lead0 = \"4\";\n  // First Selector Character for all ls == 0 codes\n  Lead1 = \"5\";\n  // First Selector Character for all ls == 1 codes\n  Lead2 = \"6\";\n  // First Selector Character for all ls == 2 codes\n};\nvar SmallVrzDex = new SmallVarRawSizeCodex();\nvar LargeVarRawSizeCodex = class extends Codex {\n  Lead0_Big = \"7\";\n  // First Selector Character for all ls == 0 codes\n  Lead1_Big = \"8\";\n  // First Selector Character for all ls == 1 codes\n  Lead2_Big = \"9\";\n  // First Selector Character for all ls == 2 codes\n};\nvar LargeVrzDex = new LargeVarRawSizeCodex();\nvar Sizage = class {\n  hs;\n  ss;\n  ls;\n  fs;\n  constructor(hs, ss, fs, ls) {\n    this.hs = hs;\n    this.ss = ss;\n    this.fs = fs;\n    this.ls = ls;\n  }\n};\nvar Matter = class _Matter {\n  static Sizes = new Map(\n    Object.entries({\n      A: new Sizage(1, 0, 44, 0),\n      B: new Sizage(1, 0, 44, 0),\n      C: new Sizage(1, 0, 44, 0),\n      D: new Sizage(1, 0, 44, 0),\n      E: new Sizage(1, 0, 44, 0),\n      F: new Sizage(1, 0, 44, 0),\n      G: new Sizage(1, 0, 44, 0),\n      H: new Sizage(1, 0, 44, 0),\n      I: new Sizage(1, 0, 44, 0),\n      J: new Sizage(1, 0, 44, 0),\n      K: new Sizage(1, 0, 76, 0),\n      L: new Sizage(1, 0, 76, 0),\n      M: new Sizage(1, 0, 4, 0),\n      N: new Sizage(1, 0, 12, 0),\n      O: new Sizage(1, 0, 44, 0),\n      P: new Sizage(1, 0, 124, 0),\n      Q: new Sizage(1, 0, 44, 0),\n      \"0A\": new Sizage(2, 0, 24, 0),\n      \"0B\": new Sizage(2, 0, 88, 0),\n      \"0C\": new Sizage(2, 0, 88, 0),\n      \"0D\": new Sizage(2, 0, 88, 0),\n      \"0E\": new Sizage(2, 0, 88, 0),\n      \"0F\": new Sizage(2, 0, 88, 0),\n      \"0G\": new Sizage(2, 0, 88, 0),\n      \"0H\": new Sizage(2, 0, 8, 0),\n      \"0I\": new Sizage(2, 0, 88, 0),\n      \"1AAA\": new Sizage(4, 0, 48, 0),\n      \"1AAB\": new Sizage(4, 0, 48, 0),\n      \"1AAC\": new Sizage(4, 0, 80, 0),\n      \"1AAD\": new Sizage(4, 0, 80, 0),\n      \"1AAE\": new Sizage(4, 0, 56, 0),\n      \"1AAF\": new Sizage(4, 0, 8, 0),\n      \"1AAG\": new Sizage(4, 0, 36, 0),\n      \"1AAH\": new Sizage(4, 0, 100, 0),\n      \"1AAI\": new Sizage(4, 0, 48, 0),\n      \"1AAJ\": new Sizage(4, 0, 48, 0),\n      \"2AAA\": new Sizage(4, 0, 8, 1),\n      \"3AAA\": new Sizage(4, 0, 8, 2),\n      \"4A\": new Sizage(2, 2, void 0, 0),\n      \"5A\": new Sizage(2, 2, void 0, 1),\n      \"6A\": new Sizage(2, 2, void 0, 2),\n      \"7AAA\": new Sizage(4, 4, void 0, 0),\n      \"8AAA\": new Sizage(4, 4, void 0, 1),\n      \"9AAA\": new Sizage(4, 4, void 0, 2),\n      \"4B\": new Sizage(2, 2, void 0, 0),\n      \"5B\": new Sizage(2, 2, void 0, 1),\n      \"6B\": new Sizage(2, 2, void 0, 2),\n      \"7AAB\": new Sizage(4, 4, void 0, 0),\n      \"8AAB\": new Sizage(4, 4, void 0, 1),\n      \"9AAB\": new Sizage(4, 4, void 0, 2)\n    })\n  );\n  static Hards = /* @__PURE__ */ new Map([\n    [\"A\", 1],\n    [\"B\", 1],\n    [\"C\", 1],\n    [\"D\", 1],\n    [\"E\", 1],\n    [\"F\", 1],\n    [\"G\", 1],\n    [\"H\", 1],\n    [\"I\", 1],\n    [\"J\", 1],\n    [\"K\", 1],\n    [\"L\", 1],\n    [\"M\", 1],\n    [\"N\", 1],\n    [\"O\", 1],\n    [\"P\", 1],\n    [\"Q\", 1],\n    [\"R\", 1],\n    [\"S\", 1],\n    [\"T\", 1],\n    [\"U\", 1],\n    [\"V\", 1],\n    [\"W\", 1],\n    [\"X\", 1],\n    [\"Y\", 1],\n    [\"Z\", 1],\n    [\"a\", 1],\n    [\"b\", 1],\n    [\"c\", 1],\n    [\"d\", 1],\n    [\"e\", 1],\n    [\"f\", 1],\n    [\"g\", 1],\n    [\"h\", 1],\n    [\"i\", 1],\n    [\"j\", 1],\n    [\"k\", 1],\n    [\"l\", 1],\n    [\"m\", 1],\n    [\"n\", 1],\n    [\"o\", 1],\n    [\"p\", 1],\n    [\"q\", 1],\n    [\"r\", 1],\n    [\"s\", 1],\n    [\"t\", 1],\n    [\"u\", 1],\n    [\"v\", 1],\n    [\"w\", 1],\n    [\"x\", 1],\n    [\"y\", 1],\n    [\"z\", 1],\n    [\"0\", 2],\n    [\"1\", 4],\n    [\"2\", 4],\n    [\"3\", 4],\n    [\"4\", 2],\n    [\"5\", 2],\n    [\"6\", 2],\n    [\"7\", 4],\n    [\"8\", 4],\n    [\"9\", 4]\n  ]);\n  _code = \"\";\n  _size = -1;\n  _raw = new Uint8Array(0);\n  constructor({\n    raw,\n    code = MtrDex.Ed25519N,\n    qb64b,\n    qb64,\n    qb2,\n    rize\n  }) {\n    let size = -1;\n    if (raw != void 0) {\n      if (code.length == 0) {\n        throw new Error(\n          \"Improper initialization need either (raw and code) or qb64b or qb64 or qb2.\"\n        );\n      }\n      if (SmallVrzDex.has(code[0]) || LargeVrzDex.has(code[0])) {\n        if (rize !== void 0) {\n          if (rize < 0)\n            throw new Error(\n              `missing var raw size for code=${code}`\n            );\n        } else {\n          rize = raw.length;\n        }\n        const ls = (3 - rize % 3) % 3;\n        size = Math.floor((rize + ls) / 3);\n        if (SmallVrzDex.has(code[0])) {\n          if (size <= 64 ** 2 - 1) {\n            const hs = 2;\n            const s = Object.values(SmallVrzDex)[ls];\n            code = `${s}${code.substring(1, hs)}`;\n          } else if (size <= 64 ** 4 - 1) {\n            const hs = 4;\n            const s = Object.values(LargeVrzDex)[ls];\n            code = `${s}${\"AAAA\".substring(0, hs - 2)}${code[1]}`;\n          } else {\n            throw new Error(\n              `Unsupported raw size for code=${code}`\n            );\n          }\n        } else {\n          if (size <= 64 ** 4 - 1) {\n            const hs = 4;\n            const s = Object.values(LargeVrzDex)[ls];\n            code = `${s}${code.substring(1, hs)}`;\n          } else {\n            throw new Error(\n              `Unsupported raw size for code=${code}`\n            );\n          }\n        }\n      } else {\n        const sizage = _Matter.Sizes.get(code);\n        if (sizage.fs == -1) {\n          throw new Error(`Unsupported variable size code=${code}`);\n        }\n        rize = _Matter._rawSize(code);\n      }\n      raw = raw.slice(0, rize);\n      if (raw.length != rize) {\n        throw new Error(\n          `Not enougth raw bytes for code=${code} expected ${rize} got ${raw.length}.`\n        );\n      }\n      this._code = code;\n      this._size = size;\n      this._raw = raw;\n    } else if (qb64 !== void 0) {\n      this._exfil(qb64);\n    } else if (qb64b !== void 0) {\n      const qb642 = d(qb64b);\n      this._exfil(qb642);\n    } else if (qb2 !== void 0) {\n      this._bexfil(qb2);\n    } else {\n      throw new EmptyMaterialError(\"EmptyMaterialError\");\n    }\n  }\n  get code() {\n    return this._code;\n  }\n  get size() {\n    return this._size;\n  }\n  get raw() {\n    return this._raw;\n  }\n  get qb64() {\n    return this._infil();\n  }\n  get qb64b() {\n    return b(this.qb64);\n  }\n  get transferable() {\n    return !NonTransDex.has(this.code);\n  }\n  get digestive() {\n    return DigiDex.has(this.code);\n  }\n  static _rawSize(code) {\n    const sizage = this.Sizes.get(code);\n    const cs = sizage.hs + sizage.ss;\n    if (sizage.fs === -1) {\n      throw Error(`Non-fixed raw size code ${code}.`);\n    }\n    return Math.floor((sizage.fs - cs) * 3 / 4) - sizage.ls;\n  }\n  static _leadSize(code) {\n    const sizage = this.Sizes.get(code);\n    return sizage.ls;\n  }\n  get both() {\n    const sizage = _Matter.Sizes.get(this.code);\n    return `${this.code}${intToB64(this.size, sizage.ss)}`;\n  }\n  _infil() {\n    const code = this.code;\n    const size = this.size;\n    const raw = this.raw;\n    const ps = (3 - raw.length % 3) % 3;\n    const sizage = _Matter.Sizes.get(code);\n    if (sizage.fs === void 0) {\n      const cs = sizage.hs + sizage.ss;\n      if (cs % 4) {\n        throw new Error(\n          `Whole code size not multiple of 4 for variable length material. cs=${cs}`\n        );\n      }\n      if (size < 0 || size > 64 ** sizage.ss - 1) {\n        throw new Error(`Invalid size=${size} for code=${code}.`);\n      }\n      const both = `${code}${intToB64(size, sizage.ss)}`;\n      if (both.length % 4 !== ps - sizage.ls) {\n        throw new Error(\n          `Invalid code=${both} for converted raw pad size=${ps}.`\n        );\n      }\n      const bytes = new Uint8Array(sizage.ls + raw.length);\n      for (let i = 0; i < sizage.ls; i++) {\n        bytes[i] = 0;\n      }\n      for (let i = 0; i < raw.length; i++) {\n        const odx = i + ps;\n        bytes[odx] = raw[i];\n      }\n      return both + encodeBase64Url(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(bytes));\n    } else {\n      const both = code;\n      const cs = both.length;\n      if (cs % 4 != ps - sizage.ls) {\n        throw new Error(\n          `Invalid code=${both} for converted raw pad size=${ps}, ${raw.length}.`\n        );\n      }\n      const bytes = new Uint8Array(ps + raw.length);\n      for (let i = 0; i < ps; i++) {\n        bytes[i] = 0;\n      }\n      for (let i = 0; i < raw.length; i++) {\n        const odx = i + ps;\n        bytes[odx] = raw[i];\n      }\n      return both + encodeBase64Url(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(bytes)).slice(cs % 4);\n    }\n  }\n  _exfil(qb64) {\n    if (qb64.length == 0) {\n      throw new Error(\"Empty Material\");\n    }\n    const first = qb64[0];\n    if (!Array.from(_Matter.Hards.keys()).includes(first)) {\n      throw new Error(`Unexpected code ${first}`);\n    }\n    const hs = _Matter.Hards.get(first);\n    if (qb64.length < hs) {\n      throw new Error(`Shortage Error`);\n    }\n    const hard = qb64.slice(0, hs);\n    if (!Array.from(_Matter.Sizes.keys()).includes(hard)) {\n      throw new Error(`Unsupported code ${hard}`);\n    }\n    const sizage = _Matter.Sizes.get(hard);\n    const cs = sizage.hs + sizage.ss;\n    let size = -1;\n    if (sizage.fs == -1) {\n      throw new Error(\"Variable size codes not supported yet\");\n    } else {\n      size = sizage.fs;\n    }\n    if (qb64.length < sizage.fs) {\n      throw new Error(`Need ${sizage.fs - qb64.length} more chars.`);\n    }\n    qb64 = qb64.slice(0, sizage.fs);\n    const ps = cs % 4;\n    const pbs = 2 * (ps == 0 ? sizage.ls : ps);\n    let raw;\n    if (ps != 0) {\n      const base = new Array(ps + 1).join(\"A\") + qb64.slice(cs);\n      const paw = decodeBase64Url(base);\n      const pi = readInt(paw.subarray(0, ps));\n      if (pi & 2 ** pbs - 1) {\n        throw new Error(\n          `Non zeroed prepad bits = {pi & (2 ** pbs - 1 ):<06b} in {qb64b[cs:cs+1]}.`\n        );\n      }\n      raw = paw.subarray(ps);\n    } else {\n      const base = qb64.slice(cs);\n      const paw = decodeBase64Url(base);\n      const li = readInt(paw.subarray(0, sizage.ls));\n      if (li != 0) {\n        if (li == 1) {\n          throw new Error(`Non zeroed lead byte = 0x{li:02x}.`);\n        } else {\n          throw new Error(`Non zeroed lead bytes = 0x{li:04x}`);\n        }\n      }\n      raw = paw.subarray(sizage.ls);\n    }\n    this._code = hard;\n    this._size = size;\n    this._raw = Uint8Array.from(raw);\n  }\n  _bexfil(qb2) {\n    throw new Error(`qb2 not yet supported: ${qb2}`);\n  }\n};\n\n// src/keri/core/verfer.ts\n\n\nvar Verfer = class extends Matter {\n  _verify;\n  constructor({ raw, code, qb64, qb64b, qb2 }) {\n    super({ raw, code, qb64, qb64b, qb2 });\n    if (Array.from([MtrDex.Ed25519N, MtrDex.Ed25519]).includes(this.code)) {\n      this._verify = this._ed25519;\n    } else if (Array.from([MtrDex.ECDSA_256r1N, MtrDex.ECDSA_256r1]).includes(\n      this.code\n    )) {\n      this._verify = this._secp256r1;\n    } else {\n      throw new Error(`Unsupported code = ${this.code} for verifier.`);\n    }\n  }\n  verify(sig, ser) {\n    return this._verify(sig, ser, this.raw);\n  }\n  _ed25519(sig, ser, key) {\n    try {\n      return libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_verify_detached(sig, ser, key);\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n  _secp256r1(sig, ser, key) {\n    try {\n      const publicKey = ecdsa_secp256r1__WEBPACK_IMPORTED_MODULE_2__.fromCompressedPublicKey(key);\n      return publicKey.verify(ser, sig);\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n};\n\n// src/keri/core/signer.ts\n\n\n// src/keri/core/cigar.ts\nvar Cigar = class extends Matter {\n  _verfer;\n  constructor({ raw, code, qb64, qb64b, qb2 }, verfer) {\n    super({ raw, code, qb64, qb64b, qb2 });\n    this._verfer = verfer;\n  }\n  get verfer() {\n    return this._verfer;\n  }\n  set verfer(verfer) {\n    this._verfer = verfer;\n  }\n};\n\n// src/keri/core/indexer.ts\n\nvar IndexerCodex = class {\n  Ed25519_Sig = \"A\";\n  // Ed25519 sig appears same in both lists if any.\n  Ed25519_Crt_Sig = \"B\";\n  // Ed25519 sig appears in current list only.\n  ECDSA_256k1_Sig = \"C\";\n  // ECDSA secp256k1 sig appears same in both lists if any.\n  ECDSA_256k1_Crt_Sig = \"D\";\n  // ECDSA secp256k1 sig appears in current list.\n  ECDSA_256r1_Sig = \"E\";\n  // ECDSA secp256r1 sig appears same in both lists if any.\n  ECDSA_256r1_Crt_Sig = \"F\";\n  // ECDSA secp256r1 sig appears in current list.\n  Ed448_Sig = \"0A\";\n  // Ed448 signature appears in both lists.\n  Ed448_Crt_Sig = \"0B\";\n  // Ed448 signature appears in current list only.\n  Ed25519_Big_Sig = \"2A\";\n  // Ed25519 sig appears in both lists.\n  Ed25519_Big_Crt_Sig = \"2B\";\n  // Ed25519 sig appears in current list only.\n  ECDSA_256k1_Big_Sig = \"2C\";\n  // ECDSA secp256k1 sig appears in both lists.\n  ECDSA_256k1_Big_Crt_Sig = \"2D\";\n  // ECDSA secp256k1 sig appears in current list only.\n  ECDSA_256r1_Big_Sig = \"2E\";\n  // ECDSA secp256r1 sig appears in both lists.\n  ECDSA_256r1_Big_Crt_Sig = \"2F\";\n  // ECDSA secp256r1 sig appears in current list only.\n  Ed448_Big_Sig = \"3A\";\n  // Ed448 signature appears in both lists.\n  Ed448_Big_Crt_Sig = \"3B\";\n  // Ed448 signature appears in current list only.\n};\nvar IdrDex = new IndexerCodex();\nvar IndexedSigCodex = class {\n  Ed25519_Sig = \"A\";\n  // Ed25519 sig appears same in both lists if any.\n  Ed25519_Crt_Sig = \"B\";\n  // Ed25519 sig appears in current list only.\n  ECDSA_256k1_Sig = \"C\";\n  // ECDSA secp256k1 sig appears same in both lists if any.\n  ECDSA_256k1_Crt_Sig = \"D\";\n  // ECDSA secp256k1 sig appears in current list.\n  ECDSA_256r1_Sig = \"E\";\n  // ECDSA secp256r1 sig appears same in both lists if any.\n  ECDSA_256r1_Crt_Sig = \"F\";\n  // ECDSA secp256r1 sig appears in current list.\n  Ed448_Sig = \"0A\";\n  // Ed448 signature appears in both lists.\n  Ed448_Crt_Sig = \"0B\";\n  // Ed448 signature appears in current list only.\n  Ed25519_Big_Sig = \"2A\";\n  // Ed25519 sig appears in both lists.\n  Ed25519_Big_Crt_Sig = \"2B\";\n  // Ed25519 sig appears in current list only.\n  ECDSA_256k1_Big_Sig = \"2C\";\n  // ECDSA secp256k1 sig appears in both lists.\n  ECDSA_256k1_Big_Crt_Sig = \"2D\";\n  // ECDSA secp256k1 sig appears in current list only.\n  ECDSA_256r1_Big_Sig = \"2E\";\n  // ECDSA secp256r1 sig appears in both lists.\n  ECDSA_256r1_Big_Crt_Sig = \"2F\";\n  // ECDSA secp256r1 sig appears in current list only.\n  Ed448_Big_Sig = \"3A\";\n  // Ed448 signature appears in both lists.\n  Ed448_Big_Crt_Sig = \"3B\";\n  // Ed448 signature appears in current list only.\n  has(prop) {\n    const m = new Map(\n      Array.from(Object.entries(this), (v) => [v[1], v[0]])\n    );\n    return m.has(prop);\n  }\n};\nvar IdxSigDex = new IndexedSigCodex();\nvar IndexedCurrentSigCodex = class {\n  Ed25519_Crt_Sig = \"B\";\n  // Ed25519 sig appears in current list only.\n  ECDSA_256k1_Crt_Sig = \"D\";\n  // ECDSA secp256k1 sig appears in current list only.\n  ECDSA_256r1_Crt_Sig = \"F\";\n  // ECDSA secp256r1 sig appears in current list.\n  Ed448_Crt_Sig = \"0B\";\n  // Ed448 signature appears in current list only.\n  Ed25519_Big_Crt_Sig = \"2B\";\n  // Ed25519 sig appears in current list only.\n  ECDSA_256k1_Big_Crt_Sig = \"2D\";\n  // ECDSA secp256k1 sig appears in current list only.\n  ECDSA_256r1_Big_Crt_Sig = \"2F\";\n  // ECDSA secp256r1 sig appears in current list only.\n  Ed448_Big_Crt_Sig = \"3B\";\n  // Ed448 signature appears in current list only.\n  has(prop) {\n    const m = new Map(\n      Array.from(Object.entries(this), (v) => [v[1], v[0]])\n    );\n    return m.has(prop);\n  }\n};\nvar IdxCrtSigDex = new IndexedCurrentSigCodex();\nvar IndexedBothSigCodex = class {\n  Ed25519_Sig = \"A\";\n  // Ed25519 sig appears same in both lists if any.\n  ECDSA_256k1_Sig = \"C\";\n  // ECDSA secp256k1 sig appears same in both lists if any.\n  Ed448_Sig = \"0A\";\n  // Ed448 signature appears in both lists.\n  Ed25519_Big_Sig = \"2A\";\n  // Ed25519 sig appears in both listsy.\n  ECDSA_256k1_Big_Sig = \"2C\";\n  // ECDSA secp256k1 sig appears in both lists.\n  Ed448_Big_Sig = \"3A\";\n  // Ed448 signature appears in both lists.\n  has(prop) {\n    const m = new Map(\n      Array.from(Object.entries(this), (v) => [v[1], v[0]])\n    );\n    return m.has(prop);\n  }\n};\nvar IdxBthSigDex = new IndexedBothSigCodex();\nvar Xizage = class {\n  hs;\n  ss;\n  os;\n  fs;\n  ls;\n  constructor(hs, ss, os, fs, ls) {\n    this.hs = hs;\n    this.ss = ss;\n    this.os = os;\n    this.fs = fs;\n    this.ls = ls;\n  }\n};\nvar Indexer = class _Indexer {\n  Codex = IdrDex;\n  static Hards = /* @__PURE__ */ new Map([\n    [\"A\", 1],\n    [\"B\", 1],\n    [\"C\", 1],\n    [\"D\", 1],\n    [\"E\", 1],\n    [\"F\", 1],\n    [\"G\", 1],\n    [\"H\", 1],\n    [\"I\", 1],\n    [\"J\", 1],\n    [\"K\", 1],\n    [\"L\", 1],\n    [\"M\", 1],\n    [\"N\", 1],\n    [\"O\", 1],\n    [\"P\", 1],\n    [\"Q\", 1],\n    [\"R\", 1],\n    [\"S\", 1],\n    [\"T\", 1],\n    [\"U\", 1],\n    [\"V\", 1],\n    [\"W\", 1],\n    [\"X\", 1],\n    [\"Y\", 1],\n    [\"Z\", 1],\n    [\"a\", 1],\n    [\"b\", 1],\n    [\"c\", 1],\n    [\"d\", 1],\n    [\"e\", 1],\n    [\"f\", 1],\n    [\"g\", 1],\n    [\"h\", 1],\n    [\"i\", 1],\n    [\"j\", 1],\n    [\"k\", 1],\n    [\"l\", 1],\n    [\"m\", 1],\n    [\"n\", 1],\n    [\"o\", 1],\n    [\"p\", 1],\n    [\"q\", 1],\n    [\"r\", 1],\n    [\"s\", 1],\n    [\"t\", 1],\n    [\"u\", 1],\n    [\"v\", 1],\n    [\"w\", 1],\n    [\"x\", 1],\n    [\"y\", 1],\n    [\"z\", 1],\n    [\"0\", 2],\n    [\"1\", 2],\n    [\"2\", 2],\n    [\"3\", 2],\n    [\"4\", 2]\n  ]);\n  static Sizes = new Map(\n    Object.entries({\n      A: new Xizage(1, 1, 0, 88, 0),\n      B: new Xizage(1, 1, 0, 88, 0),\n      C: new Xizage(1, 1, 0, 88, 0),\n      D: new Xizage(1, 1, 0, 88, 0),\n      E: new Xizage(1, 1, 0, 88, 0),\n      F: new Xizage(1, 1, 0, 88, 0),\n      \"0A\": new Xizage(2, 2, 1, 156, 0),\n      \"0B\": new Xizage(2, 2, 1, 156, 0),\n      \"2A\": new Xizage(2, 4, 2, 92, 0),\n      \"2B\": new Xizage(2, 4, 2, 92, 0),\n      \"2C\": new Xizage(2, 4, 2, 92, 0),\n      \"2D\": new Xizage(2, 4, 2, 92, 0),\n      \"2E\": new Xizage(2, 4, 2, 92, 0),\n      \"2F\": new Xizage(2, 4, 2, 92, 0),\n      \"3A\": new Xizage(2, 6, 3, 160, 0),\n      \"3B\": new Xizage(2, 6, 3, 160, 0),\n      \"0z\": new Xizage(2, 2, 0, void 0, 0),\n      \"1z\": new Xizage(2, 2, 1, 76, 1),\n      \"4z\": new Xizage(2, 6, 3, 80, 1)\n    })\n  );\n  _code = \"\";\n  _index = -1;\n  _ondex;\n  _raw = new Uint8Array(0);\n  constructor({\n    raw = void 0,\n    code = IdrDex.Ed25519_Sig,\n    index = 0,\n    ondex = void 0,\n    qb64b = void 0,\n    qb64 = void 0,\n    qb2 = void 0\n  }) {\n    if (raw != void 0) {\n      if (code == void 0) {\n        throw new EmptyMaterialError(\n          `Improper initialization need either (raw and code) or qb64b or qb64 or qb2.`\n        );\n      }\n      if (!_Indexer.Sizes.has(code)) {\n        throw new Error(`Unsupported code=${code}.`);\n      }\n      const xizage = _Indexer.Sizes.get(code);\n      const os = xizage.os;\n      const fs = xizage.fs;\n      const cs = xizage.hs + xizage.ss;\n      const ms = xizage.ss - xizage.os;\n      if (!Number.isInteger(index) || index < 0 || index > 64 ** ms - 1) {\n        throw new Error(`Invalid index=${index} for code=${code}.`);\n      }\n      if (ondex != void 0 && xizage.os != 0 && !(ondex >= 0 && ondex <= 64 ** os - 1)) {\n        throw new Error(`Invalid ondex=${ondex} for code=${code}.`);\n      }\n      if (IdxCrtSigDex.has(code) && ondex != void 0) {\n        throw new Error(`Non None ondex=${ondex} for code=${code}.`);\n      }\n      if (IdxBthSigDex.has(code)) {\n        if (ondex == void 0) {\n          ondex = index;\n        } else {\n          if (ondex != index && os == 0) {\n            throw new Error(\n              `Non matching ondex=${ondex} and index=${index} for code=${code}.`\n            );\n          }\n        }\n      }\n      if (fs == void 0) {\n        throw new Error(\"variable length unsupported\");\n      }\n      const rawsize = Math.floor((fs - cs) * 3 / 4);\n      raw = raw.slice(0, rawsize);\n      if (raw.length != rawsize) {\n        throw new Error(\n          `Not enougth raw bytes for code=${code} and index=${index} ,expected ${rawsize} got ${raw.length}.`\n        );\n      }\n      this._code = code;\n      this._index = index;\n      this._ondex = ondex;\n      this._raw = raw;\n    } else if (qb64b != void 0) {\n      const qb642 = d(qb64b);\n      this._exfil(qb642);\n    } else if (qb64 != void 0) {\n      this._exfil(qb64);\n    } else if (qb2 != void 0) {\n      this._bexfil(qb2);\n    } else {\n      throw new EmptyMaterialError(\n        `Improper initialization need either (raw and code and index) or qb64b or qb64 or qb2.`\n      );\n    }\n  }\n  _bexfil(qb2) {\n    throw new Error(`qb2 not yet supported: ${qb2}`);\n  }\n  static _rawSize(code) {\n    const xizage = _Indexer.Sizes.get(code);\n    return Math.floor(xizage.fs - (xizage.hs + xizage.ss) * 3 / 4);\n  }\n  get code() {\n    return this._code;\n  }\n  get raw() {\n    return this._raw;\n  }\n  get index() {\n    return this._index;\n  }\n  get ondex() {\n    return this._ondex;\n  }\n  get qb64() {\n    return this._infil();\n  }\n  get qb64b() {\n    return b(this.qb64);\n  }\n  _infil() {\n    const code = this.code;\n    const index = this.index;\n    const ondex = this.ondex;\n    const raw = this.raw;\n    const ps = (3 - raw.length % 3) % 3;\n    const xizage = _Indexer.Sizes.get(code);\n    const cs = xizage.hs + xizage.ss;\n    const ms = xizage.ss - xizage.os;\n    if (index < 0 || index > 64 ** ms - 1) {\n      throw new Error(`Invalid index=${index} for code=${code}.`);\n    }\n    if (ondex != void 0 && xizage.os != 0 && !(ondex >= 0 && ondex <= 64 ** xizage.os - 1)) {\n      throw new Error(\n        `Invalid ondex=${ondex} for os=${xizage.os} and code=${code}.`\n      );\n    }\n    const both = `${code}${intToB64(index, ms)}${intToB64(\n      ondex == void 0 ? 0 : ondex,\n      xizage.os\n    )}`;\n    if (both.length != cs) {\n      throw new Error(\n        `Mismatch code size = ${cs} with table = ${both.length}.`\n      );\n    }\n    if (cs % 4 != ps - xizage.ls) {\n      throw new Error(\n        `Invalid code=${both} for converted raw pad size=${ps}.`\n      );\n    }\n    const bytes = new Uint8Array(ps + raw.length);\n    for (let i = 0; i < ps; i++) {\n      bytes[i] = 0;\n    }\n    for (let i = 0; i < raw.length; i++) {\n      const odx = i + ps;\n      bytes[odx] = raw[i];\n    }\n    const full = both + encodeBase64Url(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(bytes)).slice(ps - xizage.ls);\n    if (full.length != xizage.fs) {\n      throw new Error(`Invalid code=${both} for raw size=${raw.length}.`);\n    }\n    return full;\n  }\n  _exfil(qb64) {\n    if (qb64.length == 0) {\n      throw new Error(\"Empty Material\");\n    }\n    const first = qb64[0];\n    if (!Array.from(_Indexer.Hards.keys()).includes(first)) {\n      throw new Error(`Unexpected code ${first}`);\n    }\n    const hs = _Indexer.Hards.get(first);\n    if (qb64.length < hs) {\n      throw new Error(`Need ${hs - qb64.length} more characters.`);\n    }\n    const hard = qb64.slice(0, hs);\n    if (!Array.from(_Indexer.Sizes.keys()).includes(hard)) {\n      throw new Error(`Unsupported code ${hard}`);\n    }\n    const xizage = _Indexer.Sizes.get(hard);\n    const cs = xizage.hs + xizage.ss;\n    const ms = xizage.ss - xizage.os;\n    if (qb64.length < cs) {\n      throw new Error(`Need ${cs - qb64.length} more characters.`);\n    }\n    const sindex = qb64.slice(hs, hs + ms);\n    const index = b64ToInt(sindex);\n    const sondex = qb64.slice(hs + ms, hs + ms + xizage.os);\n    let ondex;\n    if (IdxCrtSigDex.has(hard)) {\n      ondex = xizage.os != 0 ? b64ToInt(sondex) : void 0;\n      if (ondex != 0 && ondex != void 0) {\n        throw new Error(`Invalid ondex=${ondex} for code=${hard}.`);\n      } else {\n        ondex = void 0;\n      }\n    } else {\n      ondex = xizage.os != 0 ? b64ToInt(sondex) : index;\n    }\n    if (xizage.fs == void 0) {\n      throw new Error(\"variable length not supported\");\n    }\n    if (qb64.length < xizage.fs) {\n      throw new Error(`Need ${xizage.fs - qb64.length} more chars.`);\n    }\n    qb64 = qb64.slice(0, xizage.fs);\n    const ps = cs % 4;\n    const pbs = 2 * ps != 0 ? ps : xizage.ls;\n    let raw;\n    if (ps != 0) {\n      const base = new Array(ps + 1).join(\"A\") + qb64.slice(cs);\n      const paw = decodeBase64Url(base);\n      const pi = readInt(paw.slice(0, ps));\n      if (pi & 2 ** pbs - 1) {\n        throw new Error(\n          `Non zeroed prepad bits = {pi & (2 ** pbs - 1 ):<06b} in {qb64b[cs:cs+1]}.`\n        );\n      }\n      raw = paw.slice(ps);\n    } else {\n      const base = qb64.slice(cs);\n      const paw = decodeBase64Url(base);\n      const li = readInt(paw.slice(0, xizage.ls));\n      if (li != 0) {\n        if (li == 1) {\n          throw new Error(`Non zeroed lead byte = 0x{li:02x}.`);\n        } else {\n          throw new Error(`Non zeroed lead bytes = 0x{li:04x}`);\n        }\n      }\n      raw = paw.slice(xizage.ls);\n    }\n    if (raw.length != Math.floor((qb64.length - cs) * 3 / 4)) {\n      throw new Error(`Improperly qualified material = ${qb64}`);\n    }\n    this._code = hard;\n    this._index = index;\n    this._ondex = ondex;\n    this._raw = new Uint8Array(raw);\n  }\n};\n\n// src/keri/core/siger.ts\nvar Siger = class extends Indexer {\n  _verfer;\n  constructor({ raw, code, index, ondex, qb64, qb64b, qb2 }, verfer) {\n    super({ raw, code, index, ondex, qb64, qb64b, qb2 });\n    if (!IdxSigDex.has(this.code)) {\n      throw new Error(`Invalid code = ${this.code} for Siger.`);\n    }\n    this._verfer = verfer;\n  }\n  get verfer() {\n    return this._verfer;\n  }\n  set verfer(verfer) {\n    this._verfer = verfer;\n  }\n};\n\n// src/keri/core/signer.ts\n\nvar Signer = class extends Matter {\n  _sign;\n  _verfer;\n  constructor({\n    raw,\n    code = MtrDex.Ed25519_Seed,\n    qb64,\n    qb64b,\n    qb2,\n    transferable = true\n  }) {\n    try {\n      super({ raw, code, qb64, qb64b, qb2 });\n    } catch (e) {\n      if (e instanceof EmptyMaterialError) {\n        if (code == MtrDex.Ed25519_Seed) {\n          const raw2 = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.randombytes_buf(\n            libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_SEEDBYTES\n          );\n          super({ raw: raw2, code, qb64, qb64b, qb2 });\n        } else {\n          throw new Error(`Unsupported signer code = ${code}.`);\n        }\n      } else {\n        throw e;\n      }\n    }\n    let verfer;\n    if (this.code == MtrDex.Ed25519_Seed) {\n      this._sign = this._ed25519;\n      const keypair = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_seed_keypair(this.raw);\n      verfer = new Verfer({\n        raw: keypair.publicKey,\n        code: transferable ? MtrDex.Ed25519 : MtrDex.Ed25519N\n      });\n    } else {\n      throw new Error(`Unsupported signer code = ${this.code}.`);\n    }\n    this._verfer = verfer;\n  }\n  /**\n   * @description Property verfer:\n   Returns Verfer instance\n   Assumes ._verfer is correctly assigned\n   */\n  get verfer() {\n    return this._verfer;\n  }\n  sign(ser, index = null, only = false, ondex = void 0) {\n    return this._sign(ser, this.raw, this.verfer, index, only, ondex);\n  }\n  _ed25519(ser, seed, verfer, index, only = false, ondex) {\n    const sig = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_detached(\n      ser,\n      buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.concat([seed, verfer.raw])\n    );\n    if (index == null) {\n      return new Cigar({ raw: sig, code: MtrDex.Ed25519_Sig }, verfer);\n    } else {\n      let code;\n      if (only) {\n        ondex = void 0;\n        if (index <= 63) {\n          code = IdrDex.Ed25519_Crt_Sig;\n        } else {\n          code = IdrDex.Ed25519_Big_Crt_Sig;\n        }\n      } else {\n        if (ondex == void 0) {\n          ondex = index;\n        }\n        if (ondex == index && index <= 63)\n          code = IdrDex.Ed25519_Sig;\n        else\n          code = IdrDex.Ed25519_Big_Sig;\n      }\n      return new Siger(\n        { raw: sig, code, index, ondex },\n        verfer\n      );\n    }\n  }\n};\n\n// src/keri/core/decrypter.ts\n\n\n// src/keri/core/salter.ts\n\nvar Tier = /* @__PURE__ */ ((Tier3) => {\n  Tier3[\"low\"] = \"low\";\n  Tier3[\"med\"] = \"med\";\n  Tier3[\"high\"] = \"high\";\n  return Tier3;\n})(Tier || {});\nvar Salter = class extends Matter {\n  _tier;\n  constructor({\n    raw,\n    code = MtrDex.Salt_128,\n    tier = \"low\" /* low */,\n    qb64,\n    qb64b,\n    qb2\n  }) {\n    try {\n      super({ raw, code, qb64, qb64b, qb2 });\n    } catch (e) {\n      if (e instanceof EmptyMaterialError) {\n        if (code == MtrDex.Salt_128) {\n          const salt = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.randombytes_buf(\n            libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_pwhash_SALTBYTES\n          );\n          super({ raw: salt, code });\n        } else {\n          throw new Error(\n            \"invalid code for Salter, only Salt_128 accepted\"\n          );\n        }\n      } else {\n        throw e;\n      }\n    }\n    if (this.code != MtrDex.Salt_128) {\n      throw new Error(\"invalid code for Salter, only Salt_128 accepted\");\n    }\n    this._tier = tier !== null ? tier : \"low\" /* low */;\n  }\n  stretch(size = 32, path = \"\", tier = null, temp = false) {\n    tier = tier == null ? this.tier : tier;\n    let opslimit, memlimit;\n    if (temp) {\n      opslimit = 1;\n      memlimit = 8192;\n    } else {\n      switch (tier) {\n        case \"low\" /* low */:\n          opslimit = 2;\n          memlimit = 67108864;\n          break;\n        case \"med\" /* med */:\n          opslimit = 3;\n          memlimit = 268435456;\n          break;\n        case \"high\" /* high */:\n          opslimit = 4;\n          memlimit = 1073741824;\n          break;\n        default:\n          throw new Error(`Unsupported security tier = ${tier}.`);\n      }\n    }\n    return libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_pwhash(\n      size,\n      path,\n      this.raw,\n      opslimit,\n      memlimit,\n      libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_pwhash_ALG_ARGON2ID13\n    );\n  }\n  signer(code = MtrDex.Ed25519_Seed, transferable = true, path = \"\", tier = null, temp = false) {\n    const seed = this.stretch(Matter._rawSize(code), path, tier, temp);\n    return new Signer({\n      raw: seed,\n      code,\n      transferable\n    });\n  }\n  get tier() {\n    return this._tier;\n  }\n};\n\n// src/keri/core/decrypter.ts\nvar Decrypter = class extends Matter {\n  _decrypt;\n  constructor({ raw, code = MtrDex.X25519_Private, qb64, qb64b, qb2 }, seed = void 0) {\n    try {\n      super({ raw, code, qb64, qb64b, qb2 });\n    } catch (e) {\n      if (e instanceof EmptyMaterialError) {\n        if (seed != void 0) {\n          const signer = new Signer({ qb64b: seed });\n          if (signer.code != MtrDex.Ed25519_Seed) {\n            throw new Error(\n              `Unsupported signing seed derivation code ${signer.code}`\n            );\n          }\n          const sigkey = new Uint8Array(\n            signer.raw.length + signer.verfer.raw.length\n          );\n          sigkey.set(signer.raw);\n          sigkey.set(signer.verfer.raw, signer.raw.length);\n          raw = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_ed25519_sk_to_curve25519(sigkey);\n          super({ raw, code, qb64, qb64b, qb2 });\n        } else {\n          throw e;\n        }\n      } else {\n        throw e;\n      }\n    }\n    if (this.code == MtrDex.X25519_Private) {\n      this._decrypt = this._x25519;\n    } else {\n      throw new Error(`Unsupported decrypter code = ${this.code}.`);\n    }\n  }\n  decrypt(ser = null, cipher = null, transferable = false) {\n    if (ser == null && cipher == null) {\n      throw new EmptyMaterialError(\"Neither ser or cipher were provided\");\n    }\n    if (ser != null) {\n      cipher = new Cipher({ qb64b: ser });\n    }\n    return this._decrypt(cipher, this.raw, transferable);\n  }\n  _x25519(cipher, prikey, transferable = false) {\n    const pubkey = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_scalarmult_base(prikey);\n    const plain = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_box_seal_open(\n      cipher.raw,\n      pubkey,\n      prikey\n    );\n    if (cipher.code == MtrDex.X25519_Cipher_Salt) {\n      return new Salter({ qb64b: plain });\n    } else if (cipher.code == MtrDex.X25519_Cipher_Seed) {\n      return new Signer({ qb64b: plain, transferable });\n    } else {\n      throw new Error(`Unsupported cipher text code == ${cipher.code}`);\n    }\n  }\n};\n\n// src/keri/core/cipher.ts\nvar Cipher = class extends Matter {\n  constructor({ raw, code, qb64, qb64b, qb2 }) {\n    if (raw != void 0 && code == void 0) {\n      if (raw.length == Matter._rawSize(MtrDex.X25519_Cipher_Salt)) {\n        code = MtrDex.X25519_Cipher_Salt;\n      } else if (raw.length == Matter._rawSize(MtrDex.X25519_Cipher_Seed)) {\n        code = MtrDex.X25519_Cipher_Salt;\n      }\n    }\n    super({ raw, code, qb64b, qb64, qb2 });\n    if (!Array.from([\n      MtrDex.X25519_Cipher_Salt,\n      MtrDex.X25519_Cipher_Seed\n    ]).includes(this.code)) {\n      throw new Error(`Unsupported Cipher code == ${this.code}`);\n    }\n  }\n  decrypt(prikey = void 0, seed = void 0) {\n    const decrypter = new Decrypter({ qb64b: prikey }, seed);\n    return decrypter.decrypt(this.qb64b);\n  }\n};\n\n// src/keri/core/counter.ts\nvar CounterCodex = class extends Codex {\n  ControllerIdxSigs = \"-A\";\n  // Qualified Base64 Indexed Signature.\n  WitnessIdxSigs = \"-B\";\n  // Qualified Base64 Indexed Signature.\n  NonTransReceiptCouples = \"-C\";\n  // Composed Base64 Couple, pre+cig.\n  TransReceiptQuadruples = \"-D\";\n  // Composed Base64 Quadruple, pre+snu+dig+sig.\n  FirstSeenReplayCouples = \"-E\";\n  // Composed Base64 Couple, fnu+dts.\n  TransIdxSigGroups = \"-F\";\n  // Composed Base64 Group, pre+snu+dig+ControllerIdxSigs group.\n  SealSourceCouples = \"-G\";\n  // Composed Base64 couple, snu+dig of given delegators or issuers event\n  TransLastIdxSigGroups = \"-H\";\n  // Composed Base64 Group, pre+ControllerIdxSigs group.\n  SealSourceTriples = \"-I\";\n  // Composed Base64 triple, pre+snu+dig of anchoring source event\n  SadPathSig = \"-J\";\n  // Composed Base64 Group path+TransIdxSigGroup of SAID of content\n  SadPathSigGroup = \"-K\";\n  // Composed Base64 Group, root(path)+SaidPathCouples\n  PathedMaterialQuadlets = \"-L\";\n  // Composed Grouped Pathed Material Quadlet (4 char each)\n  AttachedMaterialQuadlets = \"-V\";\n  // Composed Grouped Attached Material Quadlet (4 char each)\n  BigAttachedMaterialQuadlets = \"-0V\";\n  // Composed Grouped Attached Material Quadlet (4 char each)\n  KERIProtocolStack = \"--AAA\";\n  // KERI ACDC Protocol Stack CESR Version\n};\nvar CtrDex = new CounterCodex();\nvar Counter = class _Counter {\n  static Sizes = new Map(\n    Object.entries({\n      \"-A\": new Sizage(2, 2, 4, 0),\n      \"-B\": new Sizage(2, 2, 4, 0),\n      \"-C\": new Sizage(2, 2, 4, 0),\n      \"-D\": new Sizage(2, 2, 4, 0),\n      \"-E\": new Sizage(2, 2, 4, 0),\n      \"-F\": new Sizage(2, 2, 4, 0),\n      \"-G\": new Sizage(2, 2, 4, 0),\n      \"-H\": new Sizage(2, 2, 4, 0),\n      \"-I\": new Sizage(2, 2, 4, 0),\n      \"-J\": new Sizage(2, 2, 4, 0),\n      \"-K\": new Sizage(2, 2, 4, 0),\n      \"-L\": new Sizage(2, 2, 4, 0),\n      \"-V\": new Sizage(2, 2, 4, 0),\n      \"-0V\": new Sizage(3, 5, 8, 0),\n      \"--AAA\": new Sizage(5, 3, 8, 0)\n    })\n  );\n  static Hards = /* @__PURE__ */ new Map([\n    [\"-A\", 2],\n    [\"-B\", 2],\n    [\"-C\", 2],\n    [\"-D\", 2],\n    [\"-E\", 2],\n    [\"-F\", 2],\n    [\"-G\", 2],\n    [\"-H\", 2],\n    [\"-I\", 2],\n    [\"-J\", 2],\n    [\"-K\", 2],\n    [\"-L\", 2],\n    [\"-M\", 2],\n    [\"-N\", 2],\n    [\"-O\", 2],\n    [\"-P\", 2],\n    [\"-Q\", 2],\n    [\"-R\", 2],\n    [\"-S\", 2],\n    [\"-T\", 2],\n    [\"-U\", 2],\n    [\"-V\", 2],\n    [\"-W\", 2],\n    [\"-X\", 2],\n    [\"-Y\", 2],\n    [\"-Z\", 2],\n    [\"-a\", 2],\n    [\"-b\", 2],\n    [\"-c\", 2],\n    [\"-d\", 2],\n    [\"-e\", 2],\n    [\"-f\", 2],\n    [\"-g\", 2],\n    [\"-h\", 2],\n    [\"-i\", 2],\n    [\"-j\", 2],\n    [\"-k\", 2],\n    [\"-l\", 2],\n    [\"-m\", 2],\n    [\"-n\", 2],\n    [\"-o\", 2],\n    [\"-p\", 2],\n    [\"-q\", 2],\n    [\"-r\", 2],\n    [\"-s\", 2],\n    [\"-t\", 2],\n    [\"-u\", 2],\n    [\"-v\", 2],\n    [\"-w\", 2],\n    [\"-x\", 2],\n    [\"-y\", 2],\n    [\"-z\", 2],\n    [\"-0\", 3],\n    [\"--\", 5]\n  ]);\n  _code = \"\";\n  _count = -1;\n  constructor({ code, count, countB64, qb64b, qb64, qb2 }) {\n    if (code != void 0) {\n      if (!_Counter.Sizes.has(code)) {\n        throw new Error(`\"Unsupported code=${code}.`);\n      }\n      const sizage = _Counter.Sizes.get(code);\n      const cs = sizage.hs + sizage.ss;\n      if (sizage.fs != cs || cs % 4 != 0) {\n        throw new Error(\n          `Whole code size not full size or not multiple of 4. cs=${cs} fs=${sizage.fs}.`\n        );\n      }\n      if (count == void 0) {\n        count = countB64 == void 0 ? 1 : b64ToInt(countB64);\n      }\n      if (count < 0 || count > 64 ** sizage.ss - 1) {\n        throw new Error(`Invalid count=${count} for code=${code}.`);\n      }\n      this._code = code;\n      this._count = count;\n    } else if (qb64b != void 0) {\n      const qb642 = d(qb64b);\n      this._exfil(qb642);\n    } else if (qb64 != void 0) {\n      this._exfil(qb64);\n    } else if (qb2 != void 0) {\n    } else {\n      throw new Error(\n        `Improper initialization need either (code and count) or qb64b or qb64 or qb2.`\n      );\n    }\n  }\n  get code() {\n    return this._code;\n  }\n  get count() {\n    return this._count;\n  }\n  get qb64() {\n    return this._infil();\n  }\n  get qb64b() {\n    return b(this.qb64);\n  }\n  countToB64(l) {\n    if (l == void 0) {\n      const sizage = _Counter.Sizes.get(this.code);\n      l = sizage.ss;\n    }\n    return intToB64(this.count, l);\n  }\n  static semVerToB64(version = \"\", major = 0, minor = 0, patch = 0) {\n    let parts = [major, minor, patch];\n    if (version != \"\") {\n      const ssplits = version.split(\".\");\n      const splits = ssplits.map((x2) => {\n        if (x2 == \"\")\n          return 0;\n        return parseInt(x2);\n      });\n      const off = splits.length;\n      const x = 3 - off;\n      for (let i = 0; i < x; i++) {\n        splits.push(parts[i + off]);\n      }\n      parts = splits;\n    }\n    parts.forEach((p) => {\n      if (p < 0 || p > 63) {\n        throw new Error(\n          `Out of bounds semantic version. Part=${p} is < 0 or > 63.`\n        );\n      }\n    });\n    return parts.map((p) => {\n      return intToB64(p, 1);\n    }).join(\"\");\n  }\n  _infil() {\n    const code = this.code;\n    const count = this.count;\n    const sizage = _Counter.Sizes.get(code);\n    const cs = sizage.hs + sizage.ss;\n    if (sizage.fs != cs || cs % 4 != 0) {\n      throw new Error(\n        `Whole code size not full size or not multiple of 4. cs=${cs} fs=${sizage.fs}.`\n      );\n    }\n    if (count < 0 || count > 64 ** sizage.ss - 1) {\n      throw new Error(`Invalid count=${count} for code=${code}.`);\n    }\n    const both = `${code}${intToB64(count, sizage.ss)}`;\n    if (both.length % 4) {\n      throw new Error(\n        `Invalid size = ${both.length} of ${both} not a multiple of 4.`\n      );\n    }\n    return both;\n  }\n  _exfil(qb64) {\n    if (qb64.length == 0) {\n      throw new Error(\"Empty Material\");\n    }\n    const first = qb64.slice(0, 2);\n    if (!_Counter.Hards.has(first)) {\n      throw new Error(`Unexpected code ${first}`);\n    }\n    const hs = _Counter.Hards.get(first);\n    if (qb64.length < hs) {\n      throw new Error(`Need ${hs - qb64.length} more characters.`);\n    }\n    const hard = qb64.slice(0, hs);\n    if (!_Counter.Sizes.has(hard)) {\n      throw new Error(`Unsupported code ${hard}`);\n    }\n    const sizage = _Counter.Sizes.get(hard);\n    const cs = sizage.hs + sizage.ss;\n    if (qb64.length < cs) {\n      throw new Error(`Need ${cs - qb64.length} more chars.`);\n    }\n    const scount = qb64.slice(sizage.hs, sizage.hs + sizage.ss);\n    const count = b64ToInt(scount);\n    this._code = hard;\n    this._count = count;\n  }\n};\n\n// src/keri/core/seqner.ts\nvar Seqner = class extends Matter {\n  constructor({\n    raw,\n    code = MtrDex.Salt_128,\n    qb64,\n    qb64b,\n    qb2,\n    sn,\n    snh,\n    ...kwa\n  }) {\n    if (!raw && !qb64b && !qb64 && !qb2) {\n      if (sn === void 0) {\n        if (snh === void 0) {\n          sn = 0;\n        } else {\n          sn = parseInt(snh, 16);\n        }\n      }\n      raw = intToBytes(sn, Matter._rawSize(MtrDex.Salt_128));\n    }\n    super({ raw, code, qb64, qb64b, qb2, ...kwa });\n    if (this.code !== MtrDex.Salt_128) {\n      throw new Error(`Invalid code = ${this.code} for Seqner.`);\n    }\n  }\n  get sn() {\n    return bytesToInt(this.raw);\n  }\n  get snh() {\n    return this.sn.toString(16);\n  }\n};\n\n// src/keri/core/diger.ts\n\n\nvar Diger = class _Diger extends Matter {\n  _verify;\n  // This constructor will assign digest verification function to ._verify\n  constructor({ raw, code = MtrDex.Blake3_256, qb64, qb64b, qb2 }, ser = null) {\n    try {\n      super({ raw, code, qb64, qb64b, qb2 });\n    } catch (error) {\n      if (ser == null) {\n        throw error;\n      }\n      if (code === MtrDex.Blake3_256) {\n        const dig = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(\n          _noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__.blake3.create({ dkLen: 32 }).update(ser).digest()\n        );\n        super({ raw: dig, code });\n      } else {\n        throw new Error(`Unsupported code = ${code} for digester.`);\n      }\n    }\n    if (code === MtrDex.Blake3_256) {\n      this._verify = this.blake3_256;\n    } else {\n      throw new Error(`Unsupported code = ${code} for digester.`);\n    }\n  }\n  /**\n   *\n   * @param {Uint8Array} ser  serialization bytes\n   * @description  This method will return true if digest of bytes serialization ser matches .raw\n   * using .raw as reference digest for ._verify digest algorithm determined\n   by .code\n   */\n  verify(ser) {\n    return this._verify(ser, this.raw);\n  }\n  compare(ser, dig = null, diger = null) {\n    if (dig != null) {\n      if (dig.toString() == this.qb64) {\n        return true;\n      }\n      diger = new _Diger({ qb64b: dig });\n    } else if (diger != null) {\n      if (diger.qb64b == this.qb64b) {\n        return true;\n      }\n    } else {\n      throw new Error(\"Both dig and diger may not be None.\");\n    }\n    if (diger.code == this.code) {\n      return false;\n    }\n    return diger.verify(ser) && this.verify(ser);\n  }\n  blake3_256(ser, dig) {\n    const digest = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(\n      _noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__.blake3.create({ dkLen: 32 }).update(ser).digest()\n    );\n    return digest.toString() === dig.toString();\n  }\n};\n\n// src/keri/core/number.ts\nvar CesrNumber = class extends Matter {\n  constructor({ raw, code, qb64b, qb64, qb2 }, num, numh) {\n    let _num;\n    if (raw == void 0 && qb64 == void 0 && qb64b == void 0 && qb2 == void 0) {\n      if (typeof num == \"number\") {\n        _num = num;\n      } else if (numh != void 0) {\n        _num = parseInt(numh, 16);\n      } else {\n        _num = 0;\n      }\n    }\n    if (_num == void 0) {\n      throw new Error(\"Invalid whole number\");\n    }\n    if (_num <= 256 ** 2 - 1) {\n      code = NumDex.Short;\n    } else if (_num <= 256 ** 4 - 1) {\n      code = code = NumDex.Long;\n    } else if (_num <= 256 ** 8 - 1) {\n      code = code = NumDex.Big;\n    } else if (_num <= 256 ** 16 - 1) {\n      code = code = NumDex.Huge;\n    } else {\n      throw new Error(`Invalid num = ${num}, too large to encode.`);\n    }\n    raw = intToBytes(_num, Matter._rawSize(code));\n    super({ raw, code, qb64b, qb64, qb2 });\n    if (!NumDex.has(this.code)) {\n      throw new Error(\"Invalid code \" + code + \" for Number\");\n    }\n  }\n  get num() {\n    return bytesToInt(this.raw);\n  }\n  get numh() {\n    return this.num.toString(16);\n  }\n  get positive() {\n    return this.num > 0;\n  }\n};\n\n// src/keri/core/serder.ts\nvar Serder = class {\n  _kind;\n  _raw = \"\";\n  _ked = {};\n  _ident = \"KERI\" /* KERI */;\n  _size = 0;\n  _version = Versionage;\n  _code;\n  constructor(ked, kind = \"JSON\" /* JSON */, code = MtrDex.Blake3_256) {\n    this._code = code;\n    this._kind = kind;\n    this.ked = ked;\n  }\n  set ked(ked) {\n    const [raw, ident, kind, kd, version] = this._exhale(ked, this._kind);\n    const size = raw.length;\n    this._raw = raw;\n    this._ident = ident;\n    this._ked = kd;\n    this._kind = kind;\n    this._size = size;\n    this._version = version;\n  }\n  get pre() {\n    return this._ked[\"i\"];\n  }\n  get ked() {\n    return this._ked;\n  }\n  get code() {\n    return this._code;\n  }\n  get raw() {\n    return this._raw;\n  }\n  get sner() {\n    return new CesrNumber({}, this.ked[\"s\"]);\n  }\n  get sn() {\n    return this.sner.num;\n  }\n  get kind() {\n    return this._kind;\n  }\n  _exhale(ked, kind) {\n    return sizeify(ked, kind);\n  }\n  get ident() {\n    return this._ident;\n  }\n  get size() {\n    return this._size;\n  }\n  get version() {\n    return this._version;\n  }\n  get verfers() {\n    let keys = [];\n    if (\"k\" in this._ked) {\n      keys = this._ked[\"k\"];\n    } else {\n      keys = [];\n    }\n    const verfers = [];\n    for (const key of keys) {\n      verfers.push(new Verfer({ qb64: key }));\n    }\n    return verfers;\n  }\n  get digers() {\n    let keys = [];\n    if (\"n\" in this._ked) {\n      keys = this._ked[\"n\"];\n    } else {\n      keys = [];\n    }\n    const digers = [];\n    for (const key of keys) {\n      digers.push(new Diger({ qb64: key }));\n    }\n    return digers;\n  }\n  pretty() {\n    return JSON.stringify(this._ked, void 0, 2);\n  }\n};\nfunction dumps(ked, kind) {\n  if (kind == \"JSON\" /* JSON */) {\n    return JSON.stringify(ked);\n  } else {\n    throw new Error(\"unsupported event encoding\");\n  }\n}\nfunction sizeify(ked, kind) {\n  if (!(\"v\" in ked)) {\n    throw new Error(\"Missing or empty version string\");\n  }\n  const [ident, knd, version] = deversify(ked[\"v\"]);\n  if (version != Versionage) {\n    throw new Error(`unsupported version ${version.toString()}`);\n  }\n  if (kind == void 0) {\n    kind = knd;\n  }\n  let raw = dumps(ked, kind);\n  const size = new TextEncoder().encode(raw).length;\n  ked[\"v\"] = versify(ident, version, kind, size);\n  raw = dumps(ked, kind);\n  return [raw, ident, kind, ked, version];\n}\n\n// src/keri/core/prefixer.ts\n\n\nvar Dummy = \"#\";\nvar Prefixer = class _Prefixer extends Matter {\n  _derive;\n  _verify;\n  constructor({ raw, code, qb64b, qb64, qb2 }, ked) {\n    try {\n      super({ raw, code, qb64b, qb64, qb2 });\n    } catch (e) {\n      if (e instanceof EmptyMaterialError) {\n        if (ked == void 0 || code == void 0 && !(\"i\" in ked)) {\n          throw e;\n        }\n        if (code == void 0) {\n          super({ qb64: ked[\"i\"], code });\n          code = this.code;\n        }\n        let _derive;\n        if (code == MtrDex.Ed25519N) {\n          _derive = _Prefixer._derive_ed25519N;\n        } else if (code == MtrDex.Ed25519) {\n          _derive = _Prefixer._derive_ed25519;\n        } else if (code == MtrDex.Blake3_256) {\n          _derive = _Prefixer._derive_blake3_256;\n        } else {\n          throw new Error(`Unsupported code = ${code} for prefixer.`);\n        }\n        [raw, code] = _derive(ked);\n        super({ raw, code });\n        this._derive = _derive;\n      } else {\n        throw e;\n      }\n    }\n    if (this.code == MtrDex.Ed25519N) {\n      this._verify = this._verify_ed25519N;\n    } else if (this.code == MtrDex.Ed25519) {\n      this._verify = this._verify_ed25519;\n    } else if (this.code == MtrDex.Blake3_256) {\n      this._verify = this._verify_blake3_256;\n    } else {\n      throw new Error(`Unsupported code = ${code} for prefixer.`);\n    }\n  }\n  derive(ked) {\n    if (ked[\"i\"] != Ilks.icp) {\n      throw new Error(\n        `Non-incepting ilk ${ked[\"i\"]} for prefix derivation`\n      );\n    }\n    return this._derive(ked);\n  }\n  verify(ked, prefixed = false) {\n    if (ked[\"i\"] != Ilks.icp) {\n      throw new Error(\n        `Non-incepting ilk ${ked[\"i\"]} for prefix derivation`\n      );\n    }\n    return this._verify(ked, this.qb64, prefixed);\n  }\n  static _derive_ed25519N(ked) {\n    let verfer;\n    const keys = ked[\"k\"];\n    if (keys.length != 1) {\n      throw new Error(\n        `Basic derivation needs at most 1 key got ${keys.length} keys instead`\n      );\n    }\n    try {\n      verfer = new Verfer({ qb64: keys[0] });\n    } catch (e) {\n      throw new Error(`Error extracting public key = ${e}`);\n    }\n    if (verfer.code != MtrDex.Ed25519N) {\n      throw new Error(`Mismatch derivation code = ${verfer.code}`);\n    }\n    const next = \"n\" in ked ? ked[\"n\"] : [];\n    if (verfer.code == MtrDex.Ed25519N && next.length > 0) {\n      throw new Error(\n        `Non-empty nxt = ${next} for non-transferable code = ${verfer.code}`\n      );\n    }\n    const backers = \"b\" in ked ? ked[\"b\"] : [];\n    if (verfer.code == MtrDex.Ed25519N && backers.length > 0) {\n      throw new Error(\n        `Non-empty b =${backers} for non-transferable code = ${verfer.code}`\n      );\n    }\n    const anchor = \"a\" in ked ? ked[\"a\"] : [];\n    if (verfer.code == MtrDex.Ed25519N && anchor.length > 0) {\n      throw new Error(\n        `Non-empty a = ${verfer.code} for non-transferable code = ${verfer.code}`\n      );\n    }\n    return [verfer.raw, verfer.code];\n  }\n  static _derive_ed25519(ked) {\n    let verfer;\n    const keys = ked[\"k\"];\n    if (keys.length != 1) {\n      throw new Error(\n        `Basic derivation needs at most 1 key got ${keys.length} keys instead`\n      );\n    }\n    try {\n      verfer = new Verfer({ qb64: keys[0] });\n    } catch (e) {\n      throw new Error(`Error extracting public key = ${e}`);\n    }\n    if (verfer.code in [MtrDex.Ed25519]) {\n      throw new Error(`Mismatch derivation code = ${verfer.code}`);\n    }\n    return [verfer.raw, verfer.code];\n  }\n  static _derive_blake3_256(ked) {\n    const kd = ked;\n    const ilk = ked[\"t\"];\n    if (![Ilks.icp, Ilks.dip, Ilks.vcp, Ilks.dip].includes(ilk)) {\n      throw new Error(`Invalid ilk = ${ilk} to derive pre.`);\n    }\n    kd[\"i\"] = \"\".padStart(Matter.Sizes.get(MtrDex.Blake3_256).fs, Dummy);\n    kd[\"d\"] = ked[\"i\"];\n    const [raw] = sizeify(ked);\n    const dig = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(\n      _noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__.blake3.create({ dkLen: 32 }).update(raw).digest()\n    );\n    return [dig, MtrDex.Blake3_256];\n  }\n  _verify_ed25519N(ked, pre, prefixed = false) {\n    try {\n      const keys = ked[\"k\"];\n      if (keys.length != 1) {\n        return false;\n      }\n      if (keys[0] != pre) {\n        return false;\n      }\n      if (prefixed && ked[\"i\"] != pre) {\n        return false;\n      }\n      const next = \"n\" in ked ? ked[\"n\"] : [];\n      if (next.length > 0) {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  _verify_ed25519(ked, pre, prefixed = false) {\n    try {\n      const keys = ked[\"k\"];\n      if (keys.length != 1) {\n        return false;\n      }\n      if (keys[0] != pre) {\n        return false;\n      }\n      if (prefixed && ked[\"i\"] != pre) {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  _verify_blake3_256(ked, pre, prefixed = false) {\n    try {\n      const [raw] = _Prefixer._derive_blake3_256(ked);\n      const crymat = new Matter({ raw, code: MtrDex.Blake3_256 });\n      if (crymat.qb64 != pre) {\n        return false;\n      }\n      if (prefixed && ked[\"i\"] != pre) {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n};\n\n// src/keri/core/saider.ts\n\n\nvar Dummy2 = \"#\";\nvar Ids = /* @__PURE__ */ ((Ids2) => {\n  Ids2[\"d\"] = \"d\";\n  return Ids2;\n})(Ids || {});\nvar Digestage = class {\n  klas = void 0;\n  size = 0;\n  length = 0;\n  constructor(klas, size, length) {\n    this.klas = klas;\n    this.size = size;\n    this.length = length;\n  }\n};\nvar Saider = class _Saider extends Matter {\n  static Digests = /* @__PURE__ */ new Map([\n    [\n      MtrDex.Blake3_256,\n      new Digestage(_Saider._derive_blake3_256, void 0, void 0)\n    ]\n  ]);\n  constructor({ raw, code, qb64b, qb64, qb2 }, sad, kind, label = \"d\" /* d */) {\n    try {\n      super({ raw, code, qb64b, qb64, qb2 });\n    } catch (e) {\n      if (e instanceof EmptyMaterialError) {\n        if (sad == void 0 || !(label in sad)) {\n          throw e;\n        }\n        if (code == void 0) {\n          if (sad[label] != \"\") {\n            super({ qb64: sad[label], code });\n            code = this.code;\n          } else {\n            code = MtrDex.Blake3_256;\n          }\n        }\n        if (!DigiDex.has(code)) {\n          throw new Error(`Unsupported digest code = ${code}`);\n        }\n        [raw] = _Saider._derive({ ...sad }, code, kind, label);\n        super({ raw, code });\n      } else {\n        throw e;\n      }\n    }\n    if (!this.digestive) {\n      throw new Error(`Unsupported digest code = ${this.code}.`);\n    }\n  }\n  static _derive_blake3_256(ser, _digest_size, _length) {\n    return buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(_noble_hashes_blake3__WEBPACK_IMPORTED_MODULE_3__.blake3.create({ dkLen: 32 }).update(ser).digest());\n  }\n  static _derive(sad, code, kind, label) {\n    if (!DigiDex.has(code) || !_Saider.Digests.has(code)) {\n      throw new Error(`Unsupported digest code = ${code}.`);\n    }\n    sad = { ...sad };\n    sad[label] = \"\".padStart(Matter.Sizes.get(code).fs, Dummy2);\n    if (\"v\" in sad) {\n      [, , kind, sad] = sizeify(sad, kind);\n    }\n    const ser = { ...sad };\n    const digestage = _Saider.Digests.get(code);\n    const cpa = _Saider._serialze(ser, kind);\n    const args = [];\n    if (digestage.size != void 0) {\n      args.push(digestage.size);\n    }\n    if (digestage.length != void 0) {\n      args.push(digestage.length);\n    }\n    return [digestage.klas(cpa, ...args), sad];\n  }\n  derive(sad, code, kind, label) {\n    code = code != void 0 ? code : this.code;\n    return _Saider._derive(sad, code, kind, label);\n  }\n  verify(sad, prefixed = false, versioned = false, kind, label = \"d\" /* d */) {\n    try {\n      const [raw, dsad] = _Saider._derive(sad, this.code, kind, label);\n      const saider = new _Saider({ raw, code: this.code });\n      if (this.qb64 != saider.qb64) {\n        return false;\n      }\n      if (\"v\" in sad && versioned) {\n        if (sad[\"v\"] != dsad[\"v\"]) {\n          return false;\n        }\n      }\n      if (prefixed && sad[label] != this.qb64) {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n    return true;\n  }\n  static _serialze(sad, kind) {\n    let knd = \"JSON\" /* JSON */;\n    if (\"v\" in sad) {\n      [, knd] = deversify(sad[\"v\"]);\n    }\n    if (kind == void 0) {\n      kind = knd;\n    }\n    return dumps(sad, kind);\n  }\n  static saidify(sad, code = MtrDex.Blake3_256, kind = \"JSON\" /* JSON */, label = \"d\" /* d */) {\n    if (!(label in sad)) {\n      throw new Error(`Missing id field labeled=${label} in sad.`);\n    }\n    let raw;\n    [raw, sad] = _Saider._derive(sad, code, kind, label);\n    const saider = new _Saider(\n      { raw, code },\n      void 0,\n      kind,\n      label\n    );\n    sad[label] = saider.qb64;\n    return [saider, sad];\n  }\n};\n\n// src/keri/core/utils.ts\nfunction pad(n, width = 3, z = 0) {\n  return (String(z).repeat(width) + String(n)).slice(String(n).length);\n}\nfunction extractValues(ked, labels) {\n  let values = [];\n  for (const label of labels) {\n    values = extractElementValues(ked[label], values);\n  }\n  return values;\n}\nfunction arrayEquals(ar1, ar2) {\n  return ar1.length === ar2.length && ar1.every((val, index) => val === ar2[index]);\n}\nfunction extractElementValues(element, values) {\n  let data = [];\n  try {\n    if (element instanceof Array && !(typeof element == \"string\")) {\n      for (const k in element)\n        extractElementValues(element[k], values);\n    } else if (typeof element == \"string\") {\n      values.push(element);\n    }\n    data = values;\n  } catch (error) {\n    throw new Error(error);\n  }\n  return data;\n}\nfunction nowUTC() {\n  return /* @__PURE__ */ new Date();\n}\nfunction range(start, stop, step) {\n  if (typeof stop == \"undefined\") {\n    stop = start;\n    start = 0;\n  }\n  if (typeof step == \"undefined\") {\n    step = 1;\n  }\n  if (step > 0 && start >= stop || step < 0 && start <= stop) {\n    return [];\n  }\n  const result = new Array();\n  for (let i = start; step > 0 ? i < stop : i > stop; i += step) {\n    result.push(i);\n  }\n  return result;\n}\nfunction intToBytes(value, length) {\n  const byteArray = new Uint8Array(length);\n  for (let index = byteArray.length - 1; index >= 0; index--) {\n    const byte = value & 255;\n    byteArray[index] = byte;\n    value = (value - byte) / 256;\n  }\n  return byteArray;\n}\nfunction bytesToInt(ar) {\n  let value = 0;\n  for (let i = 0; i < ar.length; i++) {\n    value = value * 256 + ar[i];\n  }\n  return value;\n}\nfunction serializeACDCAttachment(anc) {\n  const prefixer = new Prefixer({ qb64: anc.pre });\n  const seqner = new Seqner({ sn: anc.sn });\n  const saider = new Saider({ qb64: anc.ked[\"d\"] });\n  const craw = new Uint8Array();\n  const ctr = new Counter({ code: CtrDex.SealSourceTriples, count: 1 }).qb64b;\n  const prefix = prefixer.qb64b;\n  const seq = seqner.qb64b;\n  const said = saider.qb64b;\n  const newCraw = new Uint8Array(\n    craw.length + ctr.length + prefix.length + seq.length + said.length\n  );\n  newCraw.set(craw);\n  newCraw.set(ctr, craw.length);\n  newCraw.set(prefix, craw.length + ctr.length);\n  newCraw.set(seq, craw.length + ctr.length + prefix.length);\n  newCraw.set(said, craw.length + ctr.length + prefix.length + seq.length);\n  return newCraw;\n}\nfunction serializeIssExnAttachment(anc) {\n  const seqner = new Seqner({ sn: anc.sn });\n  const ancSaider = new Saider({ qb64: anc.ked[\"d\"] });\n  const coupleArray = new Uint8Array(\n    seqner.qb64b.length + ancSaider.qb64b.length\n  );\n  coupleArray.set(seqner.qb64b);\n  coupleArray.set(ancSaider.qb64b, seqner.qb64b.length);\n  const counter = new Counter({\n    code: CtrDex.SealSourceCouples,\n    count: 1\n  });\n  const counterQb64b = counter.qb64b;\n  const atc = new Uint8Array(counter.qb64b.length + coupleArray.length);\n  atc.set(counterQb64b);\n  atc.set(coupleArray, counterQb64b.length);\n  if (atc.length % 4 !== 0) {\n    throw new Error(\n      `Invalid attachments size: ${atc.length}, non-integral quadlets detected.`\n    );\n  }\n  const pcnt = new Counter({\n    code: CtrDex.AttachedMaterialQuadlets,\n    count: Math.floor(atc.length / 4)\n  });\n  const msg = new Uint8Array(pcnt.qb64b.length + atc.length);\n  msg.set(pcnt.qb64b);\n  msg.set(atc, pcnt.qb64b.length);\n  return msg;\n}\n\n// src/keri/core/encrypter.ts\nvar Encrypter = class extends Matter {\n  _encrypt;\n  constructor({ raw, code = MtrDex.X25519, qb64, qb64b, qb2 }, verkey = null) {\n    if (raw == void 0 && verkey != null) {\n      const verfer = new Verfer({ qb64b: verkey });\n      if (!Array.from([MtrDex.Ed25519N, MtrDex.Ed25519]).includes(\n        verfer.code\n      )) {\n        throw new Error(\n          `Unsupported verkey derivation code = ${verfer.code}.`\n        );\n      }\n      raw = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_ed25519_pk_to_curve25519(verfer.raw);\n    }\n    super({ raw, code, qb64, qb64b, qb2 });\n    if (this.code == MtrDex.X25519) {\n      this._encrypt = this._x25519;\n    } else {\n      throw new Error(`Unsupported encrypter code = ${this.code}.`);\n    }\n  }\n  verifySeed(seed) {\n    const signer = new Signer({ qb64b: seed });\n    const keypair = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_seed_keypair(signer.raw);\n    const pubkey = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_ed25519_pk_to_curve25519(\n      keypair.publicKey\n    );\n    return arrayEquals(pubkey, this.raw);\n  }\n  encrypt(ser = null, matter = null) {\n    if (ser == null && matter == null) {\n      throw new Error(\"Neither ser nor matter are provided.\");\n    }\n    if (ser != null) {\n      matter = new Matter({ qb64b: ser });\n    }\n    let code;\n    if (matter.code == MtrDex.Salt_128) {\n      code = MtrDex.X25519_Cipher_Salt;\n    } else {\n      code = MtrDex.X25519_Cipher_Seed;\n    }\n    return this._encrypt(matter.qb64, this.raw, code);\n  }\n  _x25519(ser, pubkey, code) {\n    const raw = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_box_seal(ser, pubkey);\n    return new Cipher({ raw, code });\n  }\n};\n\n// src/keri/core/manager.ts\nvar Algos = /* @__PURE__ */ ((Algos2) => {\n  Algos2[\"randy\"] = \"randy\";\n  Algos2[\"salty\"] = \"salty\";\n  Algos2[\"group\"] = \"group\";\n  Algos2[\"extern\"] = \"extern\";\n  return Algos2;\n})(Algos || {});\nvar PubLot = class {\n  pubs = new Array();\n  // list qb64 public keys.\n  ridx = 0;\n  //  index of rotation (est event) that uses public key set\n  kidx = 0;\n  //  index of key in sequence of public keys\n  dt = \"\";\n  // datetime ISO8601 when key set created\n};\nvar PreSit = class {\n  old = new PubLot();\n  //previous publot\n  new = new PubLot();\n  //newly current publot\n  nxt = new PubLot();\n  //next public publot\n};\nvar PrePrm = class {\n  pidx = 0;\n  // prefix index for this keypair sequence\n  algo = \"salty\" /* salty */;\n  // salty default uses indices and salt to create new key pairs\n  salt = \"\";\n  // empty salt  used for salty algo.\n  stem = \"\";\n  // default unique path stem for salty algo\n  tier = \"\";\n  // security tier for stretch index salty algo\n};\nvar PubSet = class {\n  pubs = new Array();\n  // list qb64 public keys.\n};\nvar PubPath = class {\n  path = \"\";\n  code = \"\";\n  tier = \"high\" /* high */;\n  temp = false;\n};\nvar Keys = class {\n  _signers;\n  _paths;\n  constructor(signers, paths) {\n    this._signers = signers;\n    if (paths != void 0) {\n      if (signers.length != paths.length) {\n        throw new Error(\n          \"If paths are provided, they must be the same length as signers\"\n        );\n      }\n    }\n    this._paths = paths;\n  }\n  get paths() {\n    return this._paths;\n  }\n  get signers() {\n    return this._signers;\n  }\n};\nvar RandyCreator = class {\n  create(codes = void 0, count = 1, code = MtrDex.Ed25519_Seed, transferable = true) {\n    const signers = new Array();\n    if (codes == void 0) {\n      codes = new Array(count).fill(code);\n    }\n    codes.forEach(function(code2) {\n      signers.push(\n        new Signer({ code: code2, transferable })\n      );\n    });\n    return new Keys(signers);\n  }\n  get salt() {\n    return \"\";\n  }\n  get stem() {\n    return \"\";\n  }\n  get tier() {\n    return \"\";\n  }\n};\nvar SaltyCreator = class {\n  salter;\n  _stem;\n  constructor(salt = void 0, tier = void 0, stem = void 0) {\n    this.salter = new Salter({ qb64: salt, tier });\n    this._stem = stem == void 0 ? \"\" : stem;\n  }\n  get salt() {\n    return this.salter.qb64;\n  }\n  get stem() {\n    return this._stem;\n  }\n  get tier() {\n    return this.salter.tier;\n  }\n  create(codes = void 0, count = 1, code = MtrDex.Ed25519_Seed, transferable = true, pidx = 0, ridx = 0, kidx = 0, temp = false) {\n    const signers = new Array();\n    const paths = new Array();\n    if (codes == void 0) {\n      codes = new Array(count).fill(code);\n    }\n    codes.forEach((code2, idx) => {\n      const path = this.stem == \"\" ? pidx.toString(16) : this.stem + ridx.toString(16) + (kidx + idx).toString(16);\n      signers.push(\n        this.salter.signer(code2, transferable, path, this.tier, temp)\n      );\n      paths.push(path);\n    });\n    return new Keys(signers, paths);\n  }\n};\nvar Creatory = class {\n  _make;\n  constructor(algo = \"salty\" /* salty */) {\n    switch (algo) {\n      case \"randy\" /* randy */:\n        this._make = this._makeRandy;\n        break;\n      case \"salty\" /* salty */:\n        this._make = this._makeSalty;\n        break;\n      default:\n        throw new Error(`unsupported algo=${algo}`);\n    }\n  }\n  make(...args) {\n    return this._make(...args);\n  }\n  _makeRandy() {\n    return new RandyCreator();\n  }\n  _makeSalty(...args) {\n    return new SaltyCreator(...args);\n  }\n};\nfunction openManager(passcode, salt) {\n  if (passcode.length < 21) {\n    throw new Error(\"Bran (passcode seed material) too short.\");\n  }\n  const bran = MtrDex.Salt_128 + \"A\" + passcode.substring(0, 21);\n  const signer = new Salter({ qb64: bran }).signer(\n    MtrDex.Ed25519_Seed,\n    false\n  );\n  const seed = signer.qb64;\n  const aeid = signer.verfer.qb64;\n  let algo;\n  const salter = salt != void 0 ? new Salter({ qb64: salt }) : void 0;\n  if (salt != void 0) {\n    algo = \"salty\" /* salty */;\n  } else {\n    algo = \"randy\" /* randy */;\n  }\n  return new Manager({ seed, aeid, algo, salter });\n}\nvar Manager = class {\n  _seed;\n  _salt;\n  _encrypter;\n  _decrypter;\n  _ks;\n  constructor({ ks, seed, aeid, pidx, algo, salter, tier }) {\n    this._ks = ks == void 0 ? new Keeper() : ks;\n    this._seed = seed;\n    this._encrypter = void 0;\n    this._decrypter = void 0;\n    aeid = aeid == void 0 ? void 0 : aeid;\n    pidx = pidx == void 0 ? 0 : pidx;\n    algo = algo == void 0 ? \"salty\" /* salty */ : algo;\n    const salt = salter?.qb64;\n    tier = tier == void 0 ? \"low\" /* low */ : tier;\n    if (this.pidx == void 0) {\n      this.pidx = pidx;\n    }\n    if (this.algo == void 0) {\n      this.algo = algo;\n    }\n    if (this.salt == void 0) {\n      this.salt = salt;\n    }\n    if (this.tier == void 0) {\n      this.tier = tier;\n    }\n    if (this.aeid == void 0) {\n      this.updateAeid(aeid, this._seed);\n    }\n  }\n  get ks() {\n    return this._ks;\n  }\n  get encrypter() {\n    return this._encrypter;\n  }\n  get decrypter() {\n    return this._decrypter;\n  }\n  get seed() {\n    return this._seed;\n  }\n  get aeid() {\n    return this.ks.getGbls(\"aeid\");\n  }\n  get pidx() {\n    const pidx = this.ks.getGbls(\"pidx\");\n    if (pidx != void 0) {\n      return parseInt(pidx, 16);\n    }\n    return void 0;\n  }\n  set pidx(pidx) {\n    this.ks.pinGbls(\"pidx\", pidx.toString(16));\n  }\n  get salt() {\n    if (this._decrypter == void 0) {\n      return this._salt;\n    } else {\n      const salt = this.ks.getGbls(\"salt\");\n      return this._decrypter.decrypt(b(salt)).qb64;\n    }\n  }\n  set salt(salt) {\n    if (this._encrypter == void 0) {\n      this._salt = salt;\n    } else {\n      salt = this._encrypter.encrypt(b(salt)).qb64;\n      this.ks.pinGbls(\"salt\", salt);\n    }\n  }\n  get tier() {\n    return this.ks.getGbls(\"tier\");\n  }\n  set tier(tier) {\n    this.ks.pinGbls(\"tier\", tier);\n  }\n  get algo() {\n    const a = this.ks.getGbls(\"algo\");\n    const ta = a;\n    return Algos[ta];\n  }\n  set algo(algo) {\n    this.ks.pinGbls(\"algo\", algo);\n  }\n  updateAeid(aeid, seed) {\n    if (this.aeid != void 0) {\n      const seed2 = b(this._seed);\n      if (this._seed == void 0 || !this._encrypter?.verifySeed(seed2)) {\n        throw new Error(`Last seed missing or provided last seed \"\n                                       \"not associated with last aeid=${this.aeid}.`);\n      }\n    }\n    if (aeid != \"\" && aeid != void 0) {\n      if (aeid != this.aeid) {\n        this._encrypter = new Encrypter({}, b(aeid));\n        if (seed == void 0 || !this._encrypter.verifySeed(b(seed))) {\n          throw new Error(`Seed missing or provided seed not associated\"\n                                           \"  with provided aeid=${aeid}.`);\n        }\n      }\n    } else if (this.algo == \"randy\" /* randy */) {\n      throw new Error(\n        \"Invalid Manager configuration, encryption must be used with Randy key creation.\"\n      );\n    } else {\n      this._encrypter = void 0;\n    }\n    const salt = this.salt;\n    if (salt != void 0) {\n      this.salt = salt;\n    }\n    if (this._decrypter != void 0) {\n      for (const [keys, data] of this.ks.prmsElements()) {\n        if (data.salt != void 0) {\n          const salter = this._decrypter.decrypt(b(data.salt));\n          data.salt = this._encrypter == void 0 ? salter.qb64 : this._encrypter.encrypt(null, salter);\n          this.ks.pinPrms(keys, data);\n        }\n      }\n      for (const [pubKey, signer] of this.ks.prisElements(\n        this._decrypter\n      )) {\n        this.ks.pinPris(pubKey, signer, this._encrypter);\n      }\n    }\n    this.ks.pinGbls(\"aeid\", aeid);\n    this._seed = seed;\n    this._decrypter = seed != void 0 ? new Decrypter({}, b(seed)) : void 0;\n  }\n  incept({\n    icodes = void 0,\n    icount = 1,\n    icode = MtrDex.Ed25519_Seed,\n    ncodes = void 0,\n    ncount = 1,\n    ncode = MtrDex.Ed25519_Seed,\n    dcode = MtrDex.Blake3_256,\n    algo = void 0,\n    salt = void 0,\n    stem = void 0,\n    tier = void 0,\n    rooted = true,\n    transferable = true,\n    temp = false\n  }) {\n    if (rooted && algo == void 0) {\n      algo = this.algo;\n    }\n    if (rooted && salt == void 0) {\n      salt = this.salt;\n    }\n    if (rooted && tier == void 0) {\n      tier = this.tier;\n    }\n    const pidx = this.pidx;\n    const ridx = 0;\n    const kidx = 0;\n    const creator = new Creatory(algo).make(salt, tier, stem);\n    if (icodes == void 0) {\n      if (icount < 0) {\n        throw new Error(`Invalid icount=${icount} must be >= 0.`);\n      }\n      icodes = new Array(icount).fill(icode);\n    }\n    const ikeys = creator.create(\n      icodes,\n      0,\n      MtrDex.Ed25519_Seed,\n      transferable,\n      pidx,\n      ridx,\n      kidx,\n      temp\n    );\n    const verfers = Array.from(\n      ikeys.signers,\n      (signer) => signer.verfer\n    );\n    if (ncodes == void 0) {\n      if (ncount < 0) {\n        throw new Error(`Invalid ncount=${ncount} must be >= 0.`);\n      }\n      ncodes = new Array(ncount).fill(ncode);\n    }\n    const nkeys = creator.create(\n      ncodes,\n      0,\n      MtrDex.Ed25519_Seed,\n      transferable,\n      pidx,\n      ridx + 1,\n      kidx + icodes.length,\n      temp\n    );\n    const digers = Array.from(\n      nkeys.signers,\n      (signer) => new Diger({ code: dcode }, signer.verfer.qb64b)\n    );\n    const pp = new PrePrm();\n    pp.pidx = pidx;\n    pp.algo = algo;\n    pp.salt = creator.salt.length == 0 || this.encrypter == void 0 ? \"\" : this.encrypter.encrypt(b(creator.salt)).qb64;\n    pp.stem = creator.stem;\n    pp.tier = creator.tier;\n    const dt = (/* @__PURE__ */ new Date()).toString();\n    const nw = new PubLot();\n    nw.pubs = Array.from(verfers, (verfer) => verfer.qb64);\n    nw.ridx = ridx;\n    nw.kidx = kidx;\n    nw.dt = dt;\n    const nt = new PubLot();\n    nt.pubs = Array.from(\n      nkeys.signers,\n      (signer) => signer.verfer.qb64\n    );\n    nt.ridx = ridx + 1;\n    nt.kidx = kidx + icodes.length;\n    nt.dt = dt;\n    const ps = new PreSit();\n    ps.new = nw;\n    ps.nxt = nt;\n    const pre = verfers[0].qb64;\n    if (!this.ks.putPres(pre, verfers[0].qb64b)) {\n      throw new Error(`Already incepted pre=${pre}.`);\n    }\n    if (!this.ks.putPrms(pre, pp)) {\n      throw new Error(`Already incepted prm for pre=${pre}.`);\n    }\n    this.pidx = pidx + 1;\n    if (!this.ks.putSits(pre, ps)) {\n      throw new Error(`Already incepted sit for pre=${pre}.`);\n    }\n    if (this.encrypter != void 0) {\n      ikeys.signers.forEach((signer) => {\n        this.ks.putPris(signer.verfer.qb64, signer, this.encrypter);\n      });\n      nkeys.signers.forEach((signer) => {\n        this.ks.putPris(signer.verfer.qb64, signer, this.encrypter);\n      });\n    } else if (this._encrypter == void 0 && ikeys.paths != void 0 && nkeys.paths != void 0) {\n      ikeys.paths.forEach((path, idx) => {\n        const signer = ikeys.signers[idx];\n        const ppt = new PubPath();\n        ppt.path = path;\n        ppt.code = icodes[idx];\n        ppt.tier = pp.tier;\n        ppt.temp = temp;\n        this.ks.putPths(signer.verfer.qb64, ppt);\n      });\n      nkeys.paths.forEach((path, idx) => {\n        const signer = nkeys.signers[idx];\n        const ppt = new PubPath();\n        ppt.path = path;\n        ppt.code = ncodes[idx];\n        ppt.tier = pp.tier;\n        ppt.temp = temp;\n        this.ks.putPths(signer.verfer.qb64, ppt);\n      });\n    } else {\n      throw new Error(\n        \"invalid configuration, randy keys without encryption\"\n      );\n    }\n    const pubSet = new PubSet();\n    pubSet.pubs = ps.new.pubs;\n    this.ks.putPubs(riKey(pre, ridx), pubSet);\n    const nxtPubSet = new PubSet();\n    nxtPubSet.pubs = ps.nxt.pubs;\n    this.ks.putPubs(riKey(pre, ridx + 1), nxtPubSet);\n    return [verfers, digers];\n  }\n  move(old, gnu) {\n    if (old == gnu) {\n      return;\n    }\n    if (this.ks.getPres(old) == void 0) {\n      throw new Error(`Nonexistent old pre=${old}, nothing to assign.`);\n    }\n    if (this.ks.getPres(gnu) != void 0) {\n      throw new Error(`Preexistent new pre=${gnu} may not clobber.`);\n    }\n    const oldprm = this.ks.getPrms(old);\n    if (oldprm == void 0) {\n      throw new Error(\n        `Nonexistent old prm for pre=${old}, nothing to move.`\n      );\n    }\n    if (this.ks.getPrms(gnu) != void 0) {\n      throw new Error(\n        `Preexistent new prm for pre=${gnu} may not clobber.`\n      );\n    }\n    const oldsit = this.ks.getSits(old);\n    if (oldsit == void 0) {\n      throw new Error(\n        `Nonexistent old sit for pre=${old}, nothing to move.`\n      );\n    }\n    if (this.ks.getSits(gnu) != void 0) {\n      throw new Error(\n        `Preexistent new sit for pre=${gnu} may not clobber.`\n      );\n    }\n    if (!this.ks.putPrms(gnu, oldprm)) {\n      throw new Error(\n        `Failed moving prm from old pre=${old} to new pre=${gnu}.`\n      );\n    } else {\n      this.ks.remPrms(old);\n    }\n    if (!this.ks.putSits(gnu, oldsit)) {\n      throw new Error(\n        `Failed moving sit from old pre=${old} to new pre=${gnu}.`\n      );\n    } else {\n      this.ks.remSits(old);\n    }\n    let i = 0;\n    while (true) {\n      const pl = this.ks.getPubs(riKey(old, i));\n      if (pl == void 0) {\n        break;\n      }\n      if (!this.ks.putPubs(riKey(gnu, i), pl)) {\n        throw new Error(\n          `Failed moving pubs at pre=${old} ri=${i} to new pre=${gnu}`\n        );\n      }\n      i = i + 1;\n    }\n    if (!this.ks.pinPres(old, b(gnu))) {\n      throw new Error(\n        `Failed assiging new pre=${gnu} to old pre=${old}.`\n      );\n    }\n    if (!this.ks.putPres(gnu, b(gnu))) {\n      throw new Error(`Failed assiging new pre=${gnu}.`);\n    }\n  }\n  rotate({\n    pre,\n    ncodes = void 0,\n    ncount = 1,\n    ncode = MtrDex.Ed25519_Seed,\n    dcode = MtrDex.Blake3_256,\n    transferable = true,\n    temp = false,\n    erase = true\n  }) {\n    const pp = this.ks.getPrms(pre);\n    if (pp == void 0) {\n      throw new Error(`Attempt to rotate nonexistent pre=${pre}.`);\n    }\n    const ps = this.ks.getSits(pre);\n    if (ps == void 0) {\n      throw new Error(`Attempt to rotate nonexistent pre=${pre}.`);\n    }\n    if (ps.nxt.pubs == void 0 || ps.nxt.pubs.length == 0) {\n      throw new Error(`Attempt to rotate nontransferable pre=${pre}.`);\n    }\n    const old = ps.old;\n    ps.old = ps.new;\n    ps.new = ps.nxt;\n    if (this.aeid != void 0 && this.decrypter == void 0) {\n      throw new Error(\n        \"Unauthorized decryption attempt.  Aeid but no decrypter.\"\n      );\n    }\n    const verfers = new Array();\n    ps.new.pubs.forEach((pub) => {\n      if (this.decrypter != void 0) {\n        const signer = this.ks.getPris(pub, this.decrypter);\n        if (signer == void 0) {\n          throw new Error(`Missing prikey in db for pubkey=${pub}`);\n        }\n        verfers.push(signer.verfer);\n      } else {\n        verfers.push(new Verfer({ qb64: pub }));\n      }\n    });\n    let salt = pp.salt;\n    if (salt != void 0 && salt != \"\") {\n      if (this.decrypter == void 0) {\n        throw new Error(\n          \"Invalid configuration: AID salt with no encryption\"\n        );\n      }\n      salt = this.decrypter.decrypt(b(salt)).qb64;\n    } else {\n      salt = this.salt;\n    }\n    const creator = new Creatory(pp.algo).make(salt, pp.tier, pp.stem);\n    if (ncodes == void 0) {\n      if (ncount < 0) {\n        throw new Error(`Invalid count=${ncount} must be >= 0`);\n      }\n      ncodes = new Array(ncount).fill(ncode);\n    }\n    const pidx = pp.pidx;\n    const ridx = ps.new.ridx + 1;\n    const kidx = ps.nxt.kidx + ps.new.pubs.length;\n    const keys = creator.create(\n      ncodes,\n      0,\n      \"\",\n      transferable,\n      pidx,\n      ridx,\n      kidx,\n      temp\n    );\n    const digers = Array.from(\n      keys.signers,\n      (signer) => new Diger({ code: dcode }, signer.verfer.qb64b)\n    );\n    const dt = (/* @__PURE__ */ new Date()).toString();\n    ps.nxt = new PubLot();\n    ps.nxt.pubs = Array.from(\n      keys.signers,\n      (signer) => signer.verfer.qb64\n    );\n    ps.nxt.ridx = ridx;\n    ps.nxt.kidx = kidx;\n    ps.nxt.dt = dt;\n    if (!this.ks.pinSits(pre, ps)) {\n      throw new Error(`Problem updating pubsit db for pre=${pre}.`);\n    }\n    if (this.encrypter != void 0) {\n      keys.signers.forEach((signer) => {\n        this.ks.putPris(signer.verfer.qb64, signer, this.encrypter);\n      });\n    } else if (this._encrypter == void 0 && keys.paths != void 0) {\n      keys.paths.forEach((path, idx) => {\n        const signer = keys.signers[idx];\n        const ppt = new PubPath();\n        ppt.path = path;\n        ppt.tier = pp.tier;\n        ppt.temp = temp;\n        this.ks.putPths(signer.verfer.qb64, ppt);\n      });\n    } else {\n      throw new Error(\n        \"invalid configuration, randy keys without encryption\"\n      );\n    }\n    const newPs = new PubSet();\n    newPs.pubs = ps.nxt.pubs;\n    this.ks.putPubs(riKey(pre, ps.nxt.ridx), newPs);\n    if (erase) {\n      old.pubs.forEach((pub) => {\n        this.ks.remPris(pub);\n      });\n    }\n    return [verfers, digers];\n  }\n  sign({\n    ser,\n    pubs = void 0,\n    verfers = void 0,\n    indexed = true,\n    indices = void 0,\n    ondices = void 0\n  }) {\n    const signers = new Array();\n    if (pubs == void 0 && verfers == void 0) {\n      throw new Error(\"pubs or verfers required\");\n    }\n    if (pubs != void 0) {\n      if (this.aeid != void 0 && this.decrypter == void 0) {\n        throw new Error(\n          \"Unauthorized decryption attempt.  Aeid but no decrypter.\"\n        );\n      }\n      pubs.forEach((pub) => {\n        if (this.decrypter != void 0) {\n          const signer = this.ks.getPris(pub, this.decrypter);\n          if (signer == void 0) {\n            throw new Error(\n              `Missing prikey in db for pubkey=${pub}`\n            );\n          }\n          signers.push(signer);\n        } else {\n          const verfer = new Verfer({ qb64: pub });\n          const ppt = this.ks.getPths(pub);\n          if (ppt == void 0) {\n            throw new Error(\n              `Missing prikey in db for pubkey=${pub}`\n            );\n          }\n          const salter = new Salter({ qb64: this.salt });\n          signers.push(\n            salter.signer(\n              ppt.code,\n              verfer.transferable,\n              ppt.path,\n              ppt.tier,\n              ppt.temp\n            )\n          );\n        }\n      });\n    } else {\n      verfers.forEach((verfer) => {\n        if (this.decrypter != void 0) {\n          const signer = this.ks.getPris(verfer.qb64, this.decrypter);\n          if (signer == void 0) {\n            throw new Error(\n              `Missing prikey in db for pubkey=${verfer.qb64}`\n            );\n          }\n          signers.push(signer);\n        } else {\n          const ppt = this.ks.getPths(verfer.qb64);\n          if (ppt == void 0) {\n            throw new Error(\n              `Missing prikey in db for pubkey=${verfer.qb64}`\n            );\n          }\n          const salter = new Salter({ qb64: this.salt });\n          signers.push(\n            salter.signer(\n              ppt.code,\n              verfer.transferable,\n              ppt.path,\n              ppt.tier,\n              ppt.temp\n            )\n          );\n        }\n      });\n    }\n    if (indices != void 0 && indices.length != signers.length) {\n      throw new Error(\n        `Mismatch indices length=${indices.length} and resultant signers length=${signers.length}`\n      );\n    }\n    if (ondices != void 0 && ondices.length != signers.length) {\n      throw new Error(\n        `Mismatch ondices length=${ondices.length} and resultant signers length=${signers.length}`\n      );\n    }\n    if (indexed) {\n      const sigers = new Array();\n      signers.forEach((signer, idx) => {\n        let i;\n        if (indices != void 0) {\n          i = indices[idx];\n          if (i < 0) {\n            throw new Error(\n              `Invalid signing index = ${i}, not whole number.`\n            );\n          }\n        } else {\n          i = idx;\n        }\n        let o;\n        if (ondices != void 0) {\n          o = ondices[idx];\n          if (o <= 0) {\n            throw new Error(\n              `Invalid other signing index = {o}, not None or not whole number.`\n            );\n          }\n        } else {\n          o = i;\n        }\n        const only = o == void 0;\n        sigers.push(signer.sign(ser, i, only, o));\n      });\n      return sigers;\n    } else {\n      const cigars = new Array();\n      signers.forEach((signer) => {\n        cigars.push(signer.sign(ser));\n      });\n      return cigars;\n    }\n  }\n};\nfunction riKey(pre, ridx) {\n  return pre + \".\" + ridx.toString(16).padStart(32, \"0\");\n}\nvar Keeper = class {\n  _gbls;\n  _pris;\n  _pths;\n  _pres;\n  _prms;\n  _sits;\n  _pubs;\n  constructor() {\n    this._gbls = /* @__PURE__ */ new Map();\n    this._pris = /* @__PURE__ */ new Map();\n    this._pths = /* @__PURE__ */ new Map();\n    this._pres = /* @__PURE__ */ new Map();\n    this._prms = /* @__PURE__ */ new Map();\n    this._sits = /* @__PURE__ */ new Map();\n    this._pubs = /* @__PURE__ */ new Map();\n  }\n  getGbls(key) {\n    return this._gbls.get(key);\n  }\n  pinGbls(key, val) {\n    this._gbls.set(key, val);\n  }\n  prmsElements() {\n    const out = new Array();\n    this._prms.forEach((value, key) => {\n      out.push([key, value]);\n    });\n    return out;\n  }\n  getPrms(keys) {\n    return this._prms.get(keys);\n  }\n  pinPrms(keys, data) {\n    this._prms.set(keys, data);\n  }\n  putPrms(keys, data) {\n    if (this._prms.has(keys)) {\n      return false;\n    }\n    this._prms.set(keys, data);\n    return true;\n  }\n  remPrms(keys) {\n    return this._prms.delete(keys);\n  }\n  prisElements(decrypter) {\n    const out = new Array();\n    this._pris.forEach(function(val, pubKey) {\n      const verfer = new Verfer({ qb64: pubKey });\n      const signer = decrypter.decrypt(val, null, verfer.transferable);\n      out.push([pubKey, signer]);\n    });\n    return out;\n  }\n  pinPris(pubKey, signer, encrypter) {\n    const cipher = encrypter.encrypt(null, signer);\n    this._pris.set(pubKey, cipher.qb64b);\n  }\n  putPris(pubKey, signer, encrypter) {\n    if (this._pris.has(pubKey)) {\n      return false;\n    }\n    const cipher = encrypter.encrypt(null, signer);\n    this._pris.set(pubKey, cipher.qb64b);\n    return true;\n  }\n  getPris(pubKey, decrypter) {\n    const val = this._pris.get(pubKey);\n    if (val == void 0) {\n      return void 0;\n    }\n    const verfer = new Verfer({ qb64: pubKey });\n    return decrypter.decrypt(val, null, verfer.transferable);\n  }\n  pinPths(pubKey, val) {\n    this._pths.set(pubKey, val);\n    return true;\n  }\n  putPths(pubKey, val) {\n    if (this._pths.has(pubKey)) {\n      return false;\n    }\n    this._pths.set(pubKey, val);\n    return true;\n  }\n  getPths(pubKey) {\n    return this._pths.get(pubKey);\n  }\n  remPris(pubKey) {\n    this._pris.delete(pubKey);\n  }\n  getPres(pre) {\n    return this._pres.get(pre);\n  }\n  pinPres(pre, val) {\n    this._pres.set(pre, val);\n    return true;\n  }\n  putPres(pre, val) {\n    if (this._pres.has(pre)) {\n      return false;\n    }\n    this._pres.set(pre, val);\n    return true;\n  }\n  getSits(keys) {\n    return this._sits.get(keys);\n  }\n  putSits(pre, val) {\n    if (this._sits.has(pre)) {\n      return false;\n    }\n    this._sits.set(pre, val);\n    return true;\n  }\n  pinSits(pre, val) {\n    this._sits.set(pre, val);\n    return true;\n  }\n  remSits(keys) {\n    return this._sits.delete(keys);\n  }\n  getPubs(keys) {\n    return this._pubs.get(keys);\n  }\n  putPubs(keys, data) {\n    if (this._pubs.has(keys)) {\n      return false;\n    }\n    this._pubs.set(keys, data);\n    return true;\n  }\n};\n\n// src/keri/core/tholder.ts\n\nvar Tholder = class {\n  _weighted = false;\n  _thold = void 0;\n  _size = 0;\n  _number = void 0;\n  _satisfy = void 0;\n  // private _bexter: any\n  constructor(kargs) {\n    if (kargs.thold !== void 0) {\n      this._processThold(kargs.thold);\n    } else if (kargs.limen != void 0) {\n      this._processLimen(kargs.limen);\n    } else if (kargs.sith !== void 0) {\n      this._processSith(kargs.sith);\n    } else {\n      throw new Error(\"Missing threshold expression\");\n    }\n  }\n  get weighted() {\n    return this._weighted;\n  }\n  get thold() {\n    return this._thold;\n  }\n  get size() {\n    return this._size;\n  }\n  get limen() {\n    return this._number?.qb64b;\n  }\n  get sith() {\n    if (this.weighted) {\n      let sith = this.thold.map((clause) => {\n        return clause.map((c) => {\n          if (0 < Number(c) && Number(c) < 1) {\n            return (0,mathjs__WEBPACK_IMPORTED_MODULE_4__.format)(c, { fraction: \"ratio\" });\n          } else {\n            return (0,mathjs__WEBPACK_IMPORTED_MODULE_4__.format)(c, { fraction: \"decimal\" });\n          }\n        });\n      });\n      if (sith.length == 1) {\n        sith = sith[0];\n      }\n      return sith;\n    } else {\n      return this.thold.toString(16);\n    }\n  }\n  get json() {\n    return JSON.stringify(this.sith);\n  }\n  get num() {\n    return this._weighted ? void 0 : this._thold;\n  }\n  _processThold(thold) {\n    if (typeof thold === \"number\") {\n      this._processUnweighted(thold);\n    } else {\n      this._processWeighted(thold);\n    }\n  }\n  _processLimen(limen) {\n    const matter = new Matter({ qb64: limen });\n    if (NumDex.has(matter.code)) {\n      const number = new CesrNumber({\n        raw: matter.raw,\n        code: matter.code\n      });\n      this._processUnweighted(number.num);\n    } else if (BexDex.has(matter.code)) {\n    } else {\n      throw new Error(\"Invalid code for limen=\" + matter.code);\n    }\n  }\n  _processSith(sith) {\n    if (typeof sith == \"number\") {\n      this._processUnweighted(sith);\n    } else if (typeof sith == \"string\" && sith.indexOf(\"[\") == -1) {\n      this._processUnweighted(parseInt(sith, 16));\n    } else {\n      let _sith = sith;\n      if (typeof sith == \"string\") {\n        _sith = JSON.parse(sith);\n      }\n      if (_sith.length == 0) {\n        throw new Error(\"Empty weight list\");\n      }\n      const mask = _sith.map((x) => {\n        return typeof x !== \"string\";\n      });\n      if (mask.length > 0 && !mask.every((x) => x)) {\n        _sith = [_sith];\n      }\n      for (const c of _sith) {\n        const mask2 = c.map((x) => {\n          return typeof x === \"string\";\n        });\n        if (mask2.length > 0 && !mask2.every((x) => x)) {\n          throw new Error(\n            \"Invalid sith, some weights in clause \" + mask2 + \" are non string\"\n          );\n        }\n      }\n      const thold = this._processClauses(_sith);\n      this._processWeighted(thold);\n    }\n  }\n  _processClauses(sith) {\n    const thold = new Array();\n    sith.forEach((clause) => {\n      thold.push(\n        clause.map((w) => {\n          return this.weight(w);\n        })\n      );\n    });\n    return thold;\n  }\n  _processUnweighted(thold) {\n    if (thold < 0) {\n      throw new Error(\"Non-positive int threshold = {thold}.\");\n    }\n    this._thold = thold;\n    this._weighted = false;\n    this._size = this._thold;\n    this._satisfy = this._satisfy_numeric;\n    this._number = new CesrNumber({}, thold);\n  }\n  _processWeighted(thold) {\n    for (const clause of thold) {\n      if (Number((0,mathjs__WEBPACK_IMPORTED_MODULE_4__.sum)(clause)) < 1) {\n        throw new Error(\n          \"Invalid sith clause: \" + thold + \"all clause weight sums must be >= 1\"\n        );\n      }\n    }\n    this._thold = thold;\n    this._weighted = true;\n    this._size = thold.reduce((acc, currentValue) => {\n      return acc + currentValue.length;\n    }, 0);\n    this._satisfy = this._satisfy_weighted;\n  }\n  weight(w) {\n    return (0,mathjs__WEBPACK_IMPORTED_MODULE_4__.fraction)(w);\n  }\n  _satisfy_numeric(indices) {\n    return this.thold > 0 && indices.length >= this.thold;\n  }\n  _satisfy_weighted(indices) {\n    if (indices.length === 0) {\n      return false;\n    }\n    const indexes = new Set(indices.sort());\n    const sats = new Array(indices.length).fill(false);\n    for (const idx of indexes) {\n      sats[idx] = true;\n    }\n    let wio = 0;\n    for (const clause of this.thold) {\n      let cw = 0;\n      for (const w of clause) {\n        if (sats[wio]) {\n          cw += Number(w);\n        }\n        wio += 1;\n      }\n      if (cw < 1) {\n        return false;\n      }\n    }\n    return true;\n  }\n  satisfy(indices) {\n    return this._satisfy(indices);\n  }\n};\n\n// src/keri/core/eventing.ts\nvar MaxIntThold = 2 ** 32 - 1;\nfunction rotate({\n  pre = void 0,\n  keys,\n  dig = void 0,\n  ilk = Ilks.rot,\n  sn = 1,\n  isith = void 0,\n  ndigs = void 0,\n  nsith = void 0,\n  wits = void 0,\n  cuts = void 0,\n  adds = void 0,\n  toad = void 0,\n  data = void 0,\n  version = void 0,\n  kind = void 0,\n  intive = true\n}) {\n  const vs = versify(\"KERI\" /* KERI */, version, kind, 0);\n  const _ilk = ilk;\n  if (_ilk != Ilks.rot && _ilk != Ilks.drt) {\n    throw new Error(`Invalid ilk = ${ilk} for rot or drt.`);\n  }\n  const sner = new CesrNumber({}, sn);\n  if (sner.num < 1) {\n    throw new Error(`Invalid sn = 0x${sner.numh} for rot or drt.`);\n  }\n  let _isit;\n  if (isith == void 0) {\n    _isit = Math.max(1, Math.ceil(keys.length / 2));\n  } else {\n    _isit = isith;\n  }\n  const tholder = new Tholder({ sith: _isit });\n  if (tholder.num != void 0 && tholder.num < 1) {\n    throw new Error(`Invalid sith = ${tholder.num} less than 1.`);\n  }\n  if (tholder.size > keys.length) {\n    throw new Error(`Invalid sith = ${tholder.num} for keys = ${keys}`);\n  }\n  let _ndigs;\n  if (ndigs === void 0) {\n    _ndigs = [];\n  } else {\n    _ndigs = ndigs;\n  }\n  let _nsith;\n  if (nsith === void 0) {\n    _nsith = Math.max(1, Math.ceil(_ndigs.length / 2));\n  } else {\n    _nsith = nsith;\n  }\n  const ntholder = new Tholder({ sith: _nsith });\n  if (ntholder.num != void 0 && ntholder.num < 1) {\n    throw new Error(`Invalid sith = ${ntholder.num} less than 1.`);\n  }\n  if (ntholder.size > _ndigs.length) {\n    throw new Error(`Invalid sith = ${ntholder.num} for ndigs = ${ndigs}`);\n  }\n  let _wits;\n  if (wits === void 0) {\n    _wits = [];\n  } else {\n    _wits = wits;\n  }\n  const witset = new Set(_wits);\n  if (witset.size != _wits.length) {\n    throw new Error(`Invalid wits = ${wits}, has duplicates.`);\n  }\n  let _cuts;\n  if (cuts === void 0) {\n    _cuts = [];\n  } else {\n    _cuts = cuts;\n  }\n  const cutset = new Set(_cuts);\n  if (cutset.size != _cuts.length) {\n    throw new Error(`Invalid cuts = ${cuts}, has duplicates.`);\n  }\n  let _adds;\n  if (adds === void 0) {\n    _adds = [];\n  } else {\n    _adds = adds;\n  }\n  const addset = new Set(_adds);\n  const witaddset = new Set([...witset].filter((x) => addset.has(x)));\n  if (witaddset.size > 0) {\n    throw new Error(\n      `Invalid member combination among wits = ${wits}, and adds = ${adds}.`\n    );\n  }\n  const cutaddset = new Set([...cutset].filter((x) => addset.has(x)));\n  if (cutaddset.size > 0) {\n    throw new Error(\n      `Invalid member combination among cuts = ${cuts}, and adds = ${adds}.`\n    );\n  }\n  const newitsetdiff = new Set(_wits);\n  _cuts.forEach(function(v) {\n    newitsetdiff.delete(v);\n  });\n  const newitset = new Set(\n    function* () {\n      yield* newitsetdiff;\n      yield* addset;\n    }()\n  );\n  if (newitset.size != witset.size - cutset.size + addset.size) {\n    throw new Error(\n      `Invalid member combination among wits = ${wits}, cuts = ${cuts}, and adds = ${adds}.`\n    );\n  }\n  let _toad;\n  if (toad === void 0) {\n    if (newitset.size == 0) {\n      _toad = 0;\n    } else {\n      _toad = ample(newitset.size);\n    }\n  } else {\n    _toad = toad;\n  }\n  if (newitset.size > 0) {\n    if (_toad < 1 || _toad > newitset.size) {\n      throw new Error(`Invalid toad = ${_toad} for wit = ${wits}`);\n    }\n  } else {\n    if (_toad != 0) {\n      throw new Error(`Invalid toad = ${_toad} for wit = ${wits}`);\n    }\n  }\n  const _ked = {\n    v: vs,\n    t: _ilk,\n    d: \"\",\n    i: pre,\n    s: sner.numh,\n    p: dig,\n    kt: tholder.num && intive && tholder.num !== void 0 && tholder.num <= MaxIntThold ? tholder.num.toString(16) : tholder.sith,\n    k: keys,\n    nt: ntholder.num && intive && ntholder.num !== void 0 && ntholder.num <= MaxIntThold ? ntholder.num.toString(16) : ntholder.sith,\n    n: _ndigs,\n    bt: _toad && intive && _toad !== void 0 && _toad <= MaxIntThold ? _toad : _toad.toString(16),\n    br: cuts,\n    ba: adds,\n    a: data != void 0 ? data : []\n  };\n  const [, ked] = Saider.saidify(_ked);\n  return new Serder(ked);\n}\nfunction ample(n, f, weak = true) {\n  n = Math.max(0, n);\n  let f1;\n  if (f == void 0) {\n    f1 = Math.max(1, Math.floor(Math.max(0, n - 1) / 3));\n    const f2 = Math.max(1, Math.ceil(Math.max(0, n - 1) / 3));\n    if (weak) {\n      return Math.min(\n        n,\n        Math.ceil((n + f1 + 1) / 2),\n        Math.ceil((n + f2 + 1) / 2)\n      );\n    } else {\n      return Math.min(\n        n,\n        Math.max(0, n - f1, Math.ceil((n + f1 + 1) / 2))\n      );\n    }\n  } else {\n    f = Math.max(0, f);\n    const m1 = Math.ceil((n + f + 1) / 2);\n    const m2 = Math.max(0, n - f);\n    if (m2 < m1 && n > 0) {\n      throw new Error(`Invalid f=${f} is too big for n=${n}.`);\n    }\n    if (weak) {\n      return Math.min(n, m1, m2);\n    } else {\n      return Math.min(n, Math.max(m1, m2));\n    }\n  }\n}\nfunction incept({\n  keys,\n  isith,\n  ndigs,\n  nsith,\n  toad,\n  wits,\n  cnfg,\n  data,\n  version = Versionage,\n  kind = \"JSON\" /* JSON */,\n  code,\n  intive = false,\n  delpre\n}) {\n  const vs = versify(\"KERI\" /* KERI */, version, kind, 0);\n  const ilk = delpre == void 0 ? Ilks.icp : Ilks.dip;\n  const sner = new CesrNumber({}, 0);\n  if (isith == void 0) {\n    isith = Math.max(1, Math.ceil(keys.length / 2));\n  }\n  const tholder = new Tholder({ sith: isith });\n  if (tholder.num != void 0 && tholder.num < 1) {\n    throw new Error(`Invalid sith = ${tholder.num} less than 1.`);\n  }\n  if (tholder.size > keys.length) {\n    throw new Error(`Invalid sith = ${tholder.num} for keys ${keys}`);\n  }\n  if (ndigs == void 0) {\n    ndigs = new Array();\n  }\n  if (nsith == void 0) {\n    nsith = Math.max(0, Math.ceil(ndigs.length / 2));\n  }\n  const ntholder = new Tholder({ sith: nsith });\n  if (ntholder.num != void 0 && ntholder.num < 0) {\n    throw new Error(`Invalid nsith = ${ntholder.num} less than 0.`);\n  }\n  if (ntholder.size > keys.length) {\n    throw new Error(`Invalid nsith = ${ntholder.num} for keys ${ndigs}`);\n  }\n  wits = wits == void 0 ? [] : wits;\n  if (new Set(wits).size != wits.length) {\n    throw new Error(`Invalid wits = ${wits}, has duplicates.`);\n  }\n  if (toad == void 0) {\n    if (wits.length == 0) {\n      toad = 0;\n    } else {\n      toad = ample(wits.length);\n    }\n  }\n  const toader = new CesrNumber({}, toad);\n  if (wits.length > 0) {\n    if (toader.num < 1 || toader.num > wits.length) {\n      throw new Error(`Invalid toad = ${toader.num} for wits = ${wits}`);\n    }\n  } else {\n    if (toader.num != 0) {\n      throw new Error(`Invalid toad = ${toader.num} for wits = ${wits}`);\n    }\n  }\n  cnfg = cnfg == void 0 ? new Array() : cnfg;\n  data = data == void 0 ? new Array() : data;\n  let ked = {\n    v: vs,\n    t: ilk,\n    d: \"\",\n    i: \"\",\n    s: sner.numh,\n    kt: intive && tholder.num != void 0 ? tholder.num : tholder.sith,\n    k: keys,\n    nt: intive && tholder.num != void 0 ? ntholder.num : ntholder.sith,\n    n: ndigs,\n    bt: intive ? toader.num : toader.numh,\n    b: wits,\n    c: cnfg,\n    a: data\n  };\n  if (delpre != void 0) {\n    ked[\"di\"] = delpre;\n    if (code == void 0) {\n      code = MtrDex.Blake3_256;\n    }\n  }\n  let prefixer;\n  if (delpre == void 0 && code == void 0 && keys.length == 1) {\n    prefixer = new Prefixer({ qb64: keys[0] });\n    if (prefixer.digestive) {\n      throw new Error(\n        `Invalid code, digestive=${prefixer.code}, must be derived from ked.`\n      );\n    }\n  } else {\n    prefixer = new Prefixer({ code }, ked);\n    if (delpre != void 0) {\n      if (!prefixer.digestive) {\n        throw new Error(\n          `Invalid derivation code = ${prefixer.code} for delegation. Must be digestive`\n        );\n      }\n    }\n  }\n  ked[\"i\"] = prefixer.qb64;\n  if (prefixer.digestive) {\n    ked[\"d\"] = prefixer.qb64;\n  } else {\n    [, ked] = Saider.saidify(ked);\n  }\n  return new Serder(ked);\n}\nfunction messagize(serder, sigers, seal, wigers, cigars, pipelined = false) {\n  let msg = new Uint8Array(b(serder.raw));\n  let atc = new Uint8Array();\n  if (sigers == void 0 && wigers == void 0 && cigars == void 0) {\n    throw new Error(\n      `Missing attached signatures on message = ${serder.ked}.`\n    );\n  }\n  if (sigers != void 0) {\n    if (seal != void 0) {\n      if (seal[0] == \"SealEvent\") {\n        atc = concat(\n          atc,\n          new Counter({ code: CtrDex.TransIdxSigGroups, count: 1 }).qb64b\n        );\n        atc = concat(atc, new TextEncoder().encode(seal[1].i));\n        atc = concat(\n          atc,\n          new Seqner({ sn: parseInt(seal[1].s) }).qb64b\n        );\n        atc = concat(atc, new TextEncoder().encode(seal[1].d));\n      } else if (seal[0] == \"SealLast\") {\n        atc = concat(\n          atc,\n          new Counter({\n            code: CtrDex.TransLastIdxSigGroups,\n            count: 1\n          }).qb64b\n        );\n        atc = concat(atc, new TextEncoder().encode(seal[1].i));\n      }\n    }\n    atc = concat(\n      atc,\n      new Counter({\n        code: CtrDex.ControllerIdxSigs,\n        count: sigers.length\n      }).qb64b\n    );\n    sigers.forEach((siger) => {\n      atc = concat(atc, siger.qb64b);\n    });\n  }\n  if (wigers != void 0) {\n    atc = concat(\n      atc,\n      new Counter({\n        code: CtrDex.ControllerIdxSigs,\n        count: wigers.length\n      }).qb64b\n    );\n    wigers.forEach((wiger) => {\n      if (wiger.verfer && !(wiger.verfer.code in NonTransDex)) {\n        throw new Error(\n          `Attempt to use tranferable prefix=${wiger.verfer.qb64} for receipt.`\n        );\n      }\n      atc = concat(atc, wiger.qb64b);\n    });\n  }\n  if (cigars != void 0) {\n    atc = concat(\n      atc,\n      new Counter({\n        code: CtrDex.ControllerIdxSigs,\n        count: cigars.length\n      }).qb64b\n    );\n    cigars.forEach((cigar) => {\n      if (cigar.verfer && !(cigar.verfer.code in NonTransDex)) {\n        throw new Error(\n          `Attempt to use tranferable prefix=${cigar.verfer.qb64} for receipt.`\n        );\n      }\n      atc = concat(atc, cigar.qb64b);\n    });\n  }\n  if (pipelined) {\n    if (atc.length % 4 != 0) {\n      throw new Error(\n        `Invalid attachments size=${atc.length}, nonintegral quadlets.`\n      );\n    }\n    msg = concat(\n      msg,\n      new Counter({\n        code: CtrDex.AttachedMaterialQuadlets,\n        count: Math.floor(atc.length / 4)\n      }).qb64b\n    );\n  }\n  msg = concat(msg, atc);\n  return msg;\n}\nfunction interact(args) {\n  let { pre, dig, sn, data, version, kind } = args;\n  const vs = versify(\"KERI\" /* KERI */, version, kind, 0);\n  const ilk = Ilks.ixn;\n  const sner = new CesrNumber({}, sn);\n  if (sner.num < 1) {\n    throw new Error(`Invalid sn = 0x${sner.numh} for ixn.`);\n  }\n  data = data == void 0 ? new Array() : data;\n  let ked = {\n    v: vs,\n    t: ilk,\n    d: \"\",\n    i: pre,\n    s: sner.numh,\n    p: dig,\n    a: data\n  };\n  [, ked] = Saider.saidify(ked);\n  return new Serder(ked);\n}\nfunction reply(route = \"\", data, stamp, version, kind = \"JSON\" /* JSON */) {\n  const vs = versify(\"KERI\" /* KERI */, version, kind, 0);\n  if (data == void 0) {\n    data = {};\n  }\n  const _sad = {\n    v: vs,\n    t: Ilks.rpy,\n    d: \"\",\n    dt: stamp ?? (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\"),\n    r: route,\n    a: data\n  };\n  const [, sad] = Saider.saidify(_sad);\n  const saider = new Saider({ qb64: sad[\"d\"] });\n  if (!saider.verify(sad, true, true, kind, \"d\"))\n    throw new Error(`Invalid said = ${saider.qb64} for reply msg=${sad}.`);\n  return new Serder(sad);\n}\n\n// src/keri/app/habery.ts\nvar TraitCodex = class {\n  EstOnly = \"EO\";\n  // Only allow establishment events\n  DoNotDelegate = \"DND\";\n  // Dot not allow delegated identifiers\n  NoBackers = \"NB\";\n  // Do not allow backers\n};\nvar TraitDex = new TraitCodex();\nvar Hab = class {\n  name;\n  serder;\n  constructor(name, icp) {\n    this.name = name;\n    this.serder = icp;\n  }\n  get pre() {\n    return this.serder.ked[\"i\"];\n  }\n};\nvar Habery = class {\n  _name;\n  _mgr;\n  _habs = /* @__PURE__ */ new Map();\n  constructor({ name, passcode, seed, aeid, pidx, salt }) {\n    this._name = name;\n    if (passcode != void 0 && seed == void 0) {\n      if (passcode.length < 21) {\n        throw new Error(\"Bran (passcode seed material) too short.\");\n      }\n      const bran = MtrDex.Salt_128 + \"A\" + passcode.substring(0, 21);\n      const signer = new Salter({ qb64: bran }).signer(\n        MtrDex.Ed25519_Seed,\n        false\n      );\n      seed = signer.qb64;\n      if (aeid == void 0) {\n        aeid = signer.verfer.qb64;\n      }\n    }\n    let algo;\n    const salter = salt != void 0 ? new Salter({ qb64: salt }) : void 0;\n    if (salt != void 0) {\n      algo = \"salty\" /* salty */;\n    } else {\n      algo = \"randy\" /* randy */;\n    }\n    this._mgr = new Manager({\n      seed,\n      aeid,\n      pidx,\n      algo,\n      salter\n    });\n  }\n  get mgr() {\n    return this._mgr;\n  }\n  get habs() {\n    return Array.from(this._habs.values());\n  }\n  habByName(name) {\n    return this._habs.get(name);\n  }\n  makeHab(name, {\n    code = MtrDex.Blake3_256,\n    transferable = true,\n    isith = void 0,\n    icount = 1,\n    nsith = void 0,\n    ncount = void 0,\n    toad = void 0,\n    wits = void 0,\n    delpre = void 0,\n    estOnly = false,\n    DnD = false,\n    data = void 0\n  }) {\n    if (nsith == void 0) {\n      nsith = isith;\n    }\n    if (ncount == void 0) {\n      ncount = icount;\n    }\n    if (!transferable) {\n      ncount = 0;\n      nsith = \"0\";\n      code = MtrDex.Ed25519N;\n    }\n    const [verfers, digers] = this._mgr.incept({\n      icount,\n      ncount,\n      stem: this.name,\n      transferable,\n      temp: false\n    });\n    icount = verfers.length;\n    ncount = digers != void 0 ? digers.length : 0;\n    if (isith == void 0) {\n      isith = `${Math.max(1, Math.ceil(icount / 2)).toString(16)}`;\n    }\n    if (nsith == void 0) {\n      nsith = `${Math.max(1, Math.ceil(ncount / 2)).toString(16)}`;\n    }\n    const cnfg = new Array();\n    if (estOnly) {\n      cnfg.push(TraitDex.EstOnly);\n    }\n    if (DnD) {\n      cnfg.push(TraitDex.DoNotDelegate);\n    }\n    const keys = Array.from(verfers, (verfer) => verfer.qb64);\n    const ndigs = Array.from(digers, (diger) => diger.qb64);\n    const icp = incept({\n      keys,\n      isith,\n      ndigs,\n      nsith,\n      toad,\n      wits,\n      cnfg,\n      data,\n      code,\n      delpre\n    });\n    const hab = new Hab(name, icp);\n    this._habs.set(name, hab);\n    return hab;\n  }\n  get name() {\n    return this._name;\n  }\n};\n\n// src/keri/app/controller.ts\nvar Agent = class {\n  pre;\n  anchor;\n  verfer;\n  state;\n  sn;\n  said;\n  constructor(agent) {\n    this.pre = \"\";\n    this.anchor = \"\";\n    this.verfer = null;\n    this.state = null;\n    this.sn = 0;\n    this.said = \"\";\n    this.parse(agent);\n  }\n  parse(agent) {\n    const [state, verfer] = this.event(agent);\n    this.sn = new CesrNumber({}, void 0, state[\"s\"]).num;\n    this.said = state[\"d\"];\n    if (state[\"et\"] !== Ilks.dip) {\n      throw new Error(`invalid inception event type ${state[\"et\"]}`);\n    }\n    this.pre = state[\"i\"];\n    if (!state[\"di\"]) {\n      throw new Error(\"no anchor to controller AID\");\n    }\n    this.anchor = state[\"di\"];\n    this.verfer = verfer;\n    this.state = state;\n  }\n  event(evt) {\n    if (evt[\"k\"].length !== 1) {\n      throw new Error(`agent inception event can only have one key`);\n    }\n    const verfer = new Verfer({ qb64: evt[\"k\"][0] });\n    if (evt[\"n\"].length !== 1) {\n      throw new Error(`agent inception event can only have one next key`);\n    }\n    const diger = new Diger({ qb64: evt[\"n\"][0] });\n    const tholder = new Tholder({ sith: evt[\"kt\"] });\n    if (tholder.num !== 1) {\n      throw new Error(`invalid threshold ${tholder.num}, must be 1`);\n    }\n    const ntholder = new Tholder({ sith: evt[\"nt\"] });\n    if (ntholder.num !== 1) {\n      throw new Error(\n        `invalid next threshold ${ntholder.num}, must be 1`\n      );\n    }\n    return [evt, verfer, diger];\n  }\n};\nvar Controller = class {\n  bran;\n  stem;\n  tier;\n  ridx;\n  salter;\n  signer;\n  nsigner;\n  serder;\n  keys;\n  ndigs;\n  constructor(bran, tier, ridx = 0, state = null) {\n    this.bran = MtrDex.Salt_128 + \"A\" + bran.substring(0, 21);\n    this.stem = \"signify:controller\";\n    this.tier = tier;\n    this.ridx = ridx;\n    this.salter = new Salter({ qb64: this.bran, tier: this.tier });\n    const creator = new SaltyCreator(\n      this.salter.qb64,\n      this.tier,\n      this.stem\n    );\n    this.signer = creator.create(\n      void 0,\n      1,\n      MtrDex.Ed25519_Seed,\n      true,\n      0,\n      this.ridx,\n      0,\n      false\n    ).signers.pop();\n    this.nsigner = creator.create(\n      void 0,\n      1,\n      MtrDex.Ed25519_Seed,\n      true,\n      0,\n      this.ridx + 1,\n      0,\n      false\n    ).signers.pop();\n    this.keys = [this.signer.verfer.qb64];\n    this.ndigs = [\n      new Diger({ code: MtrDex.Blake3_256 }, this.nsigner.verfer.qb64b).qb64\n    ];\n    if (state == null || state[\"ee\"][\"s\"] == 0) {\n      this.serder = incept({\n        keys: this.keys,\n        isith: \"1\",\n        nsith: \"1\",\n        ndigs: this.ndigs,\n        code: MtrDex.Blake3_256,\n        toad: \"0\",\n        wits: []\n      });\n    } else {\n      this.serder = new Serder(state[\"ee\"]);\n    }\n  }\n  approveDelegation(_agent) {\n    const seqner = new Seqner({ sn: _agent.sn });\n    const anchor = { i: _agent.pre, s: seqner.snh, d: _agent.said };\n    const sn = new CesrNumber({}, void 0, this.serder.ked[\"s\"]).num + 1;\n    this.serder = interact({\n      pre: this.serder.pre,\n      dig: this.serder.ked[\"d\"],\n      sn,\n      data: [anchor],\n      version: Versionage,\n      kind: \"JSON\" /* JSON */\n    });\n    return [this.signer.sign(this.serder.raw, 0).qb64];\n  }\n  get pre() {\n    return this.serder.pre;\n  }\n  get event() {\n    const siger = this.signer.sign(this.serder.raw, 0);\n    return [this.serder, siger];\n  }\n  get verfers() {\n    return this.signer.verfer();\n  }\n  derive(state) {\n    if (state != void 0 && state[\"ee\"][\"s\"] === \"0\") {\n      return incept({\n        keys: this.keys,\n        isith: \"1\",\n        nsith: \"1\",\n        ndigs: this.ndigs,\n        code: MtrDex.Blake3_256,\n        toad: \"0\",\n        wits: []\n      });\n    } else {\n      return new Serder({ ked: state.controller[\"ee\"] });\n    }\n  }\n  rotate(bran, aids) {\n    const nbran = MtrDex.Salt_128 + \"A\" + bran.substring(0, 21);\n    const nsalter = new Salter({ qb64: nbran, tier: this.tier });\n    const nsigner = this.salter.signer(void 0, false);\n    const creator = new SaltyCreator(\n      this.salter.qb64,\n      this.tier,\n      this.stem\n    );\n    const signer = creator.create(\n      void 0,\n      1,\n      MtrDex.Ed25519_Seed,\n      true,\n      0,\n      this.ridx + 1,\n      0,\n      false\n    ).signers.pop();\n    const ncreator = new SaltyCreator(nsalter.qb64, this.tier, this.stem);\n    this.signer = ncreator.create(\n      void 0,\n      1,\n      MtrDex.Ed25519_Seed,\n      true,\n      0,\n      this.ridx,\n      0,\n      false\n    ).signers.pop();\n    this.nsigner = ncreator.create(\n      void 0,\n      1,\n      MtrDex.Ed25519_Seed,\n      true,\n      0,\n      this.ridx + 1,\n      0,\n      false\n    ).signers.pop();\n    this.keys = [this.signer.verfer.qb64, signer?.verfer.qb64];\n    this.ndigs = [new Diger({}, this.nsigner.verfer.qb64b).qb64];\n    const rot = rotate({\n      pre: this.pre,\n      keys: this.keys,\n      dig: this.serder.ked[\"d\"],\n      isith: [\"1\", \"0\"],\n      nsith: \"1\",\n      ndigs: this.ndigs\n    });\n    const sigs = [\n      signer?.sign(b(rot.raw), 1, false, 0).qb64,\n      this.signer.sign(rot.raw, 0).qb64\n    ];\n    const encrypter = new Encrypter({}, b(nsigner.verfer.qb64));\n    const decrypter = new Decrypter({}, nsigner.qb64b);\n    const sxlt = encrypter.encrypt(b(this.bran)).qb64;\n    const keys = {};\n    for (const aid of aids) {\n      const pre = aid[\"prefix\"];\n      if (\"salty\" in aid) {\n        const salty = aid[\"salty\"];\n        const cipher = new Cipher({ qb64: salty[\"sxlt\"] });\n        const dnxt = decrypter.decrypt(null, cipher).qb64;\n        const acreator = new SaltyCreator(\n          dnxt,\n          salty[\"tier\"],\n          salty[\"stem\"]\n        );\n        const signers = acreator.create(\n          salty[\"icodes\"],\n          void 0,\n          MtrDex.Ed25519_Seed,\n          salty[\"transferable\"],\n          salty[\"pidx\"],\n          0,\n          salty[\"kidx\"],\n          false\n        );\n        const _signers = [];\n        for (const signer2 of signers.signers) {\n          _signers.push(signer2.verfer.qb64);\n        }\n        const pubs = aid[\"state\"][\"k\"];\n        if (pubs.join(\",\") != _signers.join(\",\")) {\n          throw new Error(\"Invalid Salty AID\");\n        }\n        const asxlt = encrypter.encrypt(b(dnxt)).qb64;\n        keys[pre] = {\n          sxlt: asxlt\n        };\n      } else if (\"randy\" in aid) {\n        const randy = aid[\"randy\"];\n        const prxs = randy[\"prxs\"];\n        const nxts = randy[\"nxts\"];\n        const nprxs = [];\n        const signers = [];\n        for (const prx of prxs) {\n          const cipher = new Cipher({ qb64: prx });\n          const dsigner = decrypter.decrypt(null, cipher, true);\n          signers.push(dsigner);\n          nprxs.push(encrypter.encrypt(b(dsigner.qb64)).qb64);\n        }\n        const pubs = aid[\"state\"][\"k\"];\n        const _signers = [];\n        for (const signer2 of signers) {\n          _signers.push(signer2.verfer.qb64);\n        }\n        if (pubs.join(\",\") != _signers.join(\",\")) {\n          throw new Error(\n            `unable to rotate, validation of encrypted public keys ${pubs} failed`\n          );\n        }\n        const nnxts = [];\n        for (const nxt of nxts) {\n          nnxts.push(this.recrypt(nxt, decrypter, encrypter));\n        }\n        keys[pre] = {\n          prxs: nprxs,\n          nxts: nnxts\n        };\n      } else {\n        throw new Error(\"invalid aid type \");\n      }\n    }\n    const data = {\n      rot: rot.ked,\n      sigs,\n      sxlt,\n      keys\n    };\n    return data;\n  }\n  recrypt(enc, decrypter, encrypter) {\n    const cipher = new Cipher({ qb64: enc });\n    const dnxt = decrypter.decrypt(null, cipher).qb64;\n    return encrypter.encrypt(b(dnxt)).qb64;\n  }\n};\n\n// src/keri/core/httping.ts\n\n\nvar HEADER_SIG_INPUT = normalize(\"Signature-Input\");\nvar HEADER_SIG_TIME = normalize(\"Signify-Timestamp\");\nfunction normalize(header) {\n  return header.trim();\n}\nfunction siginput(signer, {\n  name,\n  method,\n  path,\n  headers,\n  fields,\n  expires,\n  nonce,\n  alg,\n  keyid,\n  context\n}) {\n  const items = new Array();\n  const ifields = new Array();\n  fields.forEach((field) => {\n    if (field.startsWith(\"@\")) {\n      switch (field) {\n        case \"@method\":\n          items.push(`\"${field}\": ${method}`);\n          ifields.push([field, /* @__PURE__ */ new Map()]);\n          break;\n        case \"@path\":\n          items.push(`\"${field}\": ${path}`);\n          ifields.push([field, /* @__PURE__ */ new Map()]);\n          break;\n      }\n    } else {\n      if (!headers.has(field))\n        return;\n      ifields.push([field, /* @__PURE__ */ new Map()]);\n      const value = normalize(headers.get(field));\n      items.push(`\"${field}\": ${value}`);\n    }\n  });\n  const nameParams = /* @__PURE__ */ new Map();\n  const now = Math.floor(nowUTC().getTime() / 1e3);\n  nameParams.set(\"created\", now);\n  const values = [\n    `(${ifields.map((field) => field[0]).join(\" \")})`,\n    `created=${now}`\n  ];\n  if (expires != void 0) {\n    values.push(`expires=${expires}`);\n    nameParams.set(\"expires\", expires);\n  }\n  if (nonce != void 0) {\n    values.push(`nonce=${nonce}`);\n    nameParams.set(\"nonce\", nonce);\n  }\n  if (keyid != void 0) {\n    values.push(`keyid=${keyid}`);\n    nameParams.set(\"keyid\", keyid);\n  }\n  if (context != void 0) {\n    values.push(`context=${context}`);\n    nameParams.set(\"context\", context);\n  }\n  if (alg != void 0) {\n    values.push(`alg=${alg}`);\n    nameParams.set(\"alg\", alg);\n  }\n  const sid = /* @__PURE__ */ new Map([[name, [ifields, nameParams]]]);\n  const params = values.join(\";\");\n  items.push(`\"@signature-params: ${params}\"`);\n  const ser = items.join(\"\\n\");\n  const sig = signer.sign(b(ser));\n  return [\n    /* @__PURE__ */ new Map([\n      [HEADER_SIG_INPUT, `${(0,structured_headers__WEBPACK_IMPORTED_MODULE_5__.serializeDictionary)(sid)}`]\n    ]),\n    sig\n  ];\n}\nvar Unqualified = class {\n  _raw;\n  constructor(raw) {\n    this._raw = raw;\n  }\n  get qb64() {\n    return encodeBase64Url(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(this._raw));\n  }\n  get qb64b() {\n    return b(this.qb64);\n  }\n};\nvar Inputage = class {\n  name;\n  fields;\n  created;\n  expires;\n  nonce;\n  alg;\n  keyid;\n  context;\n};\nfunction desiginput(value) {\n  const sid = (0,structured_headers__WEBPACK_IMPORTED_MODULE_5__.parseDictionary)(value);\n  const siginputs = new Array();\n  sid.forEach((value2, key) => {\n    const siginput2 = new Inputage();\n    siginput2.name = key;\n    let list;\n    let params;\n    [list, params] = value2;\n    siginput2.fields = list.map((item) => item[0]);\n    if (!params.has(\"created\")) {\n      throw new Error(\n        \"missing required `created` field from signature input\"\n      );\n    }\n    siginput2.created = params.get(\"created\");\n    if (params.has(\"expires\")) {\n      siginput2.expires = params.get(\"expires\");\n    }\n    if (params.has(\"nonce\")) {\n      siginput2.nonce = params.get(\"nonce\");\n    }\n    if (params.has(\"alg\")) {\n      siginput2.alg = params.get(\"alg\");\n    }\n    if (params.has(\"keyid\")) {\n      siginput2.keyid = params.get(\"keyid\");\n    }\n    if (params.has(\"context\")) {\n      siginput2.context = params.get(\"context\");\n    }\n    siginputs.push(siginput2);\n  });\n  return siginputs;\n}\nfunction parseRangeHeaders(header, typ) {\n  if (header !== null) {\n    const data = header.replace(`${typ} `, \"\");\n    const values = data.split(\"/\");\n    const rng = values[0].split(\"-\");\n    return {\n      start: parseInt(rng[0]),\n      end: parseInt(rng[1]),\n      total: parseInt(values[1])\n    };\n  } else {\n    return { start: 0, end: 0, total: 0 };\n  }\n}\n\n// src/keri/app/aiding.ts\nvar Identifier = class {\n  client;\n  /**\n   * Identifier\n   * @param {IdentifierDeps} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List managed identifiers\n   * @async\n   * @param {number} [start=0] Start index of list of notifications, defaults to 0\n   * @param {number} [end=24] End index of list of notifications, defaults to 24\n   * @returns {Promise<any>} A promise to the list of managed identifiers\n   */\n  async list(start = 0, end = 24) {\n    const extraHeaders = new Headers();\n    extraHeaders.append(\"Range\", `aids=${start}-${end}`);\n    const path = `/identifiers`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data, extraHeaders);\n    const cr = res.headers.get(\"content-range\");\n    const range2 = parseRangeHeaders(cr, \"aids\");\n    const aids = await res.json();\n    return {\n      start: range2.start,\n      end: range2.end,\n      total: range2.total,\n      aids\n    };\n  }\n  /**\n   * Get information for a managed identifier\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @returns {Promise<any>} A promise to the identifier information\n   */\n  async get(name) {\n    const path = `/identifiers/${encodeURIComponent(name)}`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Create a managed identifier\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {CreateIdentiferArgs} [kargs] Optional parameters to create the identifier\n   * @returns {EventResult} The inception result\n   */\n  async create(name, kargs = {}) {\n    const algo = kargs.algo == void 0 ? \"salty\" /* salty */ : kargs.algo;\n    const transferable = kargs.transferable ?? true;\n    const isith = kargs.isith ?? \"1\";\n    let nsith = kargs.nsith ?? \"1\";\n    let wits = kargs.wits ?? [];\n    const toad = kargs.toad ?? 0;\n    let dcode = kargs.dcode ?? MtrDex.Blake3_256;\n    const proxy = kargs.proxy;\n    const delpre = kargs.delpre;\n    const data = kargs.data != void 0 ? [kargs.data] : [];\n    const pre = kargs.pre;\n    const states = kargs.states;\n    const rstates = kargs.rstates;\n    const prxs = kargs.prxs;\n    const nxts = kargs.nxts;\n    const mhab = kargs.mhab;\n    const _keys = kargs.keys;\n    const _ndigs = kargs.ndigs;\n    const bran = kargs.bran;\n    const count = kargs.count;\n    let ncount = kargs.ncount;\n    const tier = kargs.tier;\n    const extern_type = kargs.extern_type;\n    const extern = kargs.extern;\n    if (!transferable) {\n      ncount = 0;\n      nsith = 0;\n      dcode = MtrDex.Ed25519N;\n    }\n    const xargs = {\n      transferable,\n      isith,\n      nsith,\n      wits,\n      toad,\n      proxy,\n      delpre,\n      dcode,\n      data,\n      algo,\n      pre,\n      prxs,\n      nxts,\n      mhab,\n      states,\n      rstates,\n      keys: _keys,\n      ndigs: _ndigs,\n      bran,\n      count,\n      ncount,\n      tier,\n      extern_type,\n      extern\n    };\n    const keeper = this.client.manager.new(algo, this.client.pidx, xargs);\n    const [keys, ndigs] = await keeper.incept(transferable);\n    wits = wits !== void 0 ? wits : [];\n    let serder = void 0;\n    if (delpre == void 0) {\n      serder = incept({\n        keys,\n        isith,\n        ndigs,\n        nsith,\n        toad,\n        wits,\n        cnfg: [],\n        data,\n        version: Versionage,\n        kind: \"JSON\" /* JSON */,\n        code: dcode,\n        intive: false\n      });\n    } else {\n      serder = incept({\n        keys,\n        isith,\n        ndigs,\n        nsith,\n        toad,\n        wits,\n        cnfg: [],\n        data,\n        version: Versionage,\n        kind: \"JSON\" /* JSON */,\n        code: dcode,\n        intive: false,\n        delpre\n      });\n    }\n    const sigs = await keeper.sign(b(serder.raw));\n    const jsondata = {\n      name,\n      icp: serder.ked,\n      sigs,\n      proxy,\n      smids: states != void 0 ? states.map((state) => state.i) : void 0,\n      rmids: rstates != void 0 ? rstates.map((state) => state.i) : void 0\n    };\n    jsondata[algo] = keeper.params();\n    this.client.pidx = this.client.pidx + 1;\n    const res = this.client.fetch(\"/identifiers\", \"POST\", jsondata);\n    return new EventResult(serder, sigs, res);\n  }\n  /**\n   * Generate an interaction event in a managed identifier\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {any} [data] Option data to be anchored in the interaction event\n   * @returns {Promise<EventResult>} A promise to the interaction event result\n   */\n  async interact(name, data) {\n    const hab = await this.get(name);\n    const pre = hab.prefix;\n    const state = hab.state;\n    const sn = parseInt(state.s, 16);\n    const dig = state.d;\n    data = Array.isArray(data) ? data : [data];\n    const serder = interact({\n      pre,\n      sn: sn + 1,\n      data,\n      dig,\n      version: void 0,\n      kind: void 0\n    });\n    const keeper = this.client.manager.get(hab);\n    const sigs = await keeper.sign(b(serder.raw));\n    const jsondata = {\n      ixn: serder.ked,\n      sigs\n    };\n    jsondata[keeper.algo] = keeper.params();\n    const res = await this.client.fetch(\n      \"/identifiers/\" + name + \"?type=ixn\",\n      \"PUT\",\n      jsondata\n    );\n    return new EventResult(serder, sigs, res);\n  }\n  /**\n   * Generate a rotation event in a managed identifier\n   * @param {string} name Name or alias of the identifier\n   * @param {RotateIdentifierArgs} [kargs] Optional parameters requiered to generate the rotation event\n   * @returns {Promise<EventResult>} A promise to the rotation event result\n   */\n  async rotate(name, kargs = {}) {\n    const transferable = kargs.transferable ?? true;\n    const ncode = kargs.ncode ?? MtrDex.Ed25519_Seed;\n    const ncount = kargs.ncount ?? 1;\n    const hab = await this.get(name);\n    const pre = hab.prefix;\n    const delegated = hab.state.di !== \"\";\n    const state = hab.state;\n    const count = state.k.length;\n    const dig = state.d;\n    const ridx = parseInt(state.s, 16) + 1;\n    const wits = state.b;\n    let isith = state.nt;\n    let nsith = kargs.nsith ?? isith;\n    if (isith == void 0)\n      isith = `${Math.max(1, Math.ceil(count / 2)).toString(16)}`;\n    if (nsith == void 0)\n      nsith = `${Math.max(1, Math.ceil(ncount / 2)).toString(16)}`;\n    const cst = new Tholder({ sith: isith }).sith;\n    const nst = new Tholder({ sith: nsith }).sith;\n    const keeper = this.client.manager.get(hab);\n    const ncodes = kargs.ncodes ?? new Array(ncount).fill(ncode);\n    const states = kargs.states == void 0 ? [] : kargs.states;\n    const rstates = kargs.rstates == void 0 ? [] : kargs.rstates;\n    const [keys, ndigs] = await keeper.rotate(\n      ncodes,\n      transferable,\n      states,\n      rstates\n    );\n    const cuts = kargs.cuts ?? [];\n    const adds = kargs.adds ?? [];\n    const data = kargs.data != void 0 ? [kargs.data] : [];\n    const toad = kargs.toad;\n    const ilk = delegated ? Ilks.drt : Ilks.rot;\n    const serder = rotate({\n      pre,\n      ilk,\n      keys,\n      dig,\n      sn: ridx,\n      isith: cst,\n      nsith: nst,\n      ndigs,\n      toad,\n      wits,\n      cuts,\n      adds,\n      data\n    });\n    const sigs = await keeper.sign(b(serder.raw));\n    const jsondata = {\n      rot: serder.ked,\n      sigs,\n      smids: states != void 0 ? states.map((state2) => state2.i) : void 0,\n      rmids: rstates != void 0 ? rstates.map((state2) => state2.i) : void 0\n    };\n    jsondata[keeper.algo] = keeper.params();\n    const res = await this.client.fetch(\n      \"/identifiers/\" + name,\n      \"PUT\",\n      jsondata\n    );\n    return new EventResult(serder, sigs, res);\n  }\n  /**\n   * Authorize an endpoint provider in a given role for a managed identifier\n   * @remarks\n   * Typically used to authorize the agent to be the endpoint provider for the identifier in the role of `agent`\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} role Authorized role for eid\n   * @param {string} [eid] Optional qb64 of endpoint provider to be authorized\n   * @param {string} [stamp=now] Optional date-time-stamp RFC-3339 profile of iso8601 datetime. Now is the default if not provided\n   * @returns {Promise<EventResult>} A promise to the result of the authorization\n   */\n  async addEndRole(name, role, eid, stamp) {\n    const hab = await this.get(name);\n    const pre = hab.prefix;\n    const rpy = this.makeEndRole(pre, role, eid, stamp);\n    const keeper = this.client.manager.get(hab);\n    const sigs = await keeper.sign(b(rpy.raw));\n    const jsondata = {\n      rpy: rpy.ked,\n      sigs\n    };\n    const res = this.client.fetch(\n      \"/identifiers/\" + name + \"/endroles\",\n      \"POST\",\n      jsondata\n    );\n    return new EventResult(rpy, sigs, res);\n  }\n  /**\n   * Generate an /end/role/add reply message\n   * @param {string} pre Prefix of the identifier\n   * @param {string} role Authorized role for eid\n   * @param {string} [eid] Optional qb64 of endpoint provider to be authorized\n   * @param {string} [stamp=now] Optional date-time-stamp RFC-3339 profile of iso8601 datetime. Now is the default if not provided\n   * @returns {Serder} The reply message\n   */\n  makeEndRole(pre, role, eid, stamp) {\n    const data = {\n      cid: pre,\n      role\n    };\n    if (eid != void 0) {\n      data.eid = eid;\n    }\n    const route = \"/end/role/add\";\n    return reply(route, data, stamp, void 0, \"JSON\" /* JSON */);\n  }\n  /**\n   * Get the members of a group identifier\n   * @async\n   * @param {string} name - Name or alias of the identifier\n   * @returns {Promise<any>} - A promise to the list of members\n   */\n  async members(name) {\n    const res = await this.client.fetch(\n      \"/identifiers/\" + name + \"/members\",\n      \"GET\",\n      void 0\n    );\n    return await res.json();\n  }\n};\nvar EventResult = class {\n  _serder;\n  _sigs;\n  promise;\n  constructor(serder, sigs, promise) {\n    this._serder = serder;\n    this._sigs = sigs;\n    this.promise = promise;\n  }\n  get serder() {\n    return this._serder;\n  }\n  get sigs() {\n    return this._sigs;\n  }\n  async op() {\n    const res = await this.promise;\n    return await res.json();\n  }\n};\n\n// src/keri/end/ending.ts\nvar FALSY = [false, 0, \"?0\", \"no\", \"false\", \"False\", \"off\"];\nvar TRUTHY = [true, 1, \"?1\", \"yes\", \"true\", \"True\", \"on\"];\nvar Signage = class {\n  constructor(markers, indexed, signer, ordinal, digest, kind) {\n    this.markers = markers;\n    this.indexed = indexed;\n    this.signer = signer;\n    this.ordinal = ordinal;\n    this.digest = digest;\n    this.kind = kind;\n  }\n  markers;\n  indexed = false;\n  signer;\n  ordinal;\n  digest;\n  kind;\n};\nfunction signature(signages) {\n  const values = new Array();\n  for (const signage of signages) {\n    let markers;\n    let indexed = signage.indexed;\n    const signer = signage.signer;\n    const ordinal = signage.ordinal;\n    const digest = signage.digest;\n    const kind = signage.kind;\n    let tags;\n    if (signage.markers instanceof Map) {\n      tags = Array.from(signage.markers.keys());\n      markers = Array.from(signage.markers.values());\n    } else {\n      markers = signage.markers;\n      tags = new Array();\n    }\n    if (indexed == void 0) {\n      indexed = markers[0] instanceof Siger;\n    }\n    const items = new Array();\n    const tag = \"indexed\";\n    let val = indexed ? \"?1\" : \"?0\";\n    items.push(`${tag}=\"${val}\"`);\n    if (signer != void 0) {\n      items.push(`signer=\"${signer}\"`);\n    }\n    if (ordinal != void 0) {\n      items.push(`ordinal=\"${ordinal}\"`);\n    }\n    if (digest != void 0) {\n      items.push(`digest=\"${digest}\"`);\n    }\n    if (kind != void 0) {\n      items.push(`kind=\"${kind}\"`);\n    }\n    markers.forEach((marker, idx) => {\n      let tag2;\n      if (tags != void 0 && tags.length > idx) {\n        tag2 = tags[idx];\n      } else if (marker instanceof Siger) {\n        if (!indexed)\n          throw new Error(\n            `Indexed signature marker ${marker} when indexed False.`\n          );\n        tag2 = marker.index.toString();\n      } else {\n        if (indexed)\n          throw new Error(\n            `Unindexed signature marker ${marker} when indexed True.`\n          );\n        tag2 = marker.verfer.qb64;\n      }\n      val = marker.qb64;\n      items.push(`${tag2}=\"${val}\"`);\n    });\n    values.push(items.join(\";\"));\n  }\n  return new Headers([[\"Signature\", values.join(\",\")]]);\n}\nfunction designature(value) {\n  const values = value.replace(\" \", \"\").split(\",\");\n  const signages = new Array();\n  values.forEach((val) => {\n    const dict = /* @__PURE__ */ new Map();\n    val.split(\";\").forEach((v) => {\n      const splits = v.split(\"=\", 2);\n      dict.set(splits[0], splits[1].replaceAll('\"', \"\"));\n    });\n    if (!dict.has(\"indexed\")) {\n      throw new Error(\n        \"Missing indexed field in Signature header signage.\"\n      );\n    }\n    const item = dict.get(\"indexed\");\n    const indexed = !FALSY.includes(item);\n    dict.delete(\"indexed\");\n    let signer;\n    if (dict.has(\"signer\")) {\n      signer = dict.get(\"signer\");\n      dict.delete(\"signer\");\n    }\n    let ordinal;\n    if (dict.has(\"ordinal\")) {\n      ordinal = dict.get(\"ordinal\");\n      dict.delete(\"ordinal\");\n    }\n    let digest;\n    if (dict.has(\"digest\")) {\n      digest = dict.get(\"digest\");\n      dict.delete(\"digest\");\n    }\n    let kind;\n    if (dict.has(\"kind\")) {\n      kind = dict.get(\"kind\");\n      dict.delete(\"kind\");\n    } else {\n      kind = \"CESR\";\n    }\n    let markers;\n    if (kind == \"CESR\") {\n      markers = /* @__PURE__ */ new Map();\n      dict.forEach((val2, key) => {\n        if (indexed) {\n          markers.set(key, new Siger({ qb64: val2 }));\n        } else {\n          markers.set(key, new Cigar({ qb64: val2 }));\n        }\n      });\n    } else {\n      markers = dict;\n    }\n    signages.push(\n      new Signage(markers, indexed, signer, ordinal, digest, kind)\n    );\n  });\n  return signages;\n}\n\n// src/keri/core/authing.ts\nvar Authenticater = class _Authenticater {\n  static DefaultFields = [\n    \"@method\",\n    \"@path\",\n    \"signify-resource\",\n    HEADER_SIG_TIME.toLowerCase()\n  ];\n  _verfer;\n  _csig;\n  constructor(csig, verfer) {\n    this._csig = csig;\n    this._verfer = verfer;\n  }\n  verify(headers, method, path) {\n    const siginput2 = headers.get(HEADER_SIG_INPUT);\n    if (siginput2 == null) {\n      return false;\n    }\n    const signature2 = headers.get(\"Signature\");\n    if (signature2 == null) {\n      return false;\n    }\n    let inputs = desiginput(siginput2);\n    inputs = inputs.filter((input) => input.name == \"signify\");\n    if (inputs.length == 0) {\n      return false;\n    }\n    inputs.forEach((input) => {\n      const items = new Array();\n      input.fields.forEach((field) => {\n        if (field.startsWith(\"@\")) {\n          if (field == \"@method\") {\n            items.push(`\"${field}\": ${method}`);\n          } else if (field == \"@path\") {\n            items.push(`\"${field}\": ${path}`);\n          }\n        } else {\n          if (headers.has(field)) {\n            const value = normalize(headers.get(field));\n            items.push(`\"${field}\": ${value}`);\n          }\n        }\n      });\n      const values = new Array();\n      values.push(`(${input.fields.join(\" \")})`);\n      values.push(`created=${input.created}`);\n      if (input.expires != void 0) {\n        values.push(`expires=${input.expires}`);\n      }\n      if (input.nonce != void 0) {\n        values.push(`nonce=${input.nonce}`);\n      }\n      if (input.keyid != void 0) {\n        values.push(`keyid=${input.keyid}`);\n      }\n      if (input.context != void 0) {\n        values.push(`context=${input.context}`);\n      }\n      if (input.alg != void 0) {\n        values.push(`alg=${input.alg}`);\n      }\n      const params = values.join(\";\");\n      items.push(`\"@signature-params: ${params}\"`);\n      const ser = items.join(\"\\n\");\n      const signage = designature(signature2);\n      const cig = signage[0].markers.get(input.name);\n      if (!this._verfer.verify(cig.raw, ser)) {\n        throw new Error(`Signature for ${input.keyid} invalid.`);\n      }\n    });\n    return true;\n  }\n  sign(headers, method, path, fields) {\n    if (fields == void 0) {\n      fields = _Authenticater.DefaultFields;\n    }\n    const [header, sig] = siginput(this._csig, {\n      name: \"signify\",\n      method,\n      path,\n      headers,\n      fields,\n      alg: \"ed25519\",\n      keyid: this._csig.verfer.qb64\n    });\n    header.forEach((value, key) => {\n      headers.append(key, value);\n    });\n    const markers = /* @__PURE__ */ new Map();\n    markers.set(\"signify\", sig);\n    const signage = new Signage(markers, false);\n    const signed = signature([signage]);\n    signed.forEach((value, key) => {\n      headers.append(key, value);\n    });\n    return headers;\n  }\n};\n\n// src/keri/core/keeping.ts\nvar KeyManager = class {\n  constructor(salter, externalModules = []) {\n    this.salter = salter;\n    this.salter = salter;\n    for (const mod of externalModules) {\n      this.modules[mod.type] = mod.module;\n    }\n  }\n  modules = {};\n  new(algo, pidx, kargs) {\n    switch (algo) {\n      case \"salty\" /* salty */:\n        return new SaltyKeeper(\n          this.salter,\n          pidx,\n          kargs[\"kidx\"],\n          kargs[\"tier\"],\n          kargs[\"transferable\"],\n          kargs[\"stem\"],\n          kargs[\"code\"],\n          kargs[\"count\"],\n          kargs[\"icodes\"],\n          kargs[\"ncode\"],\n          kargs[\"ncount\"],\n          kargs[\"ncodes\"],\n          kargs[\"dcode\"],\n          kargs[\"bran\"],\n          kargs[\"sxlt\"]\n        );\n      case \"randy\" /* randy */:\n        return new RandyKeeper(\n          this.salter,\n          kargs[\"code\"],\n          kargs[\"count\"],\n          kargs[\"icodes\"],\n          kargs[\"transferable\"],\n          kargs[\"ncode\"],\n          kargs[\"ncount\"],\n          kargs[\"ncodes\"],\n          kargs[\"dcode\"],\n          kargs[\"prxs\"],\n          kargs[\"nxts\"]\n        );\n      case \"group\" /* group */:\n        return new GroupKeeper(\n          this,\n          kargs[\"mhab\"],\n          kargs[\"states\"],\n          kargs[\"rstates\"],\n          kargs[\"keys\"],\n          kargs[\"ndigs\"]\n        );\n      case \"extern\" /* extern */: {\n        const ModuleConstructor = this.modules[kargs.extern_type];\n        if (!ModuleConstructor) {\n          throw new Error(\n            `unsupported external module type ${kargs.extern_type}`\n          );\n        }\n        return new ModuleConstructor(pidx, kargs);\n      }\n      default:\n        throw new Error(\"Unknown algo\");\n    }\n  }\n  get(aid) {\n    if (aid[\"salty\" /* salty */]) {\n      const kargs = aid[\"salty\" /* salty */];\n      return new SaltyKeeper(\n        this.salter,\n        kargs[\"pidx\"],\n        kargs[\"kidx\"],\n        kargs[\"tier\"],\n        kargs[\"transferable\"],\n        kargs[\"stem\"],\n        void 0,\n        void 0,\n        kargs[\"icodes\"],\n        void 0,\n        void 0,\n        kargs[\"ncodes\"],\n        kargs[\"dcode\"],\n        void 0,\n        kargs[\"sxlt\"]\n      );\n    } else if (aid[\"randy\" /* randy */]) {\n      const pre = new Prefixer({ qb64: aid[\"prefix\"] });\n      const kargs = aid[\"randy\" /* randy */];\n      return new RandyKeeper(\n        this.salter,\n        void 0,\n        void 0,\n        void 0,\n        pre.transferable,\n        void 0,\n        void 0,\n        [],\n        void 0,\n        kargs[\"prxs\"],\n        kargs[\"nxts\"]\n      );\n    } else if (aid[\"group\" /* group */]) {\n      const kargs = aid[\"group\" /* group */];\n      return new GroupKeeper(\n        this,\n        kargs[\"mhab\"],\n        void 0,\n        void 0,\n        kargs[\"keys\"],\n        kargs[\"ndigs\"]\n      );\n    } else if (aid[\"extern\" /* extern */]) {\n      const kargs = aid[\"extern\" /* extern */];\n      const typ = kargs.extern_type;\n      if (typ in this.modules) {\n        const mod = new this.modules[typ](kargs[\"pidx\"], kargs);\n        return mod;\n      } else {\n        throw new Error(`unsupported external module type ${typ}`);\n      }\n    } else {\n      throw new Error(`Algo not allowed yet`);\n    }\n  }\n};\nvar SaltyKeeper = class {\n  aeid;\n  encrypter;\n  decrypter;\n  salter;\n  pidx;\n  kidx;\n  tier;\n  transferable;\n  stem;\n  code;\n  count;\n  icodes;\n  ncode;\n  ncount;\n  ncodes;\n  dcode;\n  sxlt;\n  bran;\n  creator;\n  algo = \"salty\" /* salty */;\n  signers;\n  constructor(salter, pidx, kidx = 0, tier = \"low\" /* low */, transferable = false, stem = void 0, code = MtrDex.Ed25519_Seed, count = 1, icodes = void 0, ncode = MtrDex.Ed25519_Seed, ncount = 1, ncodes = void 0, dcode = MtrDex.Blake3_256, bran = void 0, sxlt = void 0) {\n    this.salter = salter;\n    const signer = this.salter.signer(void 0, transferable = false);\n    this.aeid = signer.verfer.qb64;\n    this.encrypter = new Encrypter({}, b(this.aeid));\n    this.decrypter = new Decrypter({}, signer.qb64b);\n    this.code = code;\n    this.ncode = ncode;\n    this.tier = tier;\n    this.icodes = icodes == void 0 ? new Array(count).fill(code) : icodes;\n    this.ncodes = ncodes == void 0 ? new Array(ncount).fill(ncode) : ncodes;\n    this.dcode = dcode;\n    this.pidx = pidx;\n    this.kidx = kidx;\n    this.transferable = transferable;\n    this.count = count;\n    this.ncount = ncount;\n    this.stem = stem == void 0 ? \"signify:aid\" : stem;\n    if (bran != void 0) {\n      this.bran = MtrDex.Salt_128 + \"A\" + bran.slice(0, 21);\n      this.creator = new SaltyCreator(this.bran, this.tier, this.stem);\n      this.sxlt = this.encrypter.encrypt(b(this.creator.salt)).qb64;\n    } else if (sxlt == void 0) {\n      this.creator = new SaltyCreator(void 0, this.tier, this.stem);\n      this.sxlt = this.encrypter.encrypt(b(this.creator.salt)).qb64;\n    } else {\n      this.sxlt = sxlt;\n      const ciph = new Cipher({ qb64: this.sxlt });\n      this.creator = new SaltyCreator(\n        this.decrypter.decrypt(null, ciph).qb64,\n        tier,\n        this.stem\n      );\n    }\n    this.signers = this.creator.create(\n      this.icodes,\n      this.ncount,\n      this.ncode,\n      this.transferable,\n      this.pidx,\n      0,\n      this.kidx,\n      false\n    ).signers;\n  }\n  params() {\n    return {\n      sxlt: this.sxlt,\n      pidx: this.pidx,\n      kidx: this.kidx,\n      stem: this.stem,\n      tier: this.tier,\n      icodes: this.icodes,\n      ncodes: this.ncodes,\n      dcode: this.dcode,\n      transferable: this.transferable\n    };\n  }\n  async incept(transferable) {\n    this.transferable = transferable;\n    this.kidx = 0;\n    const signers = this.creator.create(\n      this.icodes,\n      this.count,\n      this.code,\n      this.transferable,\n      this.pidx,\n      0,\n      this.kidx,\n      false\n    );\n    const verfers = signers.signers.map((signer) => signer.verfer.qb64);\n    const nsigners = this.creator.create(\n      this.ncodes,\n      this.ncount,\n      this.ncode,\n      this.transferable,\n      this.pidx,\n      0,\n      this.icodes?.length,\n      false\n    );\n    const digers = nsigners.signers.map(\n      (nsigner) => new Diger({ code: this.dcode }, nsigner.verfer.qb64b).qb64\n    );\n    return [verfers, digers];\n  }\n  async rotate(ncodes, transferable) {\n    this.ncodes = ncodes;\n    this.transferable = transferable;\n    const signers = this.creator.create(\n      this.ncodes,\n      this.ncount,\n      this.ncode,\n      this.transferable,\n      this.pidx,\n      0,\n      this.kidx + this.icodes.length,\n      false\n    );\n    const verfers = signers.signers.map((signer) => signer.verfer.qb64);\n    this.kidx = this.kidx + this.icodes.length;\n    const nsigners = this.creator.create(\n      this.ncodes,\n      this.ncount,\n      this.ncode,\n      this.transferable,\n      this.pidx,\n      0,\n      this.kidx + this.icodes.length,\n      false\n    );\n    const digers = nsigners.signers.map(\n      (nsigner) => new Diger({ code: this.dcode }, nsigner.verfer.qb64b).qb64\n    );\n    return [verfers, digers];\n  }\n  async sign(ser, indexed = true, indices = void 0, ondices = void 0) {\n    const signers = this.creator.create(\n      this.icodes,\n      this.ncount,\n      this.ncode,\n      this.transferable,\n      this.pidx,\n      0,\n      this.kidx,\n      false\n    );\n    if (indexed) {\n      const sigers = [];\n      let i = 0;\n      for (const [j, signer] of signers.signers.entries()) {\n        if (indices != void 0) {\n          i = indices[j];\n          if (typeof i != \"number\" || i < 0) {\n            throw new Error(\n              `Invalid signing index = ${i}, not whole number.`\n            );\n          }\n        } else {\n          i = j;\n        }\n        let o = 0;\n        if (ondices != void 0) {\n          o = ondices[j];\n          if (o == void 0 || typeof o == \"number\" && typeof o != \"number\" && o >= 0) {\n            throw new Error(\n              `Invalid ondex = ${o}, not whole number.`\n            );\n          }\n        } else {\n          o = i;\n        }\n        sigers.push(\n          signer.sign(ser, i, o == void 0 ? true : false, o)\n        );\n      }\n      return sigers.map((siger) => siger.qb64);\n    } else {\n      const cigars = [];\n      for (const [, signer] of signers.signers.entries()) {\n        cigars.push(signer.sign(ser));\n      }\n      return cigars.map((cigar) => cigar.qb64);\n    }\n  }\n};\nvar RandyKeeper = class {\n  salter;\n  code;\n  count;\n  icodes;\n  transferable;\n  ncount;\n  ncodes;\n  ncode;\n  dcode;\n  prxs;\n  nxts;\n  aeid;\n  encrypter;\n  decrypter;\n  creator;\n  algo = \"randy\" /* randy */;\n  signers;\n  constructor(salter, code = MtrDex.Ed25519_Seed, count = 1, icodes = void 0, transferable = false, ncode = MtrDex.Ed25519_Seed, ncount = 1, ncodes, dcode = MtrDex.Blake3_256, prxs = void 0, nxts = void 0) {\n    this.salter = salter;\n    this.icodes = icodes == void 0 ? new Array(count).fill(code) : icodes;\n    this.ncodes = ncodes == void 0 ? new Array(ncount).fill(ncode) : ncodes;\n    this.code = code;\n    this.ncode = ncode;\n    this.count = count;\n    this.ncount = ncount;\n    const signer = this.salter.signer(void 0, transferable = false);\n    this.aeid = signer.verfer.qb64;\n    this.encrypter = new Encrypter({}, b(this.aeid));\n    this.decrypter = new Decrypter({}, signer.qb64b);\n    this.nxts = nxts ?? [];\n    this.prxs = prxs ?? [];\n    this.transferable = transferable;\n    this.icodes = icodes;\n    this.ncodes = ncodes;\n    this.dcode = dcode;\n    this.creator = new RandyCreator();\n    this.signers = this.prxs.map(\n      (prx) => this.decrypter.decrypt(\n        new Cipher({ qb64: prx }).qb64b,\n        void 0,\n        this.transferable\n      )\n    );\n  }\n  params() {\n    return {\n      nxts: this.nxts,\n      prxs: this.prxs,\n      transferable: this.transferable\n    };\n  }\n  async incept(transferable) {\n    this.transferable = transferable;\n    const signers = this.creator.create(\n      this.icodes,\n      this.count,\n      this.code,\n      this.transferable\n    );\n    this.prxs = signers.signers.map(\n      (signer) => this.encrypter.encrypt(void 0, signer).qb64\n    );\n    const verfers = signers.signers.map((signer) => signer.verfer.qb64);\n    const nsigners = this.creator.create(\n      this.ncodes,\n      this.ncount,\n      this.ncode,\n      this.transferable\n    );\n    this.nxts = nsigners.signers.map(\n      (signer) => this.encrypter.encrypt(void 0, signer).qb64\n    );\n    const digers = nsigners.signers.map(\n      (nsigner) => new Diger({ code: this.dcode }, nsigner.verfer.qb64b).qb64\n    );\n    return [verfers, digers];\n  }\n  async rotate(ncodes, transferable) {\n    this.ncodes = ncodes;\n    this.transferable = transferable;\n    this.prxs = this.nxts;\n    const signers = this.nxts.map(\n      (nxt) => this.decrypter.decrypt(\n        void 0,\n        new Cipher({ qb64: nxt }),\n        this.transferable\n      )\n    );\n    const verfers = signers.map((signer) => signer.verfer.qb64);\n    const nsigners = this.creator.create(\n      this.ncodes,\n      this.ncount,\n      this.ncode,\n      this.transferable\n    );\n    this.nxts = nsigners.signers.map(\n      (signer) => this.encrypter.encrypt(void 0, signer).qb64\n    );\n    const digers = nsigners.signers.map(\n      (nsigner) => new Diger({ code: this.dcode }, nsigner.verfer.qb64b).qb64\n    );\n    return [verfers, digers];\n  }\n  async sign(ser, indexed = true, indices = void 0, ondices = void 0) {\n    const signers = this.prxs.map(\n      (prx) => this.decrypter.decrypt(\n        new Cipher({ qb64: prx }).qb64b,\n        void 0,\n        this.transferable\n      )\n    );\n    if (indexed) {\n      const sigers = [];\n      let i = 0;\n      for (const [j, signer] of signers.entries()) {\n        if (indices != void 0) {\n          i = indices[j];\n          if (typeof i != \"number\" || i < 0) {\n            throw new Error(\n              `Invalid signing index = ${i}, not whole number.`\n            );\n          }\n        } else {\n          i = j;\n        }\n        let o = 0;\n        if (ondices != void 0) {\n          o = ondices[j];\n          if (o == void 0 || typeof o == \"number\" && typeof o != \"number\" && o >= 0) {\n            throw new Error(\n              `Invalid ondex = ${o}, not whole number.`\n            );\n          }\n        } else {\n          o = i;\n        }\n        sigers.push(\n          signer.sign(ser, i, o == void 0 ? true : false, o)\n        );\n      }\n      return sigers.map((siger) => siger.qb64);\n    } else {\n      const cigars = [];\n      for (const [, signer] of signers.entries()) {\n        cigars.push(signer.sign(ser));\n      }\n      return cigars.map((cigar) => cigar.qb64);\n    }\n  }\n};\nvar GroupKeeper = class {\n  manager;\n  mhab;\n  gkeys = [];\n  gdigs = [];\n  algo = \"group\" /* group */;\n  signers;\n  constructor(manager, mhab, states = void 0, rstates = void 0, keys = [], ndigs = []) {\n    this.manager = manager;\n    if (states != void 0) {\n      keys = states.map((state) => state[\"k\"][0]);\n    }\n    if (rstates != void 0) {\n      ndigs = rstates.map((state) => state[\"n\"][0]);\n    }\n    this.gkeys = states?.map((state) => state[\"k\"][0]) ?? keys;\n    this.gdigs = rstates?.map((state) => state[\"n\"][0]) ?? ndigs;\n    this.mhab = mhab;\n    this.signers = [];\n  }\n  async incept() {\n    return [this.gkeys, this.gdigs];\n  }\n  async rotate(_ncodes, _transferable, states, rstates) {\n    this.gkeys = states.map((state) => state[\"k\"][0]);\n    this.gdigs = rstates.map((state) => state[\"n\"][0]);\n    return [this.gkeys, this.gdigs];\n  }\n  async sign(ser, indexed = true) {\n    if (!this.mhab.state) {\n      throw new Error(`No state in mhab`);\n    }\n    const key = this.mhab[\"state\"][\"k\"][0];\n    const ndig = this.mhab[\"state\"][\"n\"][0];\n    const csi = this.gkeys.indexOf(key);\n    const pni = this.gdigs.indexOf(ndig);\n    const mkeeper = this.manager.get(this.mhab);\n    return await mkeeper.sign(ser, indexed, [csi], [pni]);\n  }\n  params() {\n    return {\n      mhab: this.mhab,\n      keys: this.gkeys,\n      ndigs: this.gdigs\n    };\n  }\n};\n\n// src/keri/app/contacting.ts\nvar Contacts = class {\n  client;\n  /**\n   * Contacts\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List contacts\n   * @async\n   * @param {string} [group] Optional group name to filter contacts\n   * @param {string} [filterField] Optional field name to filter contacts\n   * @param {string} [filterValue] Optional field value to filter contacts\n   * @returns {Promise<any>} A promise to the list of contacts\n   */\n  async list(group, filterField, filterValue) {\n    const params = new URLSearchParams();\n    if (group !== void 0) {\n      params.append(\"group\", group);\n    }\n    if (filterField !== void 0 && filterValue !== void 0) {\n      params.append(\"filter_field\", filterField);\n      params.append(\"filter_value\", filterValue);\n    }\n    const path = `/contacts?` + params.toString();\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * Get a contact\n   * @async\n   * @param {string} pre Prefix of the contact\n   * @returns {Promise<any>} A promise to the contact\n   */\n  async get(pre) {\n    const path = `/contacts/` + pre;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * Add a contact\n   * @async\n   * @param {string} pre Prefix of the contact\n   * @param {any} info Information about the contact\n   * @returns {Promise<any>} A promise to the result of the addition\n   */\n  async add(pre, info) {\n    const path = `/contacts/` + pre;\n    const method = \"POST\";\n    const res = await this.client.fetch(path, method, info);\n    return await res.json();\n  }\n  /**\n   * Delete a contact\n   * @async\n   * @param {string} pre Prefix of the contact\n   * @returns {Promise<void>}\n   */\n  async delete(pre) {\n    const path = `/contacts/` + pre;\n    const method = \"DELETE\";\n    await this.client.fetch(path, method, null);\n  }\n  /**\n   * Update a contact\n   * @async\n   * @param {string} pre Prefix of the contact\n   * @param {any} info Updated information about the contact\n   * @returns {Promise<any>} A promise to the result of the update\n   */\n  async update(pre, info) {\n    const path = `/contacts/` + pre;\n    const method = \"PUT\";\n    const res = await this.client.fetch(path, method, info);\n    return await res.json();\n  }\n};\nvar Challenges = class {\n  client;\n  /**\n   * Challenges\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Generate a random challenge word list based on BIP39\n   * @async\n   * @param {number} strength Integer representing the strength of the challenge. Typically 128 or 256\n   * @returns {Promise<any>} A promise to the list of random words\n   */\n  async generate(strength = 128) {\n    const path = `/challenges?strength=${strength.toString()}`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * Respond to a challenge by signing a message with the list of words\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} recipient Prefix of the recipient of the response\n   * @param {Array<string>} words List of words to embed in the signed response\n   * @returns {Promise<Response>} A promise to the result of the response\n   */\n  async respond(name, recipient, words) {\n    const hab = await this.client.identifiers().get(name);\n    const exchanges = this.client.exchanges();\n    const resp = await exchanges.send(\n      name,\n      \"challenge\",\n      hab,\n      \"/challenge/response\",\n      { words },\n      {},\n      [recipient]\n    );\n    return resp;\n  }\n  /**\n   * Ask Agent to verify a given sender signed the provided words\n   * @param {string} source Prefix of the identifier that was challenged\n   * @param {Array<string>} words List of challenge words to check for\n   * @returns A promise to the long running operation\n   */\n  async verify(source, words) {\n    const path = `/challenges_verify/${source}`;\n    const method = \"POST\";\n    const data = {\n      words\n    };\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Mark challenge response as signed and accepted\n   * @param {string} source Prefix of the identifier that was challenged\n   * @param {string} said qb64 AID of exn message representing the signed response\n   * @returns {Promise<Response>} A promise to the result\n   */\n  async responded(source, said) {\n    const path = `/challenges_verify/${source}`;\n    const method = \"PUT\";\n    const data = {\n      said\n    };\n    const res = await this.client.fetch(path, method, data);\n    return res;\n  }\n};\n\n// src/keri/app/coring.ts\n\nfunction randomPasscode() {\n  const raw = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.randombytes_buf(16);\n  const salter = new Salter({ raw });\n  return salter.qb64.substring(2, 23);\n}\nfunction randomNonce() {\n  const seed = libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.randombytes_buf(libsodium_wrappers_sumo__WEBPACK_IMPORTED_MODULE_0__.crypto_sign_SEEDBYTES);\n  const seedqb64 = new Matter({ raw: seed, code: MtrDex.Ed25519_Seed });\n  return seedqb64.qb64;\n}\nvar Oobis = class {\n  client;\n  /**\n   * Oobis\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get the OOBI(s) for a managed indentifier for a given role\n   * @param {string} name Name or alias of the identifier\n   * @param {string} role Authorized role\n   * @returns {Promise<any>} A promise to the OOBI(s)\n   */\n  async get(name, role = \"agent\") {\n    const path = `/identifiers/${name}/oobis?role=${role}`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * Resolve an OOBI\n   * @async\n   * @param {string} oobi The OOBI to be resolver\n   * @param {string} [alias] Optional name or alias to link the OOBI resolution to a contact\n   * @returns {Promise<any>} A promise to the long-running operation\n   */\n  async resolve(oobi, alias) {\n    const path = `/oobis`;\n    const data = {\n      url: oobi\n    };\n    if (alias !== void 0) {\n      data.oobialias = alias;\n    }\n    const method = \"POST\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n};\nvar Operations = class {\n  client;\n  /**\n   * Operations\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get operation status\n   * @async\n   * @param {string} name Name of the operation\n   * @returns {Promise<Operation>} A promise to the status of the operation\n   */\n  async get(name) {\n    const path = `/operations/${name}`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * List operations\n   * @async\n   * @param {string} type Select operations by type\n   * @returns {Promise<Operation[]>} A list of operations\n   */\n  async list(type) {\n    const params = new URLSearchParams();\n    if (type !== void 0) {\n      params.append(\"type\", type);\n    }\n    const path = `/operations?${params.toString()}`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Delete operation\n   * @async\n   * @param {string} name Name of the operation\n   */\n  async delete(name) {\n    const path = `/operations/${name}`;\n    const data = null;\n    const method = \"DELETE\";\n    await this.client.fetch(path, method, data);\n  }\n  /**\n   * Poll for operation to become completed.\n   */\n  async wait(op, options = {}) {\n    const minSleep = options.minSleep ?? 10;\n    const maxSleep = options.maxSleep ?? 1e4;\n    const increaseFactor = options.increaseFactor ?? 50;\n    if (op.metadata?.depends?.done === false) {\n      await this.wait(op.metadata.depends, options);\n    }\n    if (op.done === true) {\n      return op;\n    }\n    let retries = 0;\n    while (true) {\n      op = await this.get(op.name);\n      const delay = Math.max(\n        minSleep,\n        Math.min(maxSleep, 2 ** retries * increaseFactor)\n      );\n      retries++;\n      if (op.done === true) {\n        return op;\n      }\n      await new Promise((resolve) => setTimeout(resolve, delay));\n      options.signal?.throwIfAborted();\n    }\n  }\n};\nvar KeyEvents = class {\n  client;\n  /**\n   * KeyEvents\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Retrieve key events for an identifier\n   * @async\n   * @param {string} pre Identifier prefix\n   * @returns {Promise<any>} A promise to the key events\n   */\n  async get(pre) {\n    const path = `/events?pre=${pre}`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n};\nvar KeyStates = class {\n  client;\n  /**\n   * KeyStates\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Retriene the key state for an identifier\n   * @async\n   * @param {string} pre Identifier prefix\n   * @returns {Promise<any>} A promise to the key states\n   */\n  async get(pre) {\n    const path = `/states?pre=${pre}`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Retrieve the key state for a list of identifiers\n   * @async\n   * @param {Array<string>} pres List of identifier prefixes\n   * @returns {Promise<any>} A promise to the key states\n   */\n  async list(pres) {\n    const path = `/states?${pres.map((pre) => `pre=${pre}`).join(\"&\")}`;\n    const data = null;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Query the key state of an identifier for a given sequence number or anchor\n   * @async\n   * @param {string} pre Identifier prefix\n   * @param {number} [sn] Optional sequence number\n   * @param {any} [anchor] Optional anchor\n   * @returns {Promise<any>} A promise to the long-running operation\n   */\n  async query(pre, sn, anchor) {\n    const path = `/queries`;\n    const data = {\n      pre\n    };\n    if (sn !== void 0) {\n      data.sn = sn;\n    }\n    if (anchor !== void 0) {\n      data.anchor = anchor;\n    }\n    const method = \"POST\";\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n};\n\n// src/keri/core/vdring.ts\nvar vdr;\n((vdr2) => {\n  function incept2({\n    pre,\n    toad,\n    nonce = randomNonce(),\n    baks = [],\n    cnfg = [],\n    version = Versionage,\n    kind = \"JSON\" /* JSON */,\n    code = MtrDex.Blake3_256\n  }) {\n    const vs = versify(\"KERI\" /* KERI */, version, kind, 0);\n    const isn = 0;\n    const ilk = Ilks.vcp;\n    if (cnfg.includes(TraitDex.NoBackers) && baks.length > 0) {\n      throw new Error(\n        `${baks.length} backers specified for NB vcp, 0 allowed`\n      );\n    }\n    if (new Set(baks).size < baks.length) {\n      throw new Error(`Invalid baks ${baks} has duplicates`);\n    }\n    let _toad;\n    if (toad === void 0) {\n      if (baks.length === 0) {\n        _toad = 0;\n      } else {\n        _toad = ample(baks.length);\n      }\n    } else {\n      _toad = +toad;\n    }\n    if (baks.length > 0) {\n      if (_toad < 1 || _toad > baks.length) {\n        throw new Error(`Invalid toad ${_toad} for baks in ${baks}`);\n      }\n    } else {\n      if (_toad != 0) {\n        throw new Error(`Invalid toad ${_toad} for no baks`);\n      }\n    }\n    const ked = {\n      v: vs,\n      t: ilk,\n      d: \"\",\n      i: \"\",\n      ii: pre,\n      s: \"\" + isn,\n      c: cnfg,\n      bt: _toad.toString(16),\n      b: baks,\n      n: nonce\n    };\n    const prefixer = new Prefixer({ code }, ked);\n    ked.i = prefixer.qb64;\n    ked.d = prefixer.qb64;\n    return new Serder(ked);\n  }\n  vdr2.incept = incept2;\n})(vdr || (vdr = {}));\n\n// src/keri/app/credentialing.ts\nvar CredentialTypes = class {\n  static issued = \"issued\";\n  static received = \"received\";\n};\nvar Credentials = class {\n  client;\n  /**\n   * Credentials\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List credentials\n   * @async\n   * @param {CredentialFilter} [kargs] Optional parameters to filter the credentials\n   * @returns {Promise<any>} A promise to the list of credentials\n   */\n  async list(kargs = {}) {\n    const path = `/credentials/query`;\n    const filtr = kargs.filter === void 0 ? {} : kargs.filter;\n    const sort = kargs.sort === void 0 ? [] : kargs.sort;\n    const limit = kargs.limit === void 0 ? 25 : kargs.limit;\n    const skip = kargs.skip === void 0 ? 0 : kargs.skip;\n    const data = {\n      filter: filtr,\n      sort,\n      skip,\n      limit\n    };\n    const method = \"POST\";\n    const res = await this.client.fetch(path, method, data, void 0);\n    return await res.json();\n  }\n  /**\n   * Get a credential\n   * @async\n   * @param {string} said - SAID of the credential\n   * @param {boolean} [includeCESR=false] - Optional flag export the credential in CESR format\n   * @returns {Promise<any>} A promise to the credential\n   */\n  async get(said, includeCESR = false) {\n    const path = `/credentials/${said}`;\n    const method = \"GET\";\n    const headers = includeCESR ? new Headers({ Accept: \"application/json+cesr\" }) : new Headers({ Accept: \"application/json\" });\n    const res = await this.client.fetch(path, method, null, headers);\n    return includeCESR ? await res.text() : await res.json();\n  }\n  /**\n   * Issue a credential\n   */\n  async issue(name, args) {\n    const hab = await this.client.identifiers().get(name);\n    const estOnly = hab.state.c !== void 0 && hab.state.c.includes(\"EO\");\n    if (estOnly) {\n      throw new Error(\"Establishment only not implemented\");\n    }\n    if (!this.client.manager) {\n      throw new Error(\"No manager on client\");\n    }\n    const keeper = this.client.manager.get(hab);\n    const [, subject] = Saider.saidify({\n      d: \"\",\n      ...args.a,\n      dt: args.a.dt ?? (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\")\n    });\n    const [, acdc] = Saider.saidify({\n      v: versify(\"ACDC\" /* ACDC */, void 0, \"JSON\" /* JSON */, 0),\n      d: \"\",\n      u: args.u,\n      i: args.i ?? hab.prefix,\n      ri: args.ri,\n      s: args.s,\n      a: subject,\n      e: args.e,\n      r: args.r\n    });\n    const [, iss] = Saider.saidify({\n      v: versify(\"KERI\" /* KERI */, void 0, \"JSON\" /* JSON */, 0),\n      t: Ilks.iss,\n      d: \"\",\n      i: acdc.d,\n      s: \"0\",\n      ri: args.ri,\n      dt: subject.dt\n    });\n    const sn = parseInt(hab.state.s, 16);\n    const anc = interact({\n      pre: hab.prefix,\n      sn: sn + 1,\n      data: [\n        {\n          i: iss.i,\n          s: iss.s,\n          d: iss.d\n        }\n      ],\n      dig: hab.state.d,\n      version: void 0,\n      kind: void 0\n    });\n    const sigs = await keeper.sign(b(anc.raw));\n    const path = `/identifiers/${hab.name}/credentials`;\n    const method = \"POST\";\n    const body = {\n      acdc,\n      iss,\n      ixn: anc.ked,\n      sigs,\n      [keeper.algo]: keeper.params()\n    };\n    const headers = new Headers({\n      Accept: \"application/json+cesr\"\n    });\n    const res = await this.client.fetch(path, method, body, headers);\n    const op = await res.json();\n    return {\n      acdc: new Serder(acdc),\n      iss: new Serder(iss),\n      anc,\n      op\n    };\n  }\n  /**\n   * Revoke credential\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} said SAID of the credential\n   * @param {string} datetime date time of revocation\n   * @returns {Promise<any>} A promise to the long-running operation\n   */\n  async revoke(name, said, datetime) {\n    const hab = await this.client.identifiers().get(name);\n    const pre = hab.prefix;\n    const vs = versify(\"KERI\" /* KERI */, void 0, \"JSON\" /* JSON */, 0);\n    const dt = datetime ?? (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\");\n    const cred = await this.get(said);\n    const _rev = {\n      v: vs,\n      t: Ilks.rev,\n      d: \"\",\n      i: said,\n      s: \"1\",\n      ri: cred.sad.ri,\n      p: cred.status.d,\n      dt\n    };\n    const [, rev] = Saider.saidify(_rev);\n    let ixn = {};\n    let sigs = [];\n    const state = hab.state;\n    if (state.c !== void 0 && state.c.includes(\"EO\")) {\n      var estOnly = true;\n    } else {\n      var estOnly = false;\n    }\n    const sn = parseInt(state.s, 16);\n    const dig = state.d;\n    const data = [\n      {\n        i: rev.i,\n        s: rev.s,\n        d: rev.d\n      }\n    ];\n    const keeper = this.client.manager.get(hab);\n    if (estOnly) {\n      throw new Error(\"Establishment only not implemented\");\n    } else {\n      const serder = interact({\n        pre,\n        sn: sn + 1,\n        data,\n        dig,\n        version: void 0,\n        kind: void 0\n      });\n      sigs = await keeper.sign(b(serder.raw));\n      ixn = serder.ked;\n    }\n    const body = {\n      rev,\n      ixn,\n      sigs,\n      [keeper.algo]: keeper.params()\n    };\n    const path = `/identifiers/${name}/credentials/${said}`;\n    const method = \"DELETE\";\n    const headers = new Headers({\n      Accept: \"application/json+cesr\"\n    });\n    const res = await this.client.fetch(path, method, body, headers);\n    const op = await res.json();\n    return {\n      rev: new Serder(rev),\n      anc: new Serder(ixn),\n      op\n    };\n  }\n  /**\n   * Present a credential\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} said SAID of the credential\n   * @param {string} recipient Identifier prefix of the receiver of the presentation\n   * @param {boolean} [include=true] Flag to indicate whether to stream credential alongside presentation exchange message\n   * @returns {Promise<string>} A promise to the long-running operation\n   */\n  async present(name, said, recipient, include = true) {\n    const hab = await this.client.identifiers().get(name);\n    const pre = hab.prefix;\n    const cred = await this.get(said);\n    const data = {\n      i: cred.sad.i,\n      s: cred.sad.s,\n      n: said\n    };\n    const vs = versify(\"KERI\" /* KERI */, void 0, \"JSON\" /* JSON */, 0);\n    const _sad = {\n      v: vs,\n      t: Ilks.exn,\n      d: \"\",\n      dt: (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\"),\n      r: \"/presentation\",\n      q: {},\n      a: data\n    };\n    const [, sad] = Saider.saidify(_sad);\n    const exn = new Serder(sad);\n    const keeper = this.client.manager.get(hab);\n    const sig = await keeper.sign(b(exn.raw), true);\n    const siger = new Siger({ qb64: sig[0] });\n    const seal = [\"SealLast\", { i: pre }];\n    let ims = messagize(exn, [siger], seal, void 0, void 0, true);\n    ims = ims.slice(JSON.stringify(exn.ked).length);\n    const body = {\n      exn: exn.ked,\n      sig: new TextDecoder().decode(ims),\n      recipient,\n      include\n    };\n    const path = `/identifiers/${name}/credentials/${said}/presentations`;\n    const method = \"POST\";\n    const headers = new Headers({\n      Accept: \"application/json+cesr\"\n    });\n    const res = await this.client.fetch(path, method, body, headers);\n    return await res.text();\n  }\n  /**\n   * Request a presentation of a credential\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} recipient Identifier prefix of the receiver of the presentation\n   * @param {string} schema SAID of the schema\n   * @param {string} [issuer] Optional prefix of the issuer of the credential\n   * @returns {Promise<string>} A promise to the long-running operation\n   */\n  async request(name, recipient, schema, issuer) {\n    const hab = await this.client.identifiers().get(name);\n    const pre = hab.prefix;\n    const data = {\n      s: schema\n    };\n    if (issuer !== void 0) {\n      data[\"i\"] = issuer;\n    }\n    const vs = versify(\"KERI\" /* KERI */, void 0, \"JSON\" /* JSON */, 0);\n    const _sad = {\n      v: vs,\n      t: Ilks.exn,\n      d: \"\",\n      dt: (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\"),\n      r: \"/presentation/request\",\n      q: {},\n      a: data\n    };\n    const [, sad] = Saider.saidify(_sad);\n    const exn = new Serder(sad);\n    const keeper = this.client.manager.get(hab);\n    const sig = await keeper.sign(b(exn.raw), true);\n    const siger = new Siger({ qb64: sig[0] });\n    const seal = [\"SealLast\", { i: pre }];\n    let ims = messagize(exn, [siger], seal, void 0, void 0, true);\n    ims = ims.slice(JSON.stringify(exn.ked).length);\n    const body = {\n      exn: exn.ked,\n      sig: new TextDecoder().decode(ims),\n      recipient\n    };\n    const path = `/identifiers/${name}/requests`;\n    const method = \"POST\";\n    const headers = new Headers({\n      Accept: \"application/json+cesr\"\n    });\n    const res = await this.client.fetch(path, method, body, headers);\n    return await res.text();\n  }\n};\nvar RegistryResult = class {\n  _regser;\n  _serder;\n  _sigs;\n  promise;\n  constructor(regser, serder, sigs, promise) {\n    this._regser = regser;\n    this._serder = serder;\n    this._sigs = sigs;\n    this.promise = promise;\n  }\n  get regser() {\n    return this._regser;\n  }\n  get serder() {\n    return this._serder;\n  }\n  get sigs() {\n    return this._sigs;\n  }\n  async op() {\n    const res = await this.promise;\n    return await res.json();\n  }\n};\nvar Registries = class {\n  client;\n  /**\n   * Registries\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List registries\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @returns {Promise<any>} A promise to the list of registries\n   */\n  async list(name) {\n    const path = `/identifiers/${name}/registries`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * Create a registry\n   * @async\n   * @param {CreateRegistryArgs}\n   * @returns {Promise<[any, Serder, any[], object]> } A promise to the long-running operation\n   */\n  async create({\n    name,\n    registryName,\n    noBackers = true,\n    toad = 0,\n    baks = [],\n    nonce\n  }) {\n    const hab = await this.client.identifiers().get(name);\n    const pre = hab.prefix;\n    const cnfg = [];\n    if (noBackers) {\n      cnfg.push(TraitDex.NoBackers);\n    }\n    const state = hab.state;\n    const estOnly = state.c !== void 0 && state.c.includes(\"EO\");\n    if (estOnly) {\n      cnfg.push(TraitDex.EstOnly);\n    }\n    const regser = vdr.incept({ pre, baks, toad, nonce, cnfg });\n    if (estOnly) {\n      throw new Error(\"establishment only not implemented\");\n    } else {\n      const state2 = hab.state;\n      const sn = parseInt(state2.s, 16);\n      const dig = state2.d;\n      const data = [\n        {\n          i: regser.pre,\n          s: \"0\",\n          d: regser.pre\n        }\n      ];\n      const serder = interact({\n        pre,\n        sn: sn + 1,\n        data,\n        dig,\n        version: Versionage,\n        kind: \"JSON\" /* JSON */\n      });\n      const keeper = this.client.manager.get(hab);\n      const sigs = await keeper.sign(b(serder.raw));\n      const res = this.createFromEvents(\n        hab,\n        name,\n        registryName,\n        regser.ked,\n        serder.ked,\n        sigs\n      );\n      return new RegistryResult(regser, serder, sigs, res);\n    }\n  }\n  createFromEvents(hab, name, registryName, vcp, ixn, sigs) {\n    const path = `/identifiers/${name}/registries`;\n    const method = \"POST\";\n    const data = {\n      name: registryName,\n      vcp,\n      ixn,\n      sigs\n    };\n    const keeper = this.client.manager.get(hab);\n    data[keeper.algo] = keeper.params();\n    return this.client.fetch(path, method, data);\n  }\n  /**\n   * Rename a registry\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} registryName Current registry name\n   * @param {string} newName New registry name\n   * @returns {Promise<any>} A promise to the registry record\n   */\n  async rename(name, registryName, newName) {\n    const path = `/identifiers/${name}/registries/${registryName}`;\n    const method = \"PUT\";\n    const data = {\n      name: newName\n    };\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n};\nvar Schemas = class {\n  client;\n  /**\n   * Schemas\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get a schema\n   * @async\n   * @param {string} said SAID of the schema\n   * @returns {Promise<any>} A promise to the schema\n   */\n  async get(said) {\n    const path = `/schema/${said}`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * List schemas\n   * @async\n   * @returns {Promise<any>} A promise to the list of schemas\n   */\n  async list() {\n    const path = `/schema`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n};\nvar Ipex = class {\n  client;\n  /**\n   * Schemas\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Create an IPEX grant EXN message\n   */\n  async grant(args) {\n    const hab = await this.client.identifiers().get(args.senderName);\n    const data = {\n      m: args.message ?? \"\",\n      i: args.recipient\n    };\n    let atc = args.ancAttachment;\n    if (atc === void 0) {\n      const keeper = this.client.manager.get(hab);\n      const sigs = await keeper.sign(b(args.anc.raw));\n      const sigers = sigs.map((sig) => new Siger({ qb64: sig }));\n      const ims = d(messagize(args.anc, sigers));\n      atc = ims.substring(args.anc.size);\n    }\n    const acdcAtc = args.acdcAttachment === void 0 ? d(serializeACDCAttachment(args.iss)) : args.acdcAttachment;\n    const issAtc = args.issAttachment === void 0 ? d(serializeIssExnAttachment(args.anc)) : args.issAttachment;\n    const embeds = {\n      acdc: [args.acdc, acdcAtc],\n      iss: [args.iss, issAtc],\n      anc: [args.anc, atc]\n    };\n    return this.client.exchanges().createExchangeMessage(\n      hab,\n      \"/ipex/grant\",\n      data,\n      embeds,\n      void 0,\n      args.datetime,\n      args.agree\n    );\n  }\n  async submitGrant(name, exn, sigs, atc, recp) {\n    const body = {\n      exn: exn.ked,\n      sigs,\n      atc,\n      rec: recp\n    };\n    const response = await this.client.fetch(\n      `/identifiers/${name}/ipex/grant`,\n      \"POST\",\n      body\n    );\n    return response.json();\n  }\n  /**\n   * Create an IPEX admit EXN message\n   * @async\n   * @param {string} name Name or alias of the identifier\n   * @param {string} message accompany human readable description of the credential being admitted\n   * @param {string} grant qb64 SAID of grant message this admit is responding to\n   * @param {string} datetime Optional datetime to set for the credential\n   * @returns {Promise<[Serder, string[], string]>} A promise to the long-running operation\n   */\n  async admit(name, message, grant, datetime) {\n    const hab = await this.client.identifiers().get(name);\n    const data = {\n      m: message\n    };\n    return this.client.exchanges().createExchangeMessage(\n      hab,\n      \"/ipex/admit\",\n      data,\n      {},\n      void 0,\n      datetime,\n      grant\n    );\n  }\n  async submitAdmit(name, exn, sigs, atc, recp) {\n    const body = {\n      exn: exn.ked,\n      sigs,\n      atc,\n      rec: recp\n    };\n    const response = await this.client.fetch(\n      `/identifiers/${name}/ipex/admit`,\n      \"POST\",\n      body\n    );\n    return response.json();\n  }\n};\n\n// src/keri/app/escrowing.ts\nvar Escrows = class {\n  client;\n  /**\n   * Escrows\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List replay messages\n   * @async\n   * @param {string} [route] Optional route in the replay message\n   * @returns {Promise<any>} A promise to the list of replay messages\n   */\n  async listReply(route) {\n    const params = new URLSearchParams();\n    if (route !== void 0) {\n      params.append(\"route\", route);\n    }\n    const path = `/escrows/rpy?` + params.toString();\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n};\n\n// src/keri/core/bexter.ts\n\nvar B64REX = \"^[A-Za-z0-9\\\\-_]*$\";\nvar Reb64 = new RegExp(B64REX);\nvar Bexter = class _Bexter extends Matter {\n  constructor({ raw, code = MtrDex.StrB64_L0, qb64b, qb64, qb2 }, bext) {\n    if (raw === void 0 && qb64b === void 0 && qb64 === void 0 && qb2 === void 0) {\n      if (bext === void 0)\n        throw new EmptyMaterialError(\"Missing bext string.\");\n      const match = Reb64.exec(bext);\n      if (!match)\n        throw new Error(\"Invalid Base64.\");\n      raw = _Bexter._rawify(bext);\n    }\n    super({ raw, code, qb64b, qb64, qb2 });\n    if (!BexDex.has(this.code))\n      throw new Error(`Invalid code = ${this.code} for Bexter.`);\n  }\n  static _rawify(bext) {\n    const ts = bext.length % 4;\n    const ws = (4 - ts) % 4;\n    const ls = (3 - ts) % 3;\n    const wad = new Array(ws);\n    wad.fill(\"A\");\n    const base = wad.join(\"\") + bext;\n    const raw = decodeBase64Url(base);\n    return Uint8Array.from(raw).subarray(ls);\n  }\n  get bext() {\n    const sizage = Matter.Sizes.get(this.code);\n    const wad = Uint8Array.from(new Array(sizage?.ls).fill(0));\n    const bext = encodeBase64Url(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from([...wad, ...this.raw]));\n    let ws = 0;\n    if (sizage?.ls === 0 && bext !== void 0) {\n      if (bext[0] === \"A\") {\n        ws = 1;\n      }\n    } else {\n      ws = (sizage?.ls + 1) % 4;\n    }\n    return bext.substring(ws);\n  }\n};\n\n// src/keri/core/pather.ts\nvar Pather = class _Pather extends Bexter {\n  constructor({ raw, code = MtrDex.StrB64_L0, qb64b, qb64, qb2 }, bext, path) {\n    if (raw === void 0 && bext === void 0 && qb64b === void 0 && qb64 === void 0 && qb2 === void 0) {\n      if (path === void 0)\n        throw new EmptyMaterialError(\"Missing bext string.\");\n      bext = _Pather._bextify(path);\n    }\n    super({ raw, code, qb64b, qb64, qb2 }, bext);\n  }\n  // TODO: implement SAD access methods like resolve, root, strip, startswith and tail\n  get path() {\n    if (!this.bext.startsWith(\"-\")) {\n      throw new Error(\"invalid SAD ptr\");\n    }\n    let path = this.bext;\n    while (path.charAt(0) === \"-\") {\n      path = path.substring(1);\n    }\n    const apath = path.split(\"-\");\n    if (apath[0] !== \"\") {\n      return apath;\n    } else {\n      return [];\n    }\n  }\n  static _bextify(path) {\n    const vath = [];\n    for (const p of path) {\n      let sp = \"\";\n      if (typeof p === \"number\") {\n        sp = p.toString();\n      } else {\n        sp = p;\n      }\n      const match = Reb64.exec(sp);\n      if (!match) {\n        throw new Error(`\"Non Base64 path component = ${p}.`);\n      }\n      vath.push(sp);\n    }\n    return \"-\" + vath.join(\"-\");\n  }\n};\n\n// src/keri/app/exchanging.ts\nvar Exchanges = class {\n  client;\n  /**\n   * Exchanges\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Create exn message\n   * @async\n   * @returns {Promise<any>} A promise to the list of replay messages\n   * @param sender\n   * @param route\n   * @param payload\n   * @param embeds\n   * @param recipient\n   * @param datetime\n   * @param dig\n   */\n  async createExchangeMessage(sender, route, payload, embeds, recipient, datetime, dig) {\n    const keeper = this.client.manager.get(sender);\n    const [exn, end] = exchange(\n      route,\n      payload,\n      sender[\"prefix\"],\n      recipient,\n      datetime,\n      dig,\n      void 0,\n      embeds\n    );\n    const sigs = await keeper.sign(b(exn.raw));\n    return [exn, sigs, d(end)];\n  }\n  /**\n   * Send exn messages to list of recipients\n   * @async\n   * @returns {Promise<any>} A promise to the list of replay messages\n   * @param name\n   * @param topic\n   * @param sender\n   * @param route\n   * @param payload\n   * @param embeds\n   * @param recipients\n   */\n  async send(name, topic, sender, route, payload, embeds, recipients) {\n    const [exn, sigs, atc] = await this.createExchangeMessage(\n      sender,\n      route,\n      payload,\n      embeds\n    );\n    return await this.sendFromEvents(\n      name,\n      topic,\n      exn,\n      sigs,\n      atc,\n      recipients\n    );\n  }\n  /**\n   * Send exn messaget to list of recipients\n   * @async\n   * @returns {Promise<any>} A promise to the list of replay messages\n   * @param name\n   * @param topic\n   * @param exn\n   * @param sigs\n   * @param atc\n   * @param recipients\n   */\n  async sendFromEvents(name, topic, exn, sigs, atc, recipients) {\n    const path = `/identifiers/${name}/exchanges`;\n    const method = \"POST\";\n    const data = {\n      tpc: topic,\n      exn: exn.ked,\n      sigs,\n      atc,\n      rec: recipients\n    };\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Get exn message by said\n   * @async\n   * @returns A promise to the exn message\n   * @param said The said of the exn message\n   */\n  async get(said) {\n    const path = `/exchanges/${said}`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n};\nfunction exchange(route, payload, sender, recipient, date, dig, modifiers, embeds) {\n  const vs = versify(\"KERI\" /* KERI */, void 0, \"JSON\" /* JSON */, 0);\n  const ilk = Ilks.exn;\n  const dt = date !== void 0 ? date : nowUTC().toISOString().replace(\"Z\", \"000+00:00\");\n  const p = dig !== void 0 ? dig : \"\";\n  const q = modifiers !== void 0 ? modifiers : {};\n  const ems = embeds != void 0 ? embeds : {};\n  let e = {};\n  let end = \"\";\n  Object.entries(ems).forEach(([key, value]) => {\n    const serder = value[0];\n    const atc = value[1];\n    e[key] = serder.ked;\n    if (atc == void 0) {\n      return;\n    }\n    let pathed = \"\";\n    const pather = new Pather({}, void 0, [\"e\", key]);\n    pathed += pather.qb64;\n    pathed += atc;\n    const counter = new Counter({\n      code: CtrDex.PathedMaterialQuadlets,\n      count: Math.floor(pathed.length / 4)\n    });\n    end += counter.qb64;\n    end += pathed;\n  });\n  if (Object.keys(e).length > 0) {\n    e[\"d\"] = \"\";\n    [, e] = Saider.saidify(e);\n  }\n  const attrs = {};\n  if (recipient !== void 0) {\n    attrs[\"i\"] = recipient;\n  }\n  const a = {\n    ...attrs,\n    ...payload\n  };\n  const _ked = {\n    v: vs,\n    t: ilk,\n    d: \"\",\n    i: sender,\n    p,\n    dt,\n    r: route,\n    q,\n    a,\n    e\n  };\n  const [, ked] = Saider.saidify(_ked);\n  const exn = new Serder(ked);\n  return [exn, b(end)];\n}\n\n// src/keri/app/grouping.ts\nvar Groups = class {\n  client;\n  /**\n   * Groups\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * Get group request messages\n   * @async\n   * @param {string} [said] SAID of exn message to load\n   * @returns {Promise<any>} A promise to the list of replay messages\n   */\n  async getRequest(said) {\n    const path = `/multisig/request/` + said;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.json();\n  }\n  /**\n   * Send multisig exn request  messages to other group members\n   * @async\n   * @param {string} [name] human readable name of group AID\n   * @param {Dict<any>} [exn] exn message to send to other members\n   * @param {string[]} [sigs] signature of the participant over the exn\n   * @param {string} [atc] additional attachments from embedded events in exn\n   * @returns {Promise<any>} A promise to the list of replay messages\n   */\n  async sendRequest(name, exn, sigs, atc) {\n    const path = `/identifiers/${name}/multisig/request`;\n    const method = \"POST\";\n    const data = {\n      exn,\n      sigs,\n      atc\n    };\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n  /**\n   * Join multisig group using rotation event.\n   * This can be used by participants being asked to contribute keys to a rotation event to join an existing group.\n   * @async\n   * @param {string} [name] human readable name of group AID\n   * @param {any} [rot] rotation event\n   * @param {any} [sigs] signatures\n   * @param {string} [gid] prefix\n   * @param {string[]} [smids] array of particpants\n   * @param {string[]} [rmids] array of particpants\n   * @returns {Promise<any>} A promise to the list of replay messages\n   */\n  async join(name, rot, sigs, gid, smids, rmids) {\n    const path = `/identifiers/${name}/multisig/join`;\n    const method = \"POST\";\n    const data = {\n      tpc: \"multisig\",\n      rot: rot.ked,\n      sigs,\n      gid,\n      smids,\n      rmids\n    };\n    const res = await this.client.fetch(path, method, data);\n    return await res.json();\n  }\n};\n\n// src/keri/app/notifying.ts\nvar Notifications = class {\n  client;\n  /**\n   * Notifications\n   * @param {SignifyClient} client\n   */\n  constructor(client) {\n    this.client = client;\n  }\n  /**\n   * List notifications\n   * @async\n   * @param {number} [start=0] Start index of list of notifications, defaults to 0\n   * @param {number} [end=24] End index of list of notifications, defaults to 24\n   * @returns {Promise<any>} A promise to the list of notifications\n   */\n  async list(start = 0, end = 24) {\n    const extraHeaders = new Headers();\n    extraHeaders.append(\"Range\", `notes=${start}-${end}`);\n    const path = `/notifications`;\n    const method = \"GET\";\n    const res = await this.client.fetch(path, method, null, extraHeaders);\n    const cr = res.headers.get(\"content-range\");\n    const range2 = parseRangeHeaders(cr, \"notes\");\n    const notes = await res.json();\n    return {\n      start: range2.start,\n      end: range2.end,\n      total: range2.total,\n      notes\n    };\n  }\n  /**\n   * Mark a notification as read\n   * @async\n   * @param {string} said SAID of the notification\n   * @returns {Promise<string>} A promise to the result of the marking\n   */\n  async mark(said) {\n    const path = `/notifications/` + said;\n    const method = \"PUT\";\n    const res = await this.client.fetch(path, method, null);\n    return await res.text();\n  }\n  /**\n   * Delete a notification\n   * @async\n   * @param {string} said SAID of the notification\n   * @returns {Promise<any>} A promise to the result of the deletion\n   */\n  async delete(said) {\n    const path = `/notifications/` + said;\n    const method = \"DELETE\";\n    await this.client.fetch(path, method, null);\n  }\n};\n\n// src/keri/app/clienting.ts\nvar DEFAULT_BOOT_URL = \"http://localhost:3903\";\nvar State = class {\n  agent;\n  controller;\n  ridx;\n  pidx;\n  constructor() {\n    this.agent = null;\n    this.controller = null;\n    this.pidx = 0;\n    this.ridx = 0;\n  }\n};\nvar SignifyClient = class {\n  controller;\n  url;\n  bran;\n  pidx;\n  agent;\n  authn;\n  manager;\n  tier;\n  bootUrl;\n  exteralModules;\n  /**\n   * SignifyClient constructor\n   * @param {string} url KERIA admin interface URL\n   * @param {string} bran Base64 21 char string that is used as base material for seed of the client AID\n   * @param {Tier} tier Security tier for generating keys of the client AID (high | mewdium | low)\n   * @param {string} bootUrl KERIA boot interface URL\n   * @param {ExternalModule[]} externalModules list of external modules to load\n   */\n  constructor(url, bran, tier = \"low\" /* low */, bootUrl = DEFAULT_BOOT_URL, externalModules = []) {\n    this.url = url;\n    if (bran.length < 21) {\n      throw Error(\"bran must be 21 characters\");\n    }\n    this.bran = bran;\n    this.pidx = 0;\n    this.controller = new Controller(bran, tier);\n    this.authn = null;\n    this.agent = null;\n    this.manager = null;\n    this.tier = tier;\n    this.bootUrl = bootUrl;\n    this.exteralModules = externalModules;\n  }\n  get data() {\n    return [this.url, this.bran, this.pidx, this.authn];\n  }\n  /**\n   * Boot a KERIA agent\n   * @async\n   * @returns {Promise<Response>} A promise to the result of the boot\n   */\n  async boot() {\n    const [evt, sign] = this.controller?.event ?? [];\n    const data = {\n      icp: evt.ked,\n      sig: sign.qb64,\n      stem: this.controller?.stem,\n      pidx: 1,\n      tier: this.controller?.tier\n    };\n    return await fetch(this.bootUrl + \"/boot\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  /**\n   * Get state of the agent and the client\n   * @async\n   * @returns {Promise<Response>} A promise to the state\n   */\n  async state() {\n    const caid = this.controller?.pre;\n    const res = await fetch(this.url + `/agent/${caid}`);\n    if (res.status == 404) {\n      throw new Error(`agent does not exist for controller ${caid}`);\n    }\n    const data = await res.json();\n    const state = new State();\n    state.agent = data.agent ?? {};\n    state.controller = data.controller ?? {};\n    state.ridx = data.ridx ?? 0;\n    state.pidx = data.pidx ?? 0;\n    return state;\n  }\n  /**  Connect to a KERIA agent\n   * @async\n   */\n  async connect() {\n    const state = await this.state();\n    this.pidx = state.pidx;\n    this.controller = new Controller(\n      this.bran,\n      this.tier,\n      0,\n      state.controller\n    );\n    this.controller.ridx = state.ridx !== void 0 ? state.ridx : 0;\n    this.agent = new Agent(state.agent);\n    if (this.agent.anchor != this.controller.pre) {\n      throw Error(\n        \"commitment to controller AID missing in agent inception event\"\n      );\n    }\n    if (this.controller.serder.ked.s == 0) {\n      await this.approveDelegation();\n    }\n    this.manager = new KeyManager(\n      this.controller.salter,\n      this.exteralModules\n    );\n    this.authn = new Authenticater(\n      this.controller.signer,\n      this.agent.verfer\n    );\n  }\n  /**\n   * Fetch a resource from the KERIA agent\n   * @async\n   * @param {string} path Path to the resource\n   * @param {string} method HTTP method\n   * @param {any} data Data to be sent in the body of the resource\n   * @param {Headers} [extraHeaders] Optional extra headers to be sent with the request\n   * @returns {Promise<Response>} A promise to the result of the fetch\n   */\n  async fetch(path, method, data, extraHeaders) {\n    const headers = new Headers();\n    let signed_headers = new Headers();\n    const final_headers = new Headers();\n    headers.set(\"Signify-Resource\", this.controller.pre);\n    headers.set(\n      HEADER_SIG_TIME,\n      (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\")\n    );\n    headers.set(\"Content-Type\", \"application/json\");\n    const _body = method == \"GET\" ? null : JSON.stringify(data);\n    if (this.authn) {\n      signed_headers = this.authn.sign(\n        headers,\n        method,\n        path.split(\"?\")[0]\n      );\n    } else {\n      throw new Error(\"client need to call connect first\");\n    }\n    signed_headers.forEach((value, key) => {\n      final_headers.set(key, value);\n    });\n    if (extraHeaders !== void 0) {\n      extraHeaders.forEach((value, key) => {\n        final_headers.append(key, value);\n      });\n    }\n    const res = await fetch(this.url + path, {\n      method,\n      body: _body,\n      headers: final_headers\n    });\n    if (!res.ok) {\n      const error = await res.text();\n      const message = `HTTP ${method} ${path} - ${res.status} ${res.statusText} - ${error}`;\n      throw new Error(message);\n    }\n    const isSameAgent = this.agent?.pre === res.headers.get(\"signify-resource\");\n    if (!isSameAgent) {\n      throw new Error(\"message from a different remote agent\");\n    }\n    const verification = this.authn.verify(\n      res.headers,\n      method,\n      path.split(\"?\")[0]\n    );\n    if (verification) {\n      return res;\n    } else {\n      throw new Error(\"response verification failed\");\n    }\n  }\n  /**\n   * Create a Signed Request to fetch a resource from an external URL with headers signed by an AID\n   * @async\n   * @param {string} aidName Name or alias of the AID to be used for signing\n   * @param {string} url URL of the requested resource\n   * @param {RequestInit} req Request options should include:\n   *     - method: HTTP method\n   *     - data Data to be sent in the body of the resource.\n   *              If the data is a CESR JSON string then you should also set contentType to 'application/json+cesr'\n   *              If the data is a FormData object then you should not set the contentType and the browser will set it to 'multipart/form-data'\n   *              If the data is an object then you should use JSON.stringify to convert it to a string and set the contentType to 'application/json'\n   *     - contentType Content type of the request.\n   * @returns {Promise<Request>} A promise to the created Request\n   */\n  async createSignedRequest(aidName, url, req) {\n    const hab = await this.identifiers().get(aidName);\n    const keeper = this.manager.get(hab);\n    const authenticator = new Authenticater(\n      keeper.signers[0],\n      keeper.signers[0].verfer\n    );\n    const headers = new Headers(req.headers);\n    headers.set(\"Signify-Resource\", hab[\"prefix\"]);\n    headers.set(\n      HEADER_SIG_TIME,\n      (/* @__PURE__ */ new Date()).toISOString().replace(\"Z\", \"000+00:00\")\n    );\n    const signed_headers = authenticator.sign(\n      new Headers(headers),\n      req.method ?? \"GET\",\n      new URL(url).pathname\n    );\n    req.headers = signed_headers;\n    return new Request(url, req);\n  }\n  /**\n   * Approve the delegation of the client AID to the KERIA agent\n   * @async\n   * @returns {Promise<Response>} A promise to the result of the approval\n   */\n  async approveDelegation() {\n    const sigs = this.controller.approveDelegation(this.agent);\n    const data = {\n      ixn: this.controller.serder.ked,\n      sigs\n    };\n    return await fetch(\n      this.url + \"/agent/\" + this.controller.pre + \"?type=ixn\",\n      {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }\n    );\n  }\n  /**\n   * Save old client passcode in KERIA agent\n   * @async\n   * @param {string} passcode Passcode to be saved\n   * @returns {Promise<Response>} A promise to the result of the save\n   */\n  async saveOldPasscode(passcode) {\n    const caid = this.controller?.pre;\n    const body = { salt: passcode };\n    return await fetch(this.url + \"/salt/\" + caid, {\n      method: \"PUT\",\n      body: JSON.stringify(body),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  /**\n   * Delete a saved passcode from KERIA agent\n   * @async\n   * @returns {Promise<Response>} A promise to the result of the deletion\n   */\n  async deletePasscode() {\n    const caid = this.controller?.pre;\n    return await fetch(this.url + \"/salt/\" + caid, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  /**\n   * Rotate the client AID\n   * @async\n   * @param {string} nbran Base64 21 char string that is used as base material for the new seed\n   * @param {Array<string>} aids List of managed AIDs to be rotated\n   * @returns {Promise<Response>} A promise to the result of the rotation\n   */\n  async rotate(nbran, aids) {\n    const data = this.controller.rotate(nbran, aids);\n    return await fetch(this.url + \"/agent/\" + this.controller.pre, {\n      method: \"PUT\",\n      body: JSON.stringify(data),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  }\n  /**\n   * Get identifiers resource\n   * @returns {Identifier}\n   */\n  identifiers() {\n    return new Identifier(this);\n  }\n  /**\n   * Get OOBIs resource\n   * @returns {Oobis}\n   */\n  oobis() {\n    return new Oobis(this);\n  }\n  /**\n   * Get operations resource\n   * @returns {Operations}\n   */\n  operations() {\n    return new Operations(this);\n  }\n  /**\n   * Get keyEvents resource\n   * @returns {KeyEvents}\n   */\n  keyEvents() {\n    return new KeyEvents(this);\n  }\n  /**\n   * Get keyStates resource\n   * @returns {KeyStates}\n   */\n  keyStates() {\n    return new KeyStates(this);\n  }\n  /**\n   * Get credentials resource\n   * @returns {Credentials}\n   */\n  credentials() {\n    return new Credentials(this);\n  }\n  /**\n   * Get IPEX resource\n   * @returns {Ipex}\n   */\n  ipex() {\n    return new Ipex(this);\n  }\n  /**\n   * Get registries resource\n   * @returns {Registries}\n   */\n  registries() {\n    return new Registries(this);\n  }\n  /**\n   * Get schemas resource\n   * @returns {Schemas}\n   */\n  schemas() {\n    return new Schemas(this);\n  }\n  /**\n   * Get challenges resource\n   * @returns {Challenges}\n   */\n  challenges() {\n    return new Challenges(this);\n  }\n  /**\n   * Get contacts resource\n   * @returns {Contacts}\n   */\n  contacts() {\n    return new Contacts(this);\n  }\n  /**\n   * Get notifications resource\n   * @returns {Notifications}\n   */\n  notifications() {\n    return new Notifications(this);\n  }\n  /**\n   * Get escrows resource\n   * @returns {Escrows}\n   */\n  escrows() {\n    return new Escrows(this);\n  }\n  /**\n   * Get groups resource\n   * @returns {Groups}\n   */\n  groups() {\n    return new Groups(this);\n  }\n  /**\n   * Get exchange resource\n   * @returns {Exchanges}\n   */\n  exchanges() {\n    return new Exchanges(this);\n  }\n};\n\n// src/index.ts\nvar src_default = exports_exports;\n\n//# sourceMappingURL=signify-ts.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/signify-ts/dist/signify-ts.mjs\n");

/***/ })

};
;